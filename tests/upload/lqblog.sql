-- phpMyAdmin SQL Dump
-- version 4.8.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: 2019-08-11 13:14:43
-- 服务器版本： 5.5.60-log
-- PHP Version: 7.2.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `lqblog`
--

-- --------------------------------------------------------

--
-- 表的结构 `lb_article`
--

CREATE TABLE `lb_article` (
  `id` int(11) UNSIGNED NOT NULL COMMENT '文章ID，主键，自增',
  `title` varchar(255) NOT NULL DEFAULT '' COMMENT '文章标题',
  `create_time` int(11) UNSIGNED DEFAULT '0' COMMENT '文章创建时间，时间戳',
  `update_time` int(10) UNSIGNED NOT NULL DEFAULT '0' COMMENT '文章最后修改时间，时间戳',
  `category_id` int(11) UNSIGNED NOT NULL DEFAULT '0' COMMENT '文章所属分类ID',
  `content` text NOT NULL COMMENT '文章内容',
  `status` enum('edit','normal') NOT NULL DEFAULT 'edit' COMMENT '文章状态：编辑中或正常',
  `view_count` int(11) UNSIGNED NOT NULL DEFAULT '0' COMMENT '文章浏览人数',
  `is_top` bit(1) NOT NULL DEFAULT b'0' COMMENT '文章是否置顶',
  `is_original` bit(1) NOT NULL DEFAULT b'0' COMMENT '文章是否原创'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `lb_article`
--

INSERT INTO `lb_article` (`id`, `title`, `create_time`, `update_time`, `category_id`, `content`, `status`, `view_count`, `is_top`, `is_original`) VALUES
(12, 'PHP生成Markdown文本简介', 1519569173, 1519569173, 1000, '## 思路\r\n剔除markdown的标签，为了加快速度，可以先截取前若干字符再剔除。\r\n\r\n## 代码\r\n`Markdown.php`\r\n\r\n```php\r\n<?php\r\n\r\nclass Markdown\r\n{\r\n	static public function getIntro($md, $intro_count)\r\n	{\r\n		$md = mb_substr($md, 0, $intro_count * 2);\r\n		//剔除[TOCM]和[TOC]\r\n		$md = preg_replace(\'/\\[TOCM?\\]/\', \'\', $md);\r\n		//剔除标题符号\'#\'\r\n		$md = preg_replace(\'/(?m)^#+/\', \'\', $md);\r\n		//剔除列表符号\'-\'\r\n		$md = preg_replace(\'/(?m)^- /\', \'\', $md);\r\n		//剔除块代码标签\r\n		$md = preg_replace(\'/(?m)^```.*/\', \'\', $md);\r\n		//剔除图片和链接标签，并提取文字\r\n		$md = preg_replace(\'/!?\\[(.*)\\](\\(.+\\)?)?/\', \'$1\', $md);\r\n		//剔除行内代码标签`\r\n		$md = preg_replace(\'/`(.+)`?/\', \'$1\', $md);\r\n		//剔除表格符合|和-\r\n		$md = preg_replace(\'/[\\|-]/\', \'\', $md);\r\n		return mb_substr($md, 0, $intro_count);\r\n	}\r\n}\r\n```', 'normal', 546, b'0', b'1'),
(21, '第1章 网页的构造块', 1519895815, 1519895815, 1018, '## 基本hmtl页面结构\r\n\r\n基本的html页面由顶部(html说明)、头部(head)、主体组成(body)\r\n模板：\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n	<meta charset=\"UTF-8\">\r\n	<title>网页标题</title>\r\n</head>\r\n<body>\r\n	网页内容\r\n</body>\r\n</html>\r\n```\r\n\r\n## 标签：元素、属性、值\r\n\r\nhtml页面由标签组合、嵌套而成，标签则由元素、属性、值组成。每个元素由开始标签和结束标签组成，少部分元素无结束标签\r\n\r\n属性和值：属性是用来提供元素的信息的，值指的是属性的值\r\n\r\n父、子元素：元素之间的嵌套关系构成了元素的父子关系，嵌套元素为父，被嵌套元素为子\r\n\r\n## 文件名\r\n\r\n建议：文件名使用小写\r\n\r\n建议：文件名使用连字符\"-\"分割单词\r\n\r\n文件名后缀为\".html\"或\"htm\"\r\n\r\n## URL\r\n\r\nURL(Uniform Resource Locator, 统一资源定位符)是地址的别名，包含文件的存储位置和浏览器对其处理方式。\r\n\r\n绝对URL(absolute URL):显示文件的完整路径，这意味着绝对URL本身所在的位置与被引用的实际文件的位置无关，\r\n\r\n相对URL(relative URL):以包含URL本身的文件夹的位置为参考点，描述目标文件夹的位置。 如果目标文件与当前页面(也就是包含URL的页面)在同一个目录，那么这个文件的相对URL仅仅是文件名和扩展名， 如果目标文件在当前目录的子目录中，那么它的相对URL是子目录名，后面是斜杠，然后是目标文件的文件名和扩展名。 如果要引用文件层次结构中更高层目录中的文件，那么使用两个句点和一条斜杠。 可以组合和重复使用两个句点和一条斜杠，从而引用当前文件所在的硬盘上的任何文件。 一般来说，对于同一服务器上的文件，应该总是使用相对URL，它们更容易输入， 而且在将页面从本地系统转移到服务器上时更方便，只要每个文件的相对位置保持不变，链接就仍然是有效地。\r\n\r\n[URL-百度百科](http://baike.baidu.com/link?url=cK8OVNdcyFD-2S7AbxW0sxqyZ8YMlNiwwPfjI2hTA80rt7g9xRWoS3dPWCzCsNrLu2mu0OiKFy6wUKctCcaJO_ \"URL-百度百科\")\r\n\r\n## 元素的语义\r\n\r\n各种标签都有对应的语义，有了语义才能更好的进行处理不同的元素。\r\n\r\n使用语义的好处：\r\n提高搜索引擎优化效果\r\n使维护代码、增加css样式方便\r\n提高可访问性和操作性\r\n浏览器的默认样式\r\n\r\n每个浏览器都有一个内置的css样式表文件，决定每个html元素的默认样式。', 'normal', 440, b'0', b'1'),
(22, '第2章 处理网页文件', 1519897221, 1519897221, 1018, '## 规划网站\r\n\r\n规划网站的方法：\r\n- 选定网站类型\r\n- 确定页面结构，画出网站结构草图\r\n- 设计页面、图像、其他文件的命名规则 \r\n- 默认页面\r\n\r\n服务器会根据文件名识别每个文件夹中的默认页面，会依次查找：\"index.html\"、\"index.htm\"、\"default.htm\"\r\n\r\n这意味着你在浏览器地址栏输入 \"www.luoluolzb.cn\" 和 \"www.luoluolzb.cn/index.html\" 的效果一样\r\n\r\n## 关于html文件\r\n\r\nhtml为纯文本文件，使用记事本就可以编写^_^，保存的时候注意使用utf-8格式保存。\r\n\r\n## 组织文件\r\n\r\n当网站文件文件较多时，就需要对文件进行分类组织。\r\n\r\n一般的组织方式:\r\n- 为网站的每个部分创建一个文件夹，将相关的文件放在里面\r\n- 为图像、样式表、JavaScript等文件创建一个文件夹(如img、css、js等)，或为每个创建一个文件夹(如assets)，或建立一个文件夹再建立几个子文件夹\r\n\r\n## 借鉴他人网页\r\n\r\n使用浏览器可以查看网页的代码，可以保存为本地文件。\r\n\r\n使用浏览器的开发者工具可以调试网页，进行临时的修改。\r\n', 'normal', 503, b'0', b'1'),
(23, '第3章 基本HTML结构', 1519897806, 1519897806, 1018, '## 基本HTML结构\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n	<meta charset=\"utf-8\" />\r\n	<title>标题</title>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n## header标签(页眉)\r\n\r\n通常包含一些导航信息，可以有页面级的header也可以在其它的标签之下的header\r\n\r\n## role属性\r\n\r\nrole属性可以增加访问性\r\n\r\n## nav标签\r\n\r\nnav标签可以标记导航，本身并没有任何显示效果\r\n\r\n## main标签\r\n\r\nmain标签标记页面主要，本身也并没有有任何效果，一个页面只能使用一次\r\n\r\n## article标签(文章)\r\n\r\narticle包含文档、文章、帖子、杂志、博客、用户评论、交互式小部件等。\r\n\r\n## section标签(区块)\r\n\r\nsection通常用来包含具有相似主题的一组内容。\r\n\r\n## aside标签(附注栏)\r\n\r\n页面中与主题相关的内容，如引述、相关链接、广告、相关文章等。\r\n\r\n## footer标签(页脚)\r\n\r\n通常包含版权声明、作者、合作站链接、其他相似内容等\r\n\r\n页脚不一定在尾部\r\n\r\n## div标签(通用容器)\r\n\r\n通用容器，一个没有任何语义的容器\r\n\r\n通过使用div，可以为内容添加css样式、js效果\r\n\r\n## id属性\r\n\r\n为标签分配唯一的标识符id，就可以对此id的标签添加css样式或js效果\r\n\r\nid几乎可以是任何字符，只要不是数字开头且不包含空格\r\n\r\n一个标签只能有一个id，一个页面中不能出现相同的id，不同页面的id可以相同\r\n\r\n## class属性\r\n\r\n为标签分配的类型class，就可以对此class的标签添加css样式或js效果\r\n\r\n一个标签可以有多个类型，类型之间用空格分开，如class=\"type-name1 type-name2 type-name3 ...\"\r\n\r\n## title属性(不是title标签)\r\n\r\ntitle属性可以使鼠标移到这个标签位置时显示出此title值\r\n\r\n可以为任何标签添加此属性，不过一般用于链接\r\n\r\n## 注释标签`<!-- -->`\r\n\r\n`<!--`是注释的开始，`-->`是结束，两者之间就是注释文本\r\n\r\n注释不能嵌套', 'normal', 596, b'0', b'1'),
(24, '第4章 文本', 1519897980, 1519897980, 1018, '## p标签（段落）\r\n用来添加段落\r\n\r\n## small标签（细则旁注）\r\n用来包含免费声明、注解、署名等类型文本\r\n默认字体为稍小的字号\r\n\r\n## stong标签（加强）\r\n标记重要要文本，显示效果为粗体\r\n\r\n## em标签（强调）\r\n表示强调，显示效果为斜体\r\nem用于所有层次的强调，strong用于表示重要性\r\n另外显示效果上的，粗体可以用b标签，斜体用i标签，他们都没有语义\r\n\r\n## figure标签（创建图）\r\n图可以是图表、图片、图形、视频、代码片段等\r\n使用figcaption标签为图添加标题，一个figure中只能有一个figcaption，且只能出现在figure的开头或结尾\r\n\r\n## cite标签（引用或参考）\r\n指明对某内容的引用或者参考，显示效果为斜体\r\n\r\n## blockquote标签（块引用）\r\n用于单独的引用，一般较长，默认显示在新的一行并且有缩进。\r\n可以使用cite属性指出引用地址\r\n\r\n## q标签（短引用）\r\n用于引用一句话或一个词句等，默认对引用内容加上引号。\r\n可以使用cite属性指出引用地址\r\n\r\n## time标签（时间）\r\n可以使用time标签标记时间、日期、时间段\r\n可以使用datetime属性指定时间格式\r\ntime之间不能嵌套，无datetime属性的time标签只能包含文本\r\n\r\n## abbr标签（解释缩写词）\r\n\r\n可以使用title属性使之鼠标放置时显示全称，但最好使用括号写出全称或者两者同时使用\r\n\r\n## dfn标签（定义术语）\r\n用来定义专业术语，dfn标签及其定义应该挨在一起，显示的效果为斜体\r\n\r\n## sub标签（下标）\r\n用来显示比主体文字稍低的文本，可以用于显示化学分子式的小数字、数学下标等\r\n\r\n## sup标签（上标）\r\n用来显示比主体文字稍高的文本，可以用于显示数学上标等\r\n\r\n## address标签（添加作者信息）\r\n用于标记作者的电子邮箱、联系地址等，显示效果为\r\n\r\n## 斜体\r\ndel标签和s标签（已删除）\r\n标记已经删除的文本，显示效果为~~删除线~~\r\n不要用s标签标记整个段落或块级内容，而应该使用del\r\n## ins标签（插入）\r\n标记插入的文本，显示效果为下划线\r\n\r\n## code标签（代码）\r\n标记代码或文件名，默认为等宽度字体\r\n\r\n## pre标签（预格式）\r\n保留原文本中的换行和空格，pre和p一样会自动换行\r\nmark标签（突出显示）\r\n标记要突出显示的文本，就想看书的时候画上的荧光标记，默认显示黄色背景\r\n\r\n## br标签（换行）\r\n用来换行，此标签没有结束标签，直接这样写：<br />或者\r\n\r\n## span标签\r\n和div一样没有任何语义，不同的是span用于包围字词或短语内容，div包围块级内容\r\n\r\n## 其他标签\r\n以下标签用的较少或者浏览器对他们支持还不完善。\r\n\r\nu标签：文本注解\r\nwbr标签：一个可换行处\r\nruby、rp、rt标签：旁注标记\r\nbdi、bdo标签：指明文字显示方向\r\nmeter标签：任务的完成进度\r\nprogress标签：任务的完成进度(IE不支持此标签)', 'normal', 538, b'0', b'1'),
(25, '第5章 图像', 1519898157, 1519898157, 1018, '## img标签（图像）\r\n没有结束标签\r\n\r\nsrc属性指定图像的URL地址\r\n\r\nalt属性在图像加载未完成或者加载失败时显示文本\r\n\r\nwidth和height属性指定图像显示的尺寸，不需要带单位（单位为px），但下载速度并不会改变\r\n\r\n加快图片的加载速度：将图像尺寸变为两倍，但使用高压缩设置（就是选择低的图像质量）。这种策略可以使画质也不会太差\r\n\r\n## 为网站添加图标\r\n\r\n###方法一\r\n创建好图像命名为`favicon.ico`保存在网站的根目录下，ico文件可以在同一个文件夹包含不同尺寸的同名文件\r\n\r\n\r\n网站图像尺寸最小为16x16，一般为16x16、32x32、48x48、\r\n\r\n###方法二\r\n在 页面中的 head 头中添加：\r\n```html\r\n<link rel=\"icon\" href=\"logo.ico\" type=\"image/x-icon\"/>\r\n```\r\n或\r\n```html\r\n<link rel=\"icon shortcut\" href=\"logo.ico\" type=\"image/x-icon\"/>\r\n```\r\n', 'normal', 551, b'0', b'1'),
(26, '第6章 链接', 1519898289, 1519898289, 1018, '## 链接 (a标签)\r\n\r\n使用a标签创建链接, `href`属性指定链接地址，使用属性`target=\"_blank\"`使链接从新窗口打开。\r\n例子：\r\n```html\r\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度首页</a>\r\n```', 'normal', 608, b'0', b'1'),
(27, '第7章 CSS构造块', 1519898506, 1519898506, 1018, '## 样式表构成\r\n\r\n样式表由一些规则构成，每条规则由：选择器（selector）和声明块（declaration block）两部分组成, 如：\r\n```css\r\nbody>ul{\r\n	padding: 0;\r\n	margin: 0;\r\n}\r\n```\r\n\r\n选择器决定哪些标签将使用这些规则\r\n\r\n声明块由一些 属性-值 对构成，他们就是具体的样式规则\r\n\r\n样式表文件中的注释\r\n\r\n使用 `/*` 开始注释, `*/`结束注释\r\n\r\n## 继承\r\n\r\n标签的包含关系构成了标签之间的继承关系，这些继承关系会影响到css样式， 也就是说css样式也可以继承\r\n\r\n## 样式的优先级\r\n\r\n当多条规则定义同一个标签时，这时候就会出现冲突，优先级则有起作用\r\n\r\n首先应用特殊性高的样式声明，特殊性相同时则根据规则出现顺序，后出现的优先级高，而!important是最高的规则\r\n\r\n## 属性值\r\n\r\n属性值类型有预定义值、数字、整数、相对值、百分数、URL或者颜色\r\n\r\nURL使用：url(URL地址)\r\n\r\nCSS颜色格式：\r\n\r\n- RGB格式：`color: rgb(r, g, b)`\r\n- 十六进制格式：`color: #rrggbb`\r\n- RGB格式：`color: rgb(r, g, b)`\r\n- RGBA格式：`property: rgba(r, g, b, a)`，a表示透明度（0-1）\r\n- HSL格式：`property: hsl(h, s, l)`，H、S、L分别表示色相（hue，0-360）、饱和度（saturation，0-100%）、亮度（lightness，0-100%）\r\n- HSLA格式：`property: hsla(h, s, l, a)`，a表示透明度（0-1）\r\n- 颜色名：HTML4.0仅支持16种颜色名：\r\naqua(浅绿)、black(黑)、blue(蓝)、fuchsia(紫黑)、gray(灰)、green(绿)、lime(黄绿)、maroon(褐红)、 navy(深蓝)、olive(茶青)、purple(紫色)、red(红)、silver(银)、teal(青)、white(白)、yellow(黄)\r\n\r\nhtml5则很多，但建议如果使用其它颜色的话，使用十六进制的颜色值。', 'normal', 533, b'0', b'1'),
(28, '第8章 操作样式表', 1519898642, 1519898642, 1018, '## 使用样式表的三种方式\r\n\r\n1. 链接到外部样式表\r\n使用link标签：\r\n```html\r\n<link rel=\"stylesheet\" href=\"URL\" />\r\n```\r\nURL是样式表的地址，可以使用绝对地址也可以使用相对地址\r\nlink标签写在head标签中，link标签没有结束标签\r\n如果多个样式表规则对同一个标签定义，按出现顺序使用最后一个样式表\r\n\r\n2. 创建嵌入样式表\r\n使用style标签将样式代码包含即可，style标签要求写在head标签中\r\n使用style标签和使用外部标签的规则一样，出现顺序靠后优先级高\r\n\r\n3. 应用内联样式\r\n使用style属性对标签进行格式化，多个属性值之间用分号隔开，如 `style=\"color:red; background:url(bg.png);\"`\r\n内联样式优先级高于其他样式，除非你使用了`!important`标记\r\n\r\n尽量使用第一种方式，这样有利于网页与样式的分离，其次是第二种方式，第三种方式少用，`!important`标记尽量不要使用，因为它的优先级太高会覆盖其它所有的样式\r\n\r\n## media属性\r\n\r\n在link标签和style标签中使用media属性可以指定与媒体相关的样式表\r\n\r\n属性预设值：`print`表示用于打印，`screen`表示用于浏览器，`all`表示用于所有，还有其它的一些预设值\r\n\r\n## 借鉴\r\n\r\n在编写样式表时可以借鉴其他人网页的样式', 'normal', 522, b'0', b'1'),
(29, '第9章 定义选择器', 1519898786, 1519898786, 1018, '## 标签选择器\r\n\r\n直接指定标签名称进行选择\r\n\r\n## 类选择器\r\n\r\n使用点\".\"+和类名称进行选择\r\n\r\n## id选择器\r\n\r\n使用井号\"#\"+id名称进行选择\r\n\r\n## 后代选择器\r\n\r\n使用空格选择后代标签\r\n\r\n后代选择器对于祖先的所有后代都起作用，不论是第几代\r\n\r\n## 子选择器\r\n\r\n使用\">\"选择直接后代标签\r\n\r\n子选择器只对于祖先的直接后代（第一代）起作用\r\n\r\n## 同胞选择器\r\n\r\n使用加号\"+\"选择有同一祖先的后一个标签（他们之间没有其他标签）\r\n\r\n## 普通同胞选择器\r\n\r\n使用\"~\"选择有同一祖先的出现在后面的标签（他们可以直接相邻也可以不直接相邻）\r\n\r\n## 选择标签的第一个或者最后一个\r\n\r\n使用\":first-child\"选择该标签的第一个标签\r\n\r\n使用\":last-child\"选择该标签的第一个标签\r\n\r\n## 选择标签的第一个字母或第一行\r\n\r\n使用\":first-latter\"选择该标签的第一个字母\r\n\r\n使用\":first-line\"选择该标签的第一行\r\n\r\n## 按状态选择链接标签\r\n\r\n- a:link 选择未被激活的链接\r\n- a:visited 选择已经访问过的链接\r\n- a:foucus 选择使用键盘选择且拥有焦点的链接\r\n- a:hover 选择光标下的链接\r\n- a:active 选择激活但页面未跳转时的链接\r\n由于晚出现的规则会影响覆盖前面的，所以应该按上面列表的顺序（LVFHA或LVHFA）来定义规则\r\n\r\n## 按属性选择标签\r\n\r\n- [attr] 匹配指定标签\r\n- [attr=\"value\"] 完全匹配指定属性值\r\n- [attr~=\"value\"] 属性值是以空格分割的多个单词，其中有一个完全匹配指定值\r\n- [attr|=\"value\"] 属性值值以value-开头\r\n- [attr^=\"value\"] 属性值以value开头，value为完整的单词或者一部分\r\n- [attr$=\"value\"] 属性值以value结尾，value为完整的单词或者一部分\r\n- [attr*=\"value\"] 属性值为指定值的子字符串\r\n\r\n## 标签组选择器\r\n\r\n即将相同的样式运用到多个选择器，选择器之间用逗号隔开\r\n\r\n## 组合\r\n\r\n各种选择器可以相互组合，但注意以简单为主', 'normal', 584, b'0', b'1'),
(30, '第10章 为文本添加样式', 1519898912, 1519898912, 1018, '## 设置字体系列\r\n\r\n属性：font-family\r\n\r\n值：font-name1, font-name2, ..., font-namen\r\n\r\nn>=1, font-name是字体名称，若浏览器无font-name1则使用font-name2，若无font-name2则使用font-name3，依次类推，若所有的都不存在使用默认字体。\r\n\r\n继承的\r\n\r\n## 设置斜体\r\n\r\n属性：font-style\r\n\r\n值：italic(常用)、oblique、 normal(取消斜体)\r\n\r\n继承的\r\n\r\n## 设置粗体\r\n\r\n属性：font-weight\r\n\r\n值：bold(一般粗，常用)、bolder(较粗)、lighter(较细)、normal(取消粗体)\r\n\r\n继承的\r\n\r\n## 设置字体大小\r\n\r\n属性：font-size\r\n\r\n值：em(使用父元素相对值,常用)、rem(使用根元素相对值)、%(使用百分比)、px(使用像素)、预定义关键字(略)\r\n\r\n继承的\r\n\r\n## 设置行高\r\n\r\n属性：line-height\r\n\r\n值：n(数值,无单位,常用)、em、%、px\r\n\r\n继承的, 使用数值n继承其倍数，而其他的只会继承计算的结果\r\n\r\n## 同时设置所有字体值\r\n\r\n属性：font\r\n\r\n值：字体类型\r\n\r\n继承的\r\n\r\n## 设置颜色\r\n\r\n属性：color\r\n\r\n值：颜色名、十六进制、rgb格式、rgba格式、hsl格式、hsla格式\r\n\r\n可继承\r\n\r\n## 设置文本背景颜色\r\n\r\n属性：background-color\r\n\r\n值：颜色名称、十六进制、rgb格式、rgba格式、hsl格式、hsla格式\r\n\r\n## 设置背景图像\r\n\r\n属性：background-image\r\n\r\n值：url(图像的URL地址) 或 none(取消背景)\r\n\r\n图像默认会在水平和竖直两个方向不断重复从而填充整个区域。\r\n\r\n## 设置背景图像的重复方式\r\n\r\n属性：background-repeat\r\n\r\n值：repeat(水平和竖直重复, 默认值)、repeat-x(水平)、repeat-y(竖直重复)、no-repeat(不重复)\r\n\r\n## 设置背景图像是否滚动\r\n\r\n属性：background-attachment\r\n\r\n值：fixed(固定)、scroll(滚动, 默认值)\r\n\r\n## 设置背景图像的位置\r\n\r\n属性：background-postion: x y\r\n\r\nx值：left(左对齐)、center(居中)、right(右对齐)、px\r\n\r\nx值：top(顶端对齐)、center(居中)、bottom(底端对齐)、px\r\n\r\n默认为0 0, x、y值可以为负数\r\n\r\n## 同时背景属性(推荐使用)\r\n\r\n可以在一个属性中使用上面那些属性值(设置背景文本颜色到设置背景图像位置)，多个之间空格隔开，顺序没有要求\r\n\r\n## 设置单词间距\r\n\r\n属性：word-spacing\r\n\r\n值：em、px、normal(默认值)\r\n\r\n继承的\r\n\r\n## 设置字间距\r\n\r\n属性：letter-spacing\r\n\r\n值：em、px、normal(默认值)\r\n\r\n继承的\r\n\r\n## 设置缩进\r\n\r\n属性：text-indent\r\n\r\n值：em、px、%\r\n\r\n某些元素不能使用此属性，但可以添加display:block或inline;强制使用\r\n\r\n继承的, 使用em或%只会继承计算出来的值\r\n\r\n## 设置文本对齐\r\n\r\n属性：text-align\r\n\r\n值：left(左对齐, 默认值)、right(右对齐)、center(居中)、justify(两端对齐)\r\n\r\n继承的\r\n\r\n## 设置文本大小写\r\n\r\n属性：text-transform\r\n\r\n值：capitalize(单词首字母大写)、uppercase(全大写)、lowercase(全小写)、none(取消设置)\r\n\r\n继承的\r\n\r\n## 设置小型大写字母\r\n\r\n属性：font-variant\r\n\r\n值：small-caps、none(取消设置)\r\n\r\n继承的\r\n\r\n## 文本装饰\r\n\r\n属性：text-decoration\r\n\r\n值：underline(下划线)、overline(上划线)、line-through(删除线)、none(取消设置)\r\n\r\n常用于链接a标签, 可以使用此属性来取消a、ins、del的样式\r\n\r\n继承的\r\n\r\n## 设置空白格式\r\n\r\n属性：white-space\r\n\r\n值：pre(显示空格和换行)、nowrap(不断行)、normal(取消设置)\r\n\r\n继承的', 'normal', 536, b'0', b'1'),
(31, '第11章 用CSS进行布局', 1519899318, 1519899318, 1018, '## 盒模型\r\n\r\ncss处理元素时，认为每个元素在一个不可见的盒子中，这个盒子由内容区域、内边距(padding)、边框(border)、外边距(margin)组成\r\n\r\n默认情况下，css元素的 width=内容区域宽度, height同\r\n\r\n可以设置：`box-sizing: border-box;` 从而使css元素的 width=内容区域宽度+内边距宽度+边框宽度, height同\r\n\r\n下面的两个盒子的各属性都相同，不同的是显示方式\r\n\r\n## 默认盒子\r\n\r\n超文本标记语言，标准通用标记语言下的一个应用。\r\n\r\n设置`box-sizing: border-box;`\r\n\r\n超文本标记语言，标准通用标记语言下的一个应用。\r\n\r\n## 控制元素的显示类型和可见性\r\n\r\n元素两种显示类型，一种是块级元素，一种是行内元素。块级元素会单独取行，行内元素不会，块级元素可以设置盒子的各个属性，而行内元素不行。另外两者混合的行内块元素也可以使用这些属性。\r\n\r\n指定元素的显示方式\r\n属性：display\r\n\r\n值：block(块显示)、inline(行内显示)、inline-block(行内块显示)、none(隐藏, 不留空白)\r\n\r\n控制元素的可见性\r\n属性：visbility\r\n\r\n值：hidden(隐藏, 留空白)、visible(显示)\r\n\r\n## 设置元素宽度和高度\r\n\r\n属性：width, height\r\n\r\n值：px、em、rem、%、auto(自动计算，默认值)\r\n\r\n设置内边距\r\n\r\n属性：padding\r\n\r\n值：px、em、rem、%\r\n\r\n一个值：用于四边，即四边内距相同；\r\n两个值：前一个值用于上下边，后一个值用于左右边；\r\n三个值：第一个用于上边，第二个左右边，第三个下边；\r\n四个值：按顺时针方向分别用于上、右、下、左\r\n还可以使用padding-top、padding-right、padding-bottom、padding-left单独为四边设置\r\n\r\n## 设置边框\r\n\r\n设置边框风格\r\n属性：border-sytle\r\n\r\n值：none(无, 默认值)、dotted(点线)、dashed(虚线)、solid(实线)、double(双线)、groove(槽线)、ridge(脊线)、inset(凹边)、outset(凸边)\r\n\r\n## 设置边框宽度\r\n属性：border-width\r\n\r\n值：长度值\r\n\r\n## 设置边框颜色\r\n属性：border-color\r\n\r\n值：颜色名、十六进制值、rgb、rgba、hsl、hsla、\r\n\r\n同时设置\r\n输入border\r\n如果需要，输入-top、-bottom、-left、-right，只设置某一边框\r\n如果需要，输入-style、-width、-color，只设置边框的单个属性\r\n输入冒号\r\n若没有设置了3，则可以同时依次设置宽度、风格、颜色；若设置了3，则只能设置相对应的值\r\nborder-width、border-style、border-color都可以接受一到四个值，规则同设置内边距。\r\n\r\n## 设置外边距\r\n\r\n属性：margin\r\n\r\n值：px、em、rem、%、auto\r\n\r\n可以接受一到四个值，规则同设置内边距。\r\n\r\n可以使用margin-top、margin-right、margin-bottom、margin-left设置某一边外边距。\r\n\r\nps:当em值用于内边距和外边距时，值是相对于元素的字体大小的，而不是相对于父元素的大小。\r\n\r\n## 控制元素浮动\r\n\r\n1. 设置浮动\r\n属性：float\r\n值：left、right\r\n\r\n2. 清除浮动\r\n属性：clear\r\n值：left、right、both、none\r\n\r\n注意设置浮动会让元素脱离文档流。\r\n\r\n## 定位元素\r\n\r\n使用position属性定位元素，取值有：\r\n\r\n- static：默认属性。以文档流方式显示元素，不能使用top、left、bottom、right`属性进行定位。\r\n- absolute：相对于最近设置过非 `position: static;` 的祖先元素，若这样的祖先元素不存在，则相对于文档进行定位。\r\n- relative：相对以文档流方式显示的位置进行定位，元素未脱离文档流，原位置会被保留。\r\n- fixed：相对于浏览器窗口进行定位，位置固定，不会随着文档滚动。\r\n设置非static的元素使用top、left、bottom、right属性进行定位, 可以通过设置static恢复默认位置。\r\n\r\n可以通过top和bottom属性设置元素的高度、left和right属性设置元素的宽度。\r\n\r\n## 第三维定位元素\r\n\r\n属性：z-index\r\n\r\n值：默认值为0，可以是正或负的整数, 值越大，元素在堆中越高, 此属性只对定位过的元素起作用。\r\n\r\n注意此属性只能对同一个容器下的元素使用。\r\n\r\n## 垂直对齐元素\r\n\r\n属性：vertical-align\r\n\r\n值：baseline(对齐父元素的基准线)、middle(在父元素中央)、sub(父元素下标)、super(父元素上标)、text-top(对齐父元素顶部)、text-bottom(对齐父元素底部)、top(对齐该行最高元素)、bottom(对齐该行最低低素)、%(行高的百分比)、n(值, px或em，下移n)\r\n\r\n\r\n\r\n## 设置鼠标指针\r\n\r\n属性：cursor\r\n\r\n值:\r\n1.  手指\r\n2. default 默认(箭头)\r\n3. crosshair 十字\r\n4. move 移动状态\r\n5. wait 等待状态\r\n6. help 帮助\r\n7. text 文字\r\n8. progress 进程\r\n9. auto 自动\r\n10. x-resize 双向箭头, x是其中一个箭头方向，如e(东)、s(南)、w(西)、n(北)、还可以两个组合：nw等', 'normal', 535, b'0', b'1'),
(32, '第12章 构建响应式网站', 1519899375, 1519899375, 1018, '## 概述\r\n\r\n所谓响应式网站就是：可以根据用户浏览器窗口大小自动调节布局的网站。自动适应不同的终端设备。\r\n\r\n## 创建可伸缩元素\r\n\r\n对元素使用 max-width: n\r\n\r\nn值可以是%(相对于父元素的百分比), em, px等，表示图像的最大宽度是n', 'normal', 532, b'0', b'1'),
(33, '第13章 使用web字体', 1519899413, 1519899413, 1018, '(本章跳过了)', 'normal', 657, b'0', b'1'),
(34, '第14章 使用CSS进行增强', 1519899600, 1519899600, 1018, '## 为元素创建圆角\r\n\r\n- 创建四个相同的圆角：\r\n这步可选，输入：-webkit-border-radius: r; ，r是圆角半径。\r\n输入：border-radius: r; r和第一步值相同\r\n(将鼠标放在图形上可以查看属性，下面的都可以)\r\n\r\n- 创建一个圆角：\r\n这步可选，输入：-webkit-border-x-y-radius: r; x和y为方位，可以取top、bottom、left、right\r\n输入：border-x-y-radius: r; r和第一步值相同\r\n重复使用上面属性即可创建多个圆角。\r\n\r\n- 创建椭圆圆角：\r\n这步可选，输入：-webkit-border-radius: x/y; x是水平方向的半径，y是竖直方向的半径\r\n输入：border-radius: x/y; xy和第一步值相同\r\n重复使用上面属性即可创建多个椭圆圆角。\r\n\r\n- 创建圆形：\r\n这步可选，输入：-webkit-border-radius: r; r取元素高度的一半，一半用百分比为单位(50%)\r\n输入：border-radius: r; r和第一步值相同\r\n\r\n## 为元素添加阴影\r\n\r\n输入-webkit-box-shadow: x-offset(水平偏移) y-offset(竖直偏移) blur-radius(模糊半径) spread() color(颜色);\r\n输入box-shadow::值同第一步\r\n添加内阴影：\r\n输入-webkit-box-shadow: x-offset(水平偏移) y-offset(竖直偏移) blur-radius(模糊半径) spread() color(颜色) inset;\r\n输入box-shadow:值同第一步\r\n\r\n## 添加多重阴影：\r\n输入-webkit-box-shadow: x-offset(水平偏移) y-offset(竖直偏移) blur-radius(模糊半径) spread() color(颜色) (inset);\r\n输入逗号，重复第一步的各个值\r\n输入box-shadow:值同第一、二步\r\n\r\n取消阴影：输入-webkit-box-shadow: none; 和 box-shadow: none;\r\n\r\n## 使用多重背景\r\n\r\n输入background: 属性，为元素添加备用背景\r\n输入background: 属性1，属性2, .. , 属性n; 为元素添加多重背景\r\n这里的属性是用空格隔开的属性值表\r\n\r\n## 使用渐变背景\r\n\r\n创建备用颜色， 同上\r\n\r\n## 定义线性渐变\r\n\r\n输入background: linear-gradient(to x, color-1 loc-1, color-2 loc-2, ..., color-n loc-n); (n>=2), loc可以省略, 浏览器自动指定\r\n\r\n## 定义径向渐变\r\n\r\n输入background: radial-gradient(circle或ellip或跳过(跳过则需指定size), size(可以跳过，默认最远角), pos(渐变中心位置, 可以是 at d(方位) 或 at x y), color-1 loc-1, color-2 loc-2, ..., color-n loc-n); (n>=2), loc可以省略, 浏览器自动指定\r\n\r\n可以定义多重渐变，每个定义之间用逗号隔开\r\n\r\n## 修改元素的不透明度\r\n\r\n格式：opacity: a(不透明程度，0-1);\r\n\r\n## 生成内容\r\n\r\n使用:before和:after可以为元素添加效果。\r\n\r\n## 阅读更多\r\n\r\n使用拼合图像\r\n\r\n将多个尺寸相同的图像拼合为一个图像文件，使用的时候根据 background-position 进行定位即可。', 'normal', 402, b'0', b'1'),
(35, '第15章 列表', 1519899716, 1519899716, 1018, '## 创建列表\r\n使用ol标签创建有序列表、ul标签创建无序列表\r\n使用li标签创建列表项\r\n\r\n## 选择标记\r\n使用list-style-type为列表设置左侧的标记\r\n值：disc(实心圆点) 、circle(空心圆圈)、square(方块)、decimal(数字)、upper-alpha(大写字母)、lower-alpha(小写字母)、upper-roman(大写罗马数字)、lower-roman(小写罗马字母)\r\nnone(无标记)\r\n继承的\r\n\r\n## 使用图像作为标记\r\n先对列表标签(ul、ol)使用使用list-style :none; 取消列表标记\r\n对li标签使用background: url(图像url) repeat-type(设为no-repeat) horizontal vertical; 为列表项添加标记\r\n对li标签使用padding-left对文本增加左内距\r\nlist-style-position: inside(列表项内) 、outside(列表项外, 默认值);\r\n继承的\r\n\r\n## 同时设置所有列表样式\r\nlist-style: type(标记类型, 默认为disc) position(标记位置, 默认outside) image(背景, 默认none);\r\n三个属性顺序任意，可以只指定一个或二个\r\n继承的\r\n\r\n## 设置列表的起始编号\r\n对列表ol标签使用start=n;属性, 设置列表的起始编号\r\n对列表项标签使用value=n;属性, 设置列表项的编号, 其后面的编号也会重编\r\n\r\n## 描述列表\r\n使用dl标签创建描述用于描述术语列表\r\n使用dt标签创建术语\r\n使用dd标签创建术语描述\r\n每个列表都包含在dl中，其中每个名-值都有一个或多个dt元素以及一个或多个dd元素。\r\n', 'normal', 487, b'0', b'1'),
(36, '第16章 表单', 1519899993, 1519899993, 1018, '表单的起源比js还要早，功能也已经很完善了，兼容性也很好。通过表单，网站管理员可以和用户进行交互。\r\n\r\n## 创建表单\r\n\r\n使用form标签创建表单，并设置method和action属性\r\n\r\nmethod属性值post或get，post用于向服务器提交数据，get会向服务器提交并将返回的数据显示在浏览器地址栏\r\n\r\naction属性是表单提交后服务器上用于处理的脚本的url\r\n\r\n如：<form method=\"post\" action=\"same.php\">...</form> 这个表单使用post方式上传数据，服务器上用于处理的脚本为save.php\r\n\r\n## 组织表单元素\r\n\r\n使用fieldset标签将表单中相关的元素包含为一个组，使之更容易组织和理解。\r\n\r\n还可以在fieldset标签中使用legend标签添加标题(会显示在浏览器)，用于描述每个组的目的。\r\n\r\nfieldset默认会显一个边框线，legend会显示在边框左上角\r\n\r\n## 创建输入框\r\n\r\n使用input标签并将type属性值设为text创建输入框\r\n\r\n输入框有如下属性可以使用\r\n\r\n提交到服务器的识别标志：name=\"dataname\"\r\n与label进行关联：将laber标签的for值与input标签的id值设置相同即可\r\n(可选)输入框初始文本：value=\"default\"\r\n(可选)提示文本：placeholder\r\n(可选)非空不能提交：required=\"required\"\r\n(可选)自动获得焦点：autofocus或autofocus=\"autofocus\"\r\n(可选)文本大小：size=\"n\", n为字符个数(默认为20)\r\n(可选)输入限制：maxlength=\"n\", n为允许输入的最多字符个数\r\n(可选)关闭自动完成：autocomplete=\"off\"(此属性可运用于整个form标签)\r\n注意：input标签无结束标签\r\n\r\n## 创建说明标签\r\n\r\n使用label创建说明标签\r\n\r\n使用for属性可以关联相关的表单字段，使之点击label时关联的字段会获取焦点(试试点击上面的文本框前面的文本)。\r\n\r\n关联方法：将for值设为要关联字段元素的id\r\n\r\n## 创建密码框\r\n\r\n使用input标签并将type属性值设为password创建输入框\r\n\r\n其属性和输入框相同\r\n\r\n## 创建电子邮件框\r\n\r\n使用input标签并将type属性值设为email创建电子邮件框\r\n\r\n其属性和输入框相同\r\n\r\n浏览器会自动验证邮箱的有效性（格式）\r\n\r\n## 创建搜索框\r\n\r\n使用input标签并将type属性值设为search创建搜索框\r\n\r\n其属性和输入框相同\r\n\r\n### 创建电话框\r\n\r\n使用input标签并将type属性值设为tel创建电话框\r\n\r\n其属性和输入框相同\r\n\r\n## 创建URL框\r\n\r\n使用input标签并将type属性值设为url创建url框\r\n\r\n其属性和输入框相同\r\n\r\n## 创建单选按钮\r\n\r\n使用input标签并将type属性值设为radio创建电话框\r\n\r\n设置好如下属性：\r\n\r\nname=\"radioset\" 同上面一样，name是用来设置识别数据的, 同一组的name应该设为相同\r\nid=\"label-id\" id值应该和相关联的label的for值一样\r\nvalue=\"data\" 按钮被选中时发送到服务器的文本\r\nchecked或checked=\"checked\" 一组按钮中默认被选中的\r\n最后创建label文本用于识别该按钮\r\n\r\n## 创建复选框\r\n\r\n使用input标签并将type属性值设为checkbox创建电话框\r\n\r\n属性设置和单选框相同\r\n\r\n\r\n## 创建文本区域\r\n\r\n使用textarea标签创建文本区域\r\n设置好如下属性：\r\n\r\nid=\"label-id\" id值应该和相关联的label的for值一样\r\nname=\"radioset\" 同上面一样，name是用来设置识别数据的\r\ncols=\"n\" 文本区域的宽度，单位是字符\r\nrows=\"n\" 文本区域的高度，单位是字符\r\n开始标签和结束标签之间的内容即是初始文本内容\r\n(可选)maxlength=\"n\" 可输入最大的字符数\r\n\r\n\r\n## 创建选择框\r\n\r\n使用select标签创建选择框\r\n\r\n设置好如下属性：\r\n\r\nid=\"label-id\" id值应该和相关联的label的for值一样\r\nname=\"radioset\" 同上面一样，name是用来设置识别数据的\r\n(可选)size=\"n\" 选择框高度，单位为行\r\n使用option标签创建选择框选项，并设置好如下属性：\r\n\r\nvalue=\"option-value\" 值会发送到服务器\r\n(可选)selected=\"selected\" 设置此选项为默认选中\r\n使用optgroup标签对选项进行分组，只要将标签包含要分组的option标签即可，并且可以使用label属性添加分组说明\r\n\r\n例子 你最喜欢的运动？  \r\n\r\n## 创建文件上传\r\n\r\n使用input标签并将type属性值设为file创建文件选择按钮\r\n\r\n设置好如下属性：\r\n\r\nid=\"label-id\" id值应该和相关联的label的for值一样\r\nname=\"dataname\" 同上面一样，name是用来设置识别数据的\r\n(可选)size=\"n\" 文件全路径长度\r\n(可选)multiple或multiple=\"multiple\" 设置可以上传多个文件\r\n例子 选择文件: 选择文件\r\n\r\n## 创建隐藏字段\r\n\r\n使用input标签并将type属性值设为hidden创建隐藏字段(隐藏字段不会显示在浏览器中)\r\n\r\n设置好如下属性：\r\n\r\nname=\"dataname\" 同上面一样，name是用来设置识别数据的\r\nvalue=\"data\" 要提交的信息本身\r\n创建提交按钮\r\n\r\n使用input标签并将type属性值设为submit创建提交按钮\r\n\r\n使用value值设置显示在按钮上的文本\r\n\r\n## 使用图像作为提交按钮：\r\n\r\n<input type=\"image\" src=\"image.url\" alt=\"description\"/>\r\n\r\n例子  description\r\n\r\n## 使用图像和文本作为提交按钮：\r\n\r\n使用button标签将type属性设为submit，并包围使用img标签和文字即可\r\n\r\n禁用表单元素\r\n\r\n对要禁用的元素使用disabled属性即可，之后可以通过js将表单元素改为可用。\r\n\r\n## 根据状态设置样式\r\n\r\n使用伪类选择\r\n\r\n- :focus 获得焦点的字段\r\n- :checked 选中的单选按钮或者复选框\r\n- :disabled 禁用的字段\r\n- :enable 可用的字段\r\n- :required yourequired的字段\r\n- :option 和required相反\r\n- :invalid 值与pattern不匹配的字段\r\n- :valid 与invalid相反', 'normal', 505, b'0', b'1'),
(37, '第17章 视频、音频和其他多媒体', 1519900524, 1519900524, 1018, '## 添加视频\r\n格式：\r\n```\r\n<video src=\"video-url\"></video>\r\n```\r\n\r\nvideo属性\r\n- src 指定视频文件的URL\r\n- autoplay	设置视频自动播放\r\n- controls	添加浏览器的默认控件\r\n- muted	静音\r\n- loop	循环播放\r\n- poster	指定视频播放前的图像（海报），用URL指定图像文件\r\n- width	视频窗口的宽度\r\n- height	视频窗口的高度\r\n- preload	预加载视频，值：\r\n- none 不预加载\r\n- metadata 仅加载视频的元数据（长度、尺寸等基本信息）\r\n- auto 由浏览器决定（默认值）\r\n\r\n## 设置视频自动播放\r\n设置自动播放：\r\n```\r\n<video src=\"video-url\" autoplay controls></video>\r\n```\r\n\r\n## 为视频添加控件\r\n添加控件：\r\n```\r\n<video src=\"video-url\" controls></video>\r\n```\r\n\r\n\r\n## 设置视频循环播放\r\n添加控件：\r\n```\r\n<video src=\"video-url\" loop controls></video>\r\n```\r\n\r\n## 设置视频海报\r\n添加控件：\r\n```\r\n<video src=\"video-url\" poster=\"img-url\" controls></video>\r\n```\r\n\r\n## 添加音频\r\n格式：\r\n```\r\n<audio src=\"audio-url\"></audio>\r\n```\r\naudio属性：\r\n- src	指定视频文件的URL\r\n- autoplay	设置自动播放\r\n- controls	显示浏览器的默认控件, 若不设置此属性则不显示窗口，可以用来添加背景音乐\r\n- muted	静音\r\n- loop	循环播放\r\n- poster	指定视频播放前的图像（海报），用URL指定图像文件\r\n- preload	预加载视频，值：\r\n- none 不预加载\r\n- metadata 仅加载视频的元数据（长度、尺寸等基本信息）\r\n- auto 由浏览器决定（默认值）\r\n这些属性使用和视频相同，所以下面就不介绍了\r\n\r\n\r\n## 设置备用视频和音频\r\n在video标签或audio中使用多个source标签来添加多个备用视频或音频，浏览器会加载第一个它支持的视频或音频\r\n\r\n格式:\r\n```\r\n<source src=\"video-url\" ></source>\r\n```\r\n\r\nsource属性：\r\n- src	指定视频文件的URL\r\n- type	指定视频文件的类型，对于视频的值有：video/mp4、video/webm、video/ogg\r\n- 对于音频的值有：audio/mp4、audio/webm、audio/ogg\r\n- media	指定视频来源的css媒体查询, 从而适应不同的终端', 'normal', 501, b'0', b'1'),
(38, '第18章 表格', 1519900599, 1519900599, 1018, '## 创建表格\r\n\r\ntable标签：创建表格\r\n\r\ncaption标签：添加表格标题\r\n\r\ntr标签：包含表格一行元素\r\n\r\nth标签：添加表格项标题(被包含在tr中)\r\n\r\ntd标签：添加表格项(被包含在tr中)\r\n\r\n可以使用thead包含表头、tbody包含表格主体、tfoot包含表尾\r\n\r\n可以对th使用scope=\"col\"属性为一组列添加标题，使用scope=\"row\"属性为一组行添加标题\r\n\r\n## 设置表格跨越多行或多列\r\n\r\n对th或td使用colspan=\"n\"跨越多列，n是列数\r\n\r\n对th或td使用rowspan=\"n\"跨越多行，n是行数', 'normal', 624, b'0', b'1'),
(39, '第19章 添加JavaScript', 1519900797, 1519900797, 1018, '## 加载JavaScript脚本\r\n\r\n加载JavaScript脚本的方式和css一样有三种方式：\r\n\r\n1. 加载外部脚本(推荐使用)：\r\n格式：\r\n```javascript\r\n<script src=\"script.js\"></script> \r\n```\r\n加载外部脚本，其中script.js是js脚本的路径\r\n\r\n2. 添加嵌入脚本：\r\n格式：\r\n```javascript\r\n<script>\r\n/*这里写脚本代码*/\r\n</script>\r\n```\r\n\r\n3. 添加内联脚本(少用)\r\n```javascript\r\n<a onclick=\"submit();\">提交</a>\r\n```\r\n\r\n## 加快js脚本的加载\r\n\r\njs脚本的加载会影响后面页面的解析(阻塞)，因此最好把js脚本的加载放在body标签结束之前\r\n\r\n为了加快js脚本的加载，可以对原js文本进行缩进，删除多余的空格和换行(可以使用软件)。并将添加.min.js后缀', 'normal', 546, b'0', b'1'),
(40, '第20章 测试和调试网页', 1519900881, 1519900881, 1018, '## 验证代码\r\n\r\n验证器可以对html和css代码进行检查并显示错误。\r\n\r\n验证器：\r\n- http://validator.w3.org/\r\n- http://html5.validator.nu/\r\n\r\n## 测试页面\r\n\r\n- 对代码进行验证\r\n- 检查页面的显示效果：如图像是否显示、URL链接是否正确、是否支持响应式等。\r\n- 检查资源文件是否存在，对其的url引用是否正确。\r\n- 在不同的浏览器中查看效果\r\n\r\n## 调试技巧\r\n\r\n- 使用开发者工具进行临时修改\r\n- 对盒子添加边框显示，查看盒子的情况。\r\n- 在css中使用注释屏蔽临时不需要的样式。', 'normal', 559, b'0', b'1'),
(41, '第21章 发布网站', 1519901005, 1519901005, 1018, '\r\n## 获得域名\r\n\r\n域名：指向服务器的IP地址，便于用户记忆和沟通。一个域名只能对应一个IP，而一个IP可以对应多个域名。\r\n\r\n域名注册：在域名注册商购买一个域名用来作为网站的名字。\r\n\r\n[万网：域名注册、查询](https://wanwang.aliyun.com/domain/?spm=5176.8006371.1007.dnetcndomain.jgogQ8 \"万网：域名注册、查询\")\r\n\r\n## 获得主机\r\n\r\n虚拟主机：指在网络服务器上分出一定的磁盘空间，用户可以租用此部分空间，以供用户放置站点及应用组件，提供必要的数据存放和传输功能。\r\n\r\n[购买万网云虚拟主机 ](https://wanwang.aliyun.com/hosting/?spm=5176.8142029.418687.18.ZwRhza \"购买万网云虚拟主机 \")\r\n[购买百度云虚拟主机](https://cloud.baidu.com/product/bch.html)\r\n\r\n域名解析：把域名指向网站服务器空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。一般域名注册商会提供解析服务。\r\n\r\n## 网站备案\r\n\r\n在中国大陆地区所实行的网站信息发布和经营许可制度。\r\n\r\nICP备案分两种，一种是经营性备案，一种是非经营性备案。 通常所说的ICP备案多指非经营性备案，需由网站主办者报备其详细信息（包括网站主办者信息、网站域名信息和网站接入服务商信息） 并获得工信部下发的ICP备案许可证编号方可准许在中国大陆进行网站发布运营。\r\n\r\n[备案的详细说明](https://cloud.baidu.com/doc/BeiAn/ICP-ABC.html#.E5.A4.87.E6.A1.88.E5.BF.85.E8.AF.BB \"备案的详细说明\")\r\n\r\n## 将文件上传到服务器\r\n\r\n将文件上传到服务器后，别人才能通过你的网址来访问你的网站。\r\n\r\n一般使用软件来进行上传，这样的软件叫FTP客户端，一般使用FileZilla。\r\n\r\nFTP协议： FTP是File Transfer Protocol（文件传输协议）的英文简称。用于Internet上的控制文件的双向传输。', 'normal', 465, b'0', b'1'),
(42, '《正则表达式必知必会》笔记', 1519902330, 1556116909, 1000, '正则表达式(regular expression)用来匹配和处理文本的规则字符串。\r\n它主要有两个功能：匹配和替换文本。\r\n\r\nJs正则表达式在线测试：\r\nhttp://www.luoluolzb.cn/product/regexp\r\n\r\n## 匹配单个字符\r\n| 符号       | 功能   |\r\n| :--------:   | :-----  |\r\n| \\     | 对元字符进行转义，使之匹配原字符   |\r\n| .     | 匹配任意一个字符   |\r\n| []    | 定义字符集，匹配结果可以是方括号中的任意字符。如[a-z]、[A-Z]、[0-9]。使用^可以对字符集取反如[^a-z]匹配非小写字母的其他字符 |\r\n\r\n## 重复匹配\r\n| 符号  | 功能  |\r\n| :-----------: | ------------ |\r\n| \\* | 前一个字符(集)重复>=0次  |\r\n| +  | 前一个字符(集)重复>=1次  |\r\n| ?  | 前一个字符(集)重复0次或1次 |\r\n|{n} | 前一个字符(集)重复n次 |\r\n| {s,n} | 前一个字符(集)重复s~n（包含s和n）次 |\r\n| {s,} | 前一个字符(集)重复>=s次 |\r\n贪婪型字符：\\*、+、{n,} 会尽可能的匹配多的字符\r\n它们懒惰型版本（后面加个?）：\\*?、+?、{n,}? 可以让他们碰到第一个匹配时停止\r\n\r\n## 位置匹配\r\n| 符号 | 功能 |\r\n| :---: | ---- |\r\n| \\b | 匹配单词的开始或结尾 |\r\n| \\B | 不匹配单词的开始或结尾 |\r\n| ^ | 匹配整个字符串开头，多行模式下匹配行首 |\r\n| $ | 匹配整个字符串结尾，多行模式下匹配行尾 |\r\n| (?m) | 放在模式的最前面，将每行当做一个字符串来处理。用来配合^和$使用 |\r\n\r\n## 子表达式\r\n\r\n| 符号 | 功能 |\r\n| :---: | ---- |\r\n| () | 用来包含子模式，构成一个整体 |\r\n| a｜b | 匹配a或b，a和b可以是子模式，可以多个连用 |\r\n\r\n## 回溯引用和查找\r\n\r\n| 符号 | 功能 |\r\n| :---: | ---- |\r\n| \\n | 引用模式中的第n个子模式 |\r\n| ?=pattern | 正向前匹配：必须匹配pattern但不在结果中返回 |\r\n| ?!pattern | 负向前匹配：不匹配pattern的内容但不在结果中返回 |\r\n| ?<=pattern | 正向后查找：必须匹配pattern但不在结果中返回 |\r\n| ?<!pattern | 负向后查找：必须匹配pattern但不在结果中返回 |\r\n注意：js不支持前后查找和负向后查找\r\n\r\n## 嵌入条件\r\n\r\n| 符号 | 功能 |\r\n| :--- | :---- |\r\n| (?(condition)yes-pattern｜no-pattern) | condition匹配到则执行yes-pattern, 否则执行no-pattern, no-pattern可以不写。 |\r\n注意：js正则不支持嵌入条件\r\n\r\n\r\n## 常用转义字符\r\n\r\n| 符号 | 功能 |\r\n| :---: | ---- |\r\n| \\f | 换行页 |\r\n| \\n | 换行符 |\r\n| \\r | 回车符 |\r\n| \\t | 制表符 |\r\n| \\v |垂直制表符\r\n| \\d | 数字字符，[0-9] |\r\n| \\D | 非数字字符，相当于[^0-9] |\r\n| \\w | 字母和数字字符或下划线，相当于[a-zA-Z0-9_] |\r\n| \\W | 非字母和数字字符或下划线，相当于[^a-zA-Z0-9_] |\r\n| \\s | 空白字符，相当于[\\f\\n\\r\\t\\v] |\r\n| \\S | 非空白字符，相当于[^\\f\\n\\r\\t\\v] |\r\n| \\xxx | 八进制字符 |\r\n| \\xdd | 十六直接字符 |\r\n| \\uxxxx | 十六进制Unicode字符 |\r\n\r\n## 常用正则表达式\r\n\r\n- IP地址：\r\n```\r\n(((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\.){3}((\\d{1,2})|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\r\n```\r\n组成：四个0-255的数字组成用三个`.`隔开\r\n\r\n- URL地址：\r\n```\r\nhttps?://[-\\w.]+(:\\d+)?(/([\\w/_.]*)?)?\r\n```\r\n组成：协议名、主机名、端口号、文件路径\r\n\r\n- 邮箱地址：\r\n```\r\n(\\w+\\.)*\\w+@(\\w+\\.)+[A-Za-z]+\r\n```\r\n\r\n- HTML注释：\r\n```\r\n<-{2,}.*?-{2,}>\r\n```', 'normal', 609, b'0', b'1'),
(43, '第1章 PHP概述', 1519903608, 1519903608, 1019, 'PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。\r\n\r\nPHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。\r\n\r\n## PHP代码标记方法\r\n\r\n一般有三种方法：\r\n- 默认：<?php code... ?>\r\n- 短标记(需在php.ini开启)：<? code... ?>\r\n- ASP风格(需在php.ini开启)：<% code... %>\r\n\r\n\r\n## 注释方法\r\n\r\n一般有三种方法：\r\n- 单行注释：// ...\r\n- 多行注释：/* ... */\r\n- shell风格, 单行注释：# ...\r\n\r\n## 输出函数\r\n\r\n- echo() 如 echo \'hello world!\'\r\n- print() 如 print \'luoluo\'\r\n- var_dump(): 输出变量类型和值\r\n注意：PHP函数名不区分大小写, 变量和类名区分大小写\r\n\r\n## 变量\r\n\r\nPHP有8种变量类型：\r\n\r\n四种标量类型：布尔型、整型、浮点型、字符串型\r\n两种非标量类型：数组、对象\r\n两种特殊类型：资源类型和NULL\r\n变量不需要声明, 变量类型可以自由转换(强制转换或settype())\r\n\r\n获取变量类型的方法：gettype()\r\n\r\n## 变量命名规则\r\n\r\n用美元符号$开头\r\n只能包含数字、字母、下划线\r\n$后面的第一个字符不能是数字\r\n\r\n## 变量作用域\r\n\r\n全局变量：在函数外定义的变量\r\n局部变量：在函数内定义的变量\r\n静态变量：在函数内使用static关键字声明变量，使变量不会被删除\r\n在函数内使用全局变量需使用global关键字声明\r\n\r\n定义全局变量的另一种方法：在$GLOBALS超全局数组中定义，如`$GLOBALS[\'pi\'] = 3.14;`\r\n\r\n## 字符串\r\n\r\n字符串是使用双引号或者单引号的一串字符。\r\n\r\n使用点号\'.\'连接字符串，如：`\'luoluo\'.\'lzb\'` 结果为：`\'luoluolzb\'`\r\n\r\n在字符串中使用引号可以使用转义字符，如`echo \'my\\\'s luoluo.\';`结果为：`my\'s luoluo.`\r\n\r\nstrlen()函数可以测量字符串长度\r\n\r\n## 常量\r\n\r\n定义方法：`define(\'NAME\', value);`\r\n```php\r\ndefine(\'PI\', 3.14);\r\n```\r\n\r\n常量名一般用大写\r\n\r\n## 引号\r\n引号用来包含文本数据\r\n- 单引号：内容不会被处理，结果和原来的一样\r\n- 双引号：内容会被处理，如双引号中的变量和转义字号会被处理', 'normal', 503, b'0', b'1'),
(44, '第2章 PHP编程', 1519904127, 1519904127, 1019, '## 逻辑值\r\n\r\nPHP中假值有：NULL、0、\"0\"、空串、FALSE， 其他所有值为真\r\nNULL类型表示变量没有值， 可以使用isset($var)判断\r\n\r\n## 数组\r\n\r\n索引数组：使用数字作为键\r\n关联数组：使用字符串作为键\r\n两种类型可以混合使用，元素的顺序和创建顺序相同\r\n\r\n创建方法：\r\n1. 直接创建并添加第一个元素：$arr[] = \'element0\';\r\n2. 直接创建并添加第一个元素：$arr[0] = \'element0\';\r\n3. array()函数创建并添加元素：$arr = array(\'a\' => \'abc\', \'b\' => \'bdf\', \'c\' => \'cds\');\r\n4. array()函数创建再添加元素：$arr = array(); $arr[0] = \'element0\';\r\n5. range()函数创建连续数字数组：$arr = range(1, 10);\r\n判断数组：is_array($arr), 获取数组长度: count($arr)\r\n\r\n## 数组遍历\r\n\r\n使用foreach语句：foreach($arr as $value) 或 foreach($arr as $key => $value)\r\n例子：\r\n```php\r\n$arr = array(\'ll\' => \'luoluo\', \'qq\' => \'qianqian\', \'a\' => \'abcd\', 456);\r\nforeach($arr as $key => $value){\r\n	echo \"{$arr[$key]} = {$value}<br/>\";\r\n}\r\n```\r\n超全局数组\r\n\r\n## php超全局数组：\r\n| 变量  | 说明  |\r\n| ------------ | ------------ |\r\n| $_POST  |  post方式传递的表单数据 |\r\n| $_GET  |  get方式传递的表单数据 |\r\n| $_COOKIE  | 客户端的cookie数据  |\r\n| $_REQUEST  | 包含以上三个数组数据  |\r\n| $_SERVER  | 服务器的一些数据和参数  |\r\n| $_ENV | 服务器端环境变量 |\r\n| $_SESSION | 客户端的session数据 |\r\n\r\n可以使用下面的代码输出超全局变量$_SERVER的内容：\r\n\r\n```php\r\nforeach ($_SERVER as $key => $value) {\r\n	echo \"{$_SERVER[$key]} = {$value}<br />\";\r\n}\r\n```\r\n\r\n## 数组和字符串互相转换\r\n\r\n数组转字符串：`$string = implode(glue, $arr);` 其中glue是分隔符\r\n字符串转数组：`$arr = explode(sep, $string);` 其中sep是分隔符\r\n\r\n## 数组排序\r\n\r\n排序函数（升序）\r\n- sort($arr): 按值排序，丢弃键\r\n- asort($arr): 按值排序，保留键-值关系\r\n- ksort($arr): 按键排序\r\n- shuff($arr): 随机排序\r\n\r\n降序版本：rsort(), arsort(), krsort()\r\n\r\n## 流程控制语句\r\n\r\nif-else、switch、while、do-while、for等语句语法同C语言，这里省略说明。', 'normal', 606, b'0', b'1'),
(45, '第3章 创建动态web站点', 1519904462, 1519904462, 1019, '## 文件包含\r\n\r\n四种方法：\r\n\r\n| 格式  | 说明  |\r\n| :------------ | ------------ |\r\n|  include(filename) | 报错后继续运行  |\r\n|  include_onece(filename) | 同上，但确保文件只包含一次  |\r\n| require(fileanme)  |  报错后停止运行 |\r\n| require_once(filename) | 同上，但确保文件只包含一次 |\r\n\r\n将通用的模块单独放在一文件，以后可以多次包含。\r\n\r\n文件路径可以使用绝对路径和相对路径。\r\n\r\n## 函数\r\n\r\n定义格式：\r\n\r\n```php\r\nfunction funName([$arg1, $arg2, ...]){\r\n	//some code\r\n	[return [value];]\r\n}\r\n```\r\n函数名不区分大小写，可以设置默认参数，方法同C++\r\n\r\n可以通过数组使函数返回多个值：\r\n```php\r\nreturn array($value1, $value2, ...);\r\n```\r\n\r\n依次将函数返回的数组元素值赋值给变量:\r\n```php\r\nlist($var1, $var2, ...) = fun_name(...);\r\n```\r\n\r\n## 黏性表单\r\n\r\n黏性表单是指页面可以记录用户填写的数据，当后台验证判断用户输入错误后，用户输入的之前的值能保留下来。\r\n', 'normal', 597, b'0', b'1'),
(46, '第4章 MySQL简介', 1519904736, 1519904736, 1019, '## 数据库结构\r\n\r\n一个数据库由若干张表组成，表由若干列组成。\r\n表的每一行称为一个记录。\r\n\r\n## 数据库元素命令\r\n\r\n命名规则：\r\n- 只能包含数字、字母、下划线\r\n- 不能使用数据库关键字\r\n- 作用域内唯一\r\n- 长度小于64位\r\n- 区分小大写\r\n\r\n这些规则可以用来命令数据库名、表名、列名。\r\n\r\n## 列类型\r\n\r\n数据库数据类型一般有三种：文本、数字、日期和时间\r\n\r\n### 文本类型\r\n\r\n| 类型 | 大小 | 描述 |\r\n| ---- | ---- | ---- |\r\n| CHAR[length] | length字节 | 定长字段，长度：0~2^8-1 |\r\n| VARCHAR[length] | string长度+1或+2字节 | 变长字段，长度：0~2^16-1 |\r\n| TINYTEXT | string长度+1字节 | 字符串，最大长度为2^8-1 |\r\n| TEXT | string长度+2字节 | 字符串，最大长度为2^16-1 |\r\n| MEDIUMTEXT | string长度+3字节 | 字符串，最大长度为2^24-1 |\r\n| LONGTEXT | string长度+4字节 | 字符串，最大长度为2^32-1 |\r\n\r\n### 数字类型\r\n| 类型 | 大小 | 描述 |\r\n| -----| ----- | ---- |\r\n| TINYINT[length] | 1字节 | 范围：-2^7~2^7-1或0~2^8-1 |\r\n| SMALLINT[length] | 2字节 | 范围：-2^15~2^15-1或0~2^16-1 |\r\n| MEDIUMINT[length] | 3字节 | 范围：-2^23~2^23-1或0~2^24-1 |\r\n| INT[length] | 4字节 | 范围：-2^31~2^31-1或0~2^32-1 | \r\n| BEGINT[length] | 8字节 | 范围：-2^63~2^63-1或0~2^64-1 |\r\n| FLOAT[length, decimals] | 4字节 | 浮点小数，范围较小 |\r\n| DOUBLE[length, decimals] | 8字节 | 浮点小数，范围较大 |\r\n| DECIMAL[length, decimals] | length+1或length+2字节 | 浮点小数，用字符串存储 |\r\n\r\n### 日期和时间类型\r\n| 类型 | 大小 | 描述 |\r\n| ---- | ----- | ---- |\r\n| DATE | 3字节 | 格式：yyyy-mm-dd |\r\n| DATETIME | 8字节 | 格式：yyyy-mm-dd hh：mm：ss |\r\n| TIMESTAMP | 4字节 | 格式：yymmddhhmmss，范围从1970年到2038年 |\r\n| TIME | 3字节 | 格式：hh：mm：ss |\r\n\r\n#### 其它类型\r\n| 类型 | 大小 | 描述 |\r\n|-|-|\r\n| ENUM | 1或2字节 | 枚举类型，值只能限定的值之一 |\r\n| SET | 1、2、4或8字节 | 枚举类型，值只能限定的值之一或组合 其中length属性可选，它可以限制类型的长度 |\r\n\r\n## 列属性\r\n\r\n1. 可以对列指定 `NULL` 或 `NOT NULL`\r\n\r\n2. 使用default指定默认值，如` gender ENUM(\'m\', \'f\') default \'f\'`， 数字类型默认值为0，字符串默认类型为空\r\n\r\n3. 数字类型使用`UNSIGNED`指定为无符号类型\r\n\r\n4. 使用`AUTO_INCREMENT`指定每条记录自动增加1，一般对主键和索引使用\r\n\r\n## 管理MySQL\r\n\r\n使用MySQL命令行或者php web软件phpMyAdmin管理。\r\n', 'normal', 553, b'0', b'1'),
(47, '第5章 SQL简介', 1519915377, 1519915377, 1019, '资料：http://www.runoob.com/sql/sql-tutorial.html\r\n\r\nSQL命令不区分大小写，一般用大写，以区分数据库标识符\r\n\r\n## 引号\r\n\r\n文本值、日期和时间值需要引号括起来。\r\n\r\n可以在引号中使用转义字符。\r\n\r\n反引号\\`name\\`用来安全引号可能与MySQL关键字重复的标识符。\r\n\r\n## USE语句\r\n\r\n用于切换当前数据库: \r\n```sql\r\nUSE `database_nanme`;\r\n```\r\n\r\n## CREATE语句\r\n创建数据库：\r\n```sql\r\nCREATE DATEBASE `database_name`;\r\n```\r\n\r\n创建表：\r\n\r\n```sql\r\nCREATE TABLE `table_name`(\r\n	`column1_name` desciption,\r\n	`column2_name` desciption,\r\n	...\r\n);\r\n```\r\n\r\n## SHOW命令\r\n\r\n显示所有的数据库：\r\n```sql\r\nSHOW `DATABASES`;\r\n```\r\n\r\n显示所有的表：\r\n```sql\r\nSHOW `TABLES`;\r\n```\r\n\r\n显示表中所有的列：\r\n```sql\r\nSHOW `column1_name`, `column2_name`, ...\r\nFROM `table_name`;\r\n```\r\n\r\n显示警告：\r\n```sql\r\nSHOW `WARNINGS`;\r\n```\r\n\r\n## INSERT插入语句\r\n\r\n填充若干列：\r\n```sql\r\nINSERT INTO `table_name`(`column1_name`, `column2_name`, ...)\r\nVALUES(value1, value2, ...);\r\n```\r\n填充所有列：\r\n```sql\r\nINSERT INTO `table_name`\r\nVALUES(value1, value2, ...);\r\n```\r\n填充值数量要和列数相等。\r\n同时插入多行：\r\n```sql\r\nINSERT INTO `table_name`(`column1_name`, `column2_name`, ...)\r\nVALUES(value1, value2, ...), (value1, value2, ...), ...;\r\n```\r\n## SELECT选择语句\r\n\r\n格式：\r\n\r\n```sql\r\nSELECT `column1_name`, `column2_name`, ... \r\nFROM `table_name`\r\n```\r\n选择所有列：\r\n\r\n```sql\r\nSELECT * \r\nFROM `table_name`\r\n```\r\n调用函数：\r\n```sql\r\nSELECT function_name(arg1, arg2);\r\n```\r\n\r\n## WHERE筛选子句\r\n\r\n格式：\r\n\r\n```sql\r\nSELECT `column1_name`, `column2_name`, ... \r\nFROM `table_name`\r\nWHERE condition\r\n```\r\n\r\nWHERE中可以使用的运算符：+, -, *, /, =, <, >, <=, >=, !=, ||, &&, !, XOR, IS NOT NULL, IS NULL, IS TRUE, IS FALSE, BETWEEN, NOT BETWEEEM\r\n\r\n## LIKE和NOT LIKE\r\n\r\n两个通配符: `_`匹配单个字符，`%`匹配任何个字符\r\n\r\n如：`... WHERE email LIKE \'%@%qq.com\'` 可以匹配qq邮箱\r\n\r\n\r\n## ORDER BY排序子句\r\n\r\n格式：\r\n\r\n```\r\nSELECT ...\r\n...\r\nORDER BY `column_name1` [ASC 或 DESC], [`column_name2` [ASC 或 DESC], ...];\r\n```\r\n`ASC`为升序，`DESC`为降序\r\n\r\n## LIMIT限定子句\r\n\r\n返回n条记录：`SELECT ... LIMIT n;`\r\n\r\n返回从i开始的n条记录：`SELECT ... LIMIT i, n;`\r\n\r\n## UPDATE更新语句\r\n\r\n格式：\r\n```sql\r\nUPDATE `table_name` SET `column1_name` = value1, `[column2_name` = value2 ...];\r\n```\r\n可以使用WHERE和LIMIT子句。\r\n\r\n## 删除数据\r\n\r\n删除记录：\r\n```sql\r\nDELETE\r\nFROM `table_name`\r\n[WHERE ...]\r\n[LIMIT ...]\r\n```\r\n清空表：\r\n```sql\r\nTRUNCATE TABLE `table_name`\r\n```\r\n\r\n删除表：\r\n```sql\r\nDROP TABLE `table_name`\r\n```\r\n\r\n删除数据库：\r\n```sql\r\nDROP DATABASE `database_name`\r\n```\r\n\r\n## 列操作\r\n\r\n增加列：\r\n```sql\r\nALTER TABLE tablename ADD column_name description\r\n```\r\n\r\n修改列：\r\n```sql\r\nALTER TABLE `table_name`\r\nALTER `column_name` description\r\n```\r\n\r\n删除列：\r\n```sql\r\nALTER TABLE `table_name`\r\nDROP `column_name`\r\n```\r\n\r\n## 使用AS取别名\r\n\r\n格式：\r\n```sql\r\nSELECT `column_name` AS `new_name`\r\n```\r\n\r\n可作为查询中的快捷名，不影响数据。\r\n\r\n## 函数\r\n\r\n函数参数是列或者直接量\r\n函数名不区分大小写\r\nSQL函数分为：文本函数、数字函数、日期和时间函数。\r\n\r\n参考：[MySQL函数参考手册](http://www.runoob.com/sql/sql-function.html \"MySQL函数参考手册\")', 'normal', 482, b'0', b'1'),
(48, '第6章 数据库设计', 1519920610, 1519920610, 1019, '## 数据库设计流程\r\n\r\n1. 定义应用程序作用，设计原始表\r\n2. 指定主键\r\n3. 第一范式(1NF)\r\n4. 第二范式(2NF)\r\n5. 第三范式(3NF)\r\n6. 审查设计\r\n\r\n## 指定主键\r\n\r\n主键满足的规则：\r\n\r\n- 有值(非NULL)\r\n- 不变值(永不改变)\r\n- 在表中唯一(唯一性)\r\n- 没有满足以上规则的列则创建一个\r\n\r\n主键使用整数可以提高数据库性能\r\n\r\n外键：表A中主键在表B中的代表\r\n\r\n## 第一范式(1NF)\r\n\r\n对表的横向约束，规则：\r\n- 每一列只有一个值，不满足则打散成多列\r\n- 不能有相关数据重复列，不满足则将相关的列转化成单独的表\r\n\r\n## 第二范式(2NF)\r\n\r\n对表的纵向约束，规则：\r\n- 满足1NF\r\n- 表中非键列必须依赖主键（非键列的存在不依靠主键存在，即不存在一对多关系），不满足则创建新表\r\n\r\n## 第三范式(3NF)\r\n\r\n对表的纵向约束，规则：\r\n- 满足2NF\r\n- 表中非键列必须相互独立（非键列直接没有关系），不满足则创建新表\r\n\r\n## 审查设计\r\n\r\n- 确认数据库中保存了足够的数据\r\n- 确定各表列的类型和名字\r\n\r\n\r\n## 索引\r\n\r\n- 索引用户提高数据的读取速度，但减慢了数据的修改速度\r\n- 索引可以设置在一列或多列上\r\n\r\n适合设置的列：\r\n- 查询中WHERE频繁的列\r\n- 查询中ORDER BY频繁的列\r\n\r\n不适合设置的列：\r\n- 允许为空的列\r\n- 字段范围小的列，如ENUM枚举类型少的列\r\n\r\n索引类型：\r\n- INDEX 普通索引\r\n- UNIQUE 每行的索引值唯一\r\n- FULLTEXT 用于FULLTEXT查找\r\n- PRIMARY KEY 主键列索引，特殊的UNIQUE索引\r\n\r\n创建索引的方式：\r\n-修改表结构：\r\n```sql\r\nALTER table_name\r\nINDEX_TYPE [index_name] (`column1_name1`(length)[, `column2_name2`(length), ...])\r\n```\r\n创建表时指定：\r\n```sql\r\nCREATE `table_name`(\r\n	...,\r\n	NDEX_TYPE [index_name] (`column1_name1`(length)[,` column2_name2`(length), ...])\r\n)\r\n```\r\n不指定索引名index_name时则默认使用列名作为索引名。\r\n\r\n**一般怎么添加索引：**\r\n\r\n- 为主键添加PRIMARY KEY索引\r\n- 为列值不重复的列添加UNIQUE索引\r\n- 添加FULLTEXT\r\n- WHERE和ORDER BY经常中使用的列添加INDEX索引\r\n- JOIN中经常使用的添加INDEX索引\r\n\r\n## 表类型（表引擎）\r\n\r\n显示可用的表引擎：`SHOW ENGINES;`\r\n1. MyISAM类型：处理SELECT和INSERT很快; 但不能处理事务; 缺少行级锁定，很容易损坏并且崩溃时数据容易丢失。\r\n2. InnoDB类型：可用处理事务; 并且处理UPDATE很快; 支持外检约束和行级锁定; 不支持FULLTEXT索引; InnoDB引擎比MyISAM慢并且需要更多的磁盘空间。\r\n各种类型的表的操作是相同的。一般MySQL表引擎默认为MyISAM或InnoDB\r\n\r\n指定引擎的方法：\r\n\r\n创建的时指定：\r\n```sql\r\nCREATE TABLE `table_name`(\r\n	`column1_name` descript,\r\n	`column2_name` descript,\r\n	...,\r\n) ENGINE = type;\r\n```\r\n修改表类型：\r\n```sql\r\nALTER TABLE `table_name` ENGINE = type;\r\n```\r\n为各种表使用合适的引擎能够提高性能。\r\n\r\n一般怎么设定引擎：\r\n\r\n- 为需要FULLTEXT查找的表设定MyISAM\r\n- 为需要事务的表设定InnoDB\r\n- 其它表使用默认\r\n\r\n## MySQL字符编码\r\n\r\n显示支持的编码：`SHOW CHARACTER SET;`\r\ncollation列表示编码的比较规则，后缀ci表示不区分大小写，cs区分大小写，bin二进制比较。\r\n\r\n显示各种编码的比较规则：`SHOW COLLATION;`\r\n\r\n各种的编码的字符比较价格不相同。一般使用utf-8编码。\r\n\r\n每个数据库、表、字符串列都可以合作编码和比较规则，一般使用默认即可。\r\n\r\nphp脚本编码须和MySQL编码一致。\r\n\r\n## 外键约束\r\n\r\n外键联系了两张表，外键的主键所在的表称主表，外键所在的表称子表。主键约束设定了当约束被破坏时的规则。\r\n\r\n创建外键约束，在`CREATE TABLE或ALTER TABLE`句中添加：\r\n\r\n```sql\r\nFOREIGN KEY (item_name) REFERENCES table_name(column_name)\r\n[ON DELETE action]\r\n[ON UPDATE action]\r\n```\r\n其中item_name是表中外键列，table_name是主键列所在表，column_name是主键列。\r\n\r\naciton的取值：\r\n- RESTRICT、NOT ACTION: 无动作(默认值)\r\n- SET DEFAULT: 无作用\r\n- SET NULL: 删除父记录导致子表中相应的外键别设置为NULL。如果该列指定了NOT NULL则产生一个错误。\r\n- CASCADE: 同步变化，删除父记录时会删除外键的所在的记录。\r\n父表和字表必须都是InnoDB类型才能使用外键约束。', 'normal', 555, b'0', b'1'),
(49, '第7章 高级SQL和MySQL', 1520059688, 1520059688, 1019, '## 联结\r\n\r\n联结是将两个表或者多个表看为一个大表来使用SQL查询。\r\n\r\n分类：\r\n\r\n- 内联结: 在表中存在至少一个匹配时返回记录\r\n- 外联结：返回两个表都匹配的记录和不匹配的记录。有三种类型：\r\n 1. 左联结：以左表为主，返回左表的所有记录，右表中不匹配的记录返回NULL\r\n 2. 右联结：与左联结相反，以右表为主，返回右表的所有记录，左表中不匹配的记录返回NULL\r\n 3. 全联结：MySQL不支持。但可以使用左联结、右联结和UNION来实现。\r\n\r\n语法：\r\n\r\n```sql\r\nSELECT `column1_name`[, `column2_name`, ...]\r\nFROM `table1` [AS `t1`]\r\nJOIN_TYPE `table2` [AS `t2`] [ON `t1`.`column_name` = `t2`.`column_name`]\r\n[WHERE ...]\r\n[ORDER BY ...]\r\n[LIMIT ...]\r\n```\r\n外联结、左联结、右联结类型分别为：`INNER JOIN`、`LEFT [OUTER] JOIN`、`RIGHT [OUTER] JOIN`\r\n\r\n比较中如果两个表具有相同的名称，可以使用USING代替ON：`USING (column_name)`\r\n\r\n例子，使用内联结查询论坛数据库中某个用户最近10篇文章：\r\n\r\n```sql\r\nSELECT `u`.`user_id`, `u`.`user_name`, `a`.`title`, `a`.`date`, `a`.`content`\r\nFROM  `users` AS `u`\r\nINNER JOIN `articles` AS `a` USING(`user_id`)\r\nWHERE `u`.`user_id` = 1\r\nORDER BY `a`.`date` DESC \r\nLIMIT 10\r\n```\r\n可以使用`database.table.column`跨库联结，数据库必须都在一个服务器上，执行用户需有权限访问各个表。\r\n\r\n## 多联结\r\n\r\n语法：\r\n\r\n```sql\r\nSELECT `column1_name`[, `column2_name`, ...]\r\nFROM `table1` [AS `t1`]\r\nJOIN_TYPE1 `table2` [AS `t2`] [ON ...]\r\nJOIN_TYPE2 `table3` [AS `t3`] [ON ...]\r\n...\r\n[WHERE ...]\r\n[ORDER BY ...]\r\n[LIMIT ...]\r\n```\r\n\r\n## 分组函数\r\n对列的多个行的进行操作的函数。\r\n\r\n| 函数 | 功能 |\r\n|------|------|\r\n| AVG | 列中中所有数值的平均值 |\r\n| COUNT | 列中所有值的个数 |\r\n| CROUP_CONCAT | 列中所有值得联结 |\r\n| MAX | 列中所有值的最大值 |\r\n| MIN| 列中所有值得最小值 |\r\n| SUM | 列中所有值的和 |\r\n\r\n## GROUP BY子句\r\n\r\nGROUP BY 语句用于结合分组函数，根据一个或多个列对结果集进行分组。\r\n\r\n例子，查询每个用户发表的文章数量：\r\n\r\n```sql\r\nSELECT `u`.`user_id`, `u`.`user_name`, COUNT( `a`.`user_id` ) AS `count`\r\nFROM `articles` AS `a`\r\nRIGHT JOIN `users` AS `u` USING (`user_id`) \r\nGROUP BY `user_id`\r\nLIMIT 0 , 30\r\n```\r\n注意：GROUP BY会将NULL值分到同一组。\r\n\r\n## HAVING子句\r\n\r\nWHERE关键字无法与分组函数一起使用。HAVING 子句可以让我们筛选分组后的各组数据。\r\n\r\n例子，查询发表的文章数量为0的用户：\r\n\r\n```sql\r\nSELECT `u`.`user_id`, `u`.`user_name`, COUNT( `a`.`article_id` ) AS count\r\nFROM `users` AS `u`\r\nLEFT JOIN `articles` AS `a` USING (`user_id`) \r\nGROUP BY `user_id`\r\nHAVING `count` = 0;\r\n```\r\n\r\n## 高级选择函数\r\n\r\nCREATEST()函数：返回列表中的最大，语法：\r\n```sql\r\nSELECT GREATEST(`col1`, `col2`, ...) FROM `table`\r\nSELECT GREATEST(100, 200, 300)\r\n```\r\nLEAST()函数：返回列表中的最小值，语法：\r\n```sql\r\nSELECT LEAST(`col1`, `col2`, ...) FROM `table`\r\nSELECT LEAST(100, 200, 300)\r\n```\r\nCOALESCE()函数：返回列表中的第一个非NULL值，语法：\r\n```sql\r\nSELECT COLALESCE(`col1`, `col2`, ...) FROM `table`\r\n```\r\nIF()函数：根据条件返回任意值，语法：\r\n\r\n```sql\r\nSELECT IF(condition, return_if_true, return_if_false) FROM `table`\r\n```\r\ncondition 为真返回 return_if_true，否则返回 return_if_false\r\n\r\nFNULL()函数，语法：\r\n```sql\r\nSELECT IFNULL(value, return_if_null)\r\n```\r\nvalue 为 NULL 返回 return_if_null\r\n\r\nCASE()函数：类似php的switch多分支选择，语法：\r\n```sql\r\nSELECT CASE `col1`\r\nWHEN value1 THEN case1\r\nWHEN value2 THEN case2\r\n...\r\nEND\r\n```\r\n这些函数也可以用在其他查询语句中。\r\n\r\n\r\n## ALTER语句\r\nALTER可以修改数据库、表、列、记录、索引。\r\n\r\n基本语法：\r\n```sql\r\nALTER TABLE table_name CLAUSE\r\n```\r\nALTERTABLE子句\r\n\r\n|子句|用法|含义|\r\n|--|--|--|\r\n|ADD COLUMN | ALTER TABLE t ADD COLUMN c TYPE | 增加列到表尾 |\r\n| CHANGE COLUMN | ALTER TABLE t CHANGE COLUMN c c TYPE | 允许修改列类型和属性 |\r\n| DROP COLUM | ALTER TABLE t DROP COLUM c | 删除一列及这列数据 |\r\n| ADD INDEX | ALTER TABLE t ADD INDEX i(c) | 在c上设置索引 |\r\n| DROP INDEX | ALTER TABLE t DROP INDEX i | 删除索引 |\r\n| RENAME TO | ALTER TABLE t RENAME TO new_t | 修改表名 |\r\n\r\n## FULLTEXT查找\r\n\r\nFULLTEXT用于多列查找，并且使用索引。而LIKE只能单列匹配。\r\n\r\n创建FULLTEXT索引：\r\n\r\n1. 确认表类型: SHOW TABLE STATUS\\G\r\n2. 将表修改为MyISAM类型: ALTER TABLE table ENGINE = MYISAM;\r\n3. 为列增加FULLTEXT索引：ALTER TABLE table ADD FULLTEXT(col1, col2, ...);\r\n\r\nFULLTEXT查找语法:\r\n```sql\r\nSELECT * \r\nFROM `table`\r\nWHERE MATCH(col1, col2, ...) AGAINST(text)\r\n```\r\n注意：MTACH中的列必须与建立的FULLTEXT索引列相同\r\n\r\n查找规则：\r\n\r\n- text会被分解成多个关键字（空格分割）\r\n- 长度不足4的关键字被忽略\r\n- 忽略停止词（stopword）\r\n- 50%以上的记录匹配，则不返回记录\r\n- 默认不区分大小写\r\n- 布尔模式FULLTEXT查找：\r\n\r\n```sql\r\nSELECT * \r\nFROM `table`\r\nWHERE MATCH(col1, col2, ...) AGAINST(text IN BOOLEAN MODE)\r\n```\r\n布尔模式运算符\r\n\r\n|运算符|含义|\r\n|--|--|\r\n| + | 必须存在的关键词 |\r\n| - | 不能存在的关键字 |\r\n| ~ | 可以存在但不重要的关键字 |\r\n| * | 通配符 |\r\n| < | 降低关键词重要性 |\r\n| > | 提高关键词重要性|\r\n| \"\" | 必须匹配的短语 |\r\n| () | 子表达式 |\r\n\r\n布尔模式的规则：\r\n\r\n1. 关键词没有运算符时表示这个单词可选\r\n2. 50%以上的记录匹配时也会返回记录\r\n3. 不会按相关性排序\r\n\r\n## 查询优化\r\n\r\n优化ALTER留下的间断：OPTIMIZE TABLE table;\r\n\r\n优化索引：ANALYZE TABLE table;\r\n\r\n## 数据库优化\r\n\r\n- 选择最佳引擎\r\n- 尽量为列使用最小的数据类型\r\n- 尽可能定义NOT NULL的列\r\n- 为主键使用整数\r\n- 索引选择正确的类型应用到一列或多列\r\n- 避免定义太多索引\r\n- 如果可能的话限制索引为固定数目的字符\r\n- 确保联结列的类型相同\r\n\r\n## 解释查询\r\n\r\n在SQL语句前面添加EXPLIN可以看到语句的解释过程\r\n\r\n## 事务\r\n\r\n数据库事务是指在单个会话期间运行的一系列查询。设置起点和终点，然后可以根据需要运行或者撤销所有的查询。\r\n\r\nInnoDB表才能使用事务。\r\n\r\n开始事务：`START TRANSACTION;`\r\n\r\n执行事务查询：`COMMIT;`\r\n\r\n撤销事务查询：`ROLLBACK;`\r\n\r\n不能使用PHPMyAdmin执行事务\r\n\r\n## 数据库加密\r\n\r\nmd5和sha1是不可逆加密，可逆方式可以使用AES:\r\n\r\n加密函数：AES_ENCRYPT(str, key)\r\n\r\n解密函数：AES_DECRYPT(str, key)', 'normal', 630, b'0', b'1'),
(50, '第8章 错误处理和调试', 1520060272, 1520060272, 1019, '## 错误类型\r\n\r\nHTML错误、PHP错误、SQL错误和MySQL错误\r\n\r\n基本问题：\r\n\r\nPHP和MySQL版本问题：查看PHP和MySQL版本特性\r\n\r\nweb服务器或版本问题：查看web服务器特性\r\n\r\nweb浏览器或版本问题：使用不同的web浏览器运行页面\r\n\r\n## 调试HTML\r\n\r\n方法：\r\n1. 检查源代码\r\n2. 使用验证工具(validator.w3.org)\r\n3. 使用浏览器调试\r\n4. 使用Firefox插件\r\n5. 更换浏览器进行测试\r\n\r\n## display_errors开关\r\n\r\nphp.ini配置文件中display_errors为显示PHP错误的开关。\r\n\r\n也可以使用ini_set()函数为当前脚本打开显示错误：`ini_set(\'display_errors\', 1);`\r\n\r\n注意：使用ini_set()函数后，如果脚本发生解析错误不会被显示\r\n\r\n## 错误报告\r\n错误有三种级别：\r\n- notice(注意)：提醒可能的问题，脚本继续执行\r\n- warning(警告)：提醒一个问题，脚本继续执行\r\n- error(错误)：显示错误，脚本停止执行\r\n注意：显示错误报告需打开display_errors开关\r\n\r\n错误报告等级：\r\n\r\n|等级值|符号常量|报告|\r\n|---|----|----|\r\n| 1 |E_ERROR|致命错误(停止脚本执行)|\r\n| 2 | E_WARNING | 运行错误警告 |\r\n| 4 | E_PARSE | 解析错误 |\r\n| 8 | E_NOTICE | 注意问题 |\r\n| 256 | E_USER_ERROR | 用户生成的错误消息, 由trigger_error()生成 |\r\n| 512 | E_USER_WARGING | 用户生成的警告，由trigger_error()生成 |\r\n| 1024 | E_USER_NOTICE | 用户生成的注意，由trigger_error()生成 |\r\n| 2048 | E_STRICT | 兼容性和互操作性的建议 |\r\n| 8192 | E_DEPR ECATED | 警告无法在未来PHP版本中使用的代码 |\r\n| 30719 | E_ALL | 所有的错误、警告和建议 |\r\n调整脚本的错误报告行为：\r\n```php\r\nerror_reporting(number);\r\n```\r\nnumber是等级值，为0关闭所有报告，为E_ALL显示所有报告。对这些常量可以使用与或非运算符来进行搭配使用，如：E_ALL & E_STRICT可以显示不是注意的报告。\r\n\r\n生成错误：trigger_error(\'错误消息\', 等级值);\r\n等级值只能是表中的E_USER_*\r\n@运算符可以抑制单个错误, 如@(1/0), 对文件包含函数使用可以抑制包含文件中的错误报告。\r\n\r\n## 自定义错误处理\r\n\r\n定义错误处理函数：\r\n\r\n```php\r\nfunction fun_name($num, $msg, $file, $line, $vars){\r\n	...\r\n}\r\n```\r\n参数依次可选，分别是：错误等级值、错误消息、错误文件名、错误行数、错误存在的变量\r\n指定错误处理函数：\r\n```php\r\nset_error_handler(\'fun_name\');\r\n```\r\n\r\n将错误输出到文件中可以使用error_log()函数\r\n\r\n## php调试技术\r\n\r\n常见PHP错误\r\n\r\n| 错误 | 原因 |\r\n|------|------|\r\n| 空白页面 | HTML问题或PHP错误，且关闭了display_errors或error_reporting |\r\n| 解析错误 | 忘记分号；不对称的{}、()、 []；字符串中使用了引号但没有转义 |\r\n| 空变量值 | 忘记变量前的$；变量拼写错误或大小写错误；变量作用域不合适 |\r\n| 调用未定义的变量 | 变量未赋值就使用；使用空变量值 |\r\n| 声明函数 | 函数存在多个定义（检查文件包含）|\r\n| 头部已经发送 | 脚本中的PHP标签之前存在空白；已经打印数据；已经包含文件 |\r\n\r\n调试方法：\r\n- 打开display_errors显示错误报告\r\n- 使用注释寻找错误的代码块\r\n- 使用print和echo函数输出执行了什么内容（多分支时）\r\n- 变量追踪，打印变量的名字和值\r\n- 使用print_r()可以打印数组或对象的值，var_dump()可以打印数组或对象的类型和值，也可以用于普通变量\r\n\r\n用die()或exit()可以结束脚本执行。\r\n\r\n## SQL和MySQL调试技术\r\n\r\n常见SQL错误：\r\n\r\n- 引号或括号不对称\r\n- 列值中有未转义的引号\r\n- 列名、表名或函数名拼写错误\r\n- 联结有歧义\r\n- 子句的顺序错误(FROM、WHERE、ORDER BY、LIMIT)\r\n\r\n调试SQL查询问题：\r\n\r\n1. 用PHP输出查询结果\r\n2. 在MySQL命令行或者PHPmyadmin运行查询：如果结果和预期相同，则问题出在PHP脚本，否则出在SQL或MySQL数据库\r\n3. 一步步重写查询，直到发现问题所在\r\n\r\n调试访问问题：\r\n1. 改变用户权限后需要重新加载MySQL\r\n2. 确认密码正确\r\n3. 确认MySQL在运行并在正确端口', 'normal', 511, b'0', b'1'),
(51, '第9章 使用PHP和MySQL', 1520060448, 1520060448, 1019, '## 连接MySQL\r\n\r\n连接MySQL：\r\n\r\n```php\r\n$dbc = mysqli_connect(hostname, username, password);\r\n```\r\n\r\n切换数据库：\r\n\r\n```php\r\nmysqli_select_db($dbc, db_name);\r\n```\r\n或者一步完成：\r\n\r\n```php\r\n$dbc = mysqli_connect(hostname, username, password, db_name);\r\n```\r\n连接错误信息：mysqli_connet_error()\r\n\r\n一般将数据库的连接单独放在一个文件中，之后需要时使用文件包含它\r\n\r\n## 关闭MySQL连接\r\n\r\n语法：\r\n```php\r\nmysqli_close($dbc);\r\n```\r\n\r\n非必须操作，PHP执行结束后会自动关闭连接\r\n\r\n## SQL查询\r\n\r\n语法：\r\n```php\r\n$ret = mysqli_query($dbc, query_str);\r\n```\r\n返回数据的查询结果\r\n\r\n处理SELECT查询返回的数据：\r\n\r\n```php\r\nwhile($row = mysqli_fetch_array($ret[, $type])){\r\n...\r\n}\r\n```\r\n其中mysqli_fetch_array()函数每次以数组格式返回一行记录, $type：MYSQLI_ASSOC返回关联数组、MYSQLI_NUM返回数字数组、MYSQLIBOTH返回关联和数字数组(默认值)\r\n\r\n获取查询错误的信息：mysqli_error()\r\n\r\n获取SELECT查询的行数：$num = mysqli_num_rows($ret);\r\n\r\n获取受SQL查询的影响行数：$num = mysqli_affected_rows($dbc);\r\n\r\n释放$ret内存（可选）：mysqli_free_result($ret);\r\n\r\n## 确保SQL安全\r\n\r\n- 保护MySQL连接信息：可以将连接脚本放在web目录外面\r\n- 不要呈现过多的MySQL访问信息：只在调试时打开错误报告\r\n- 涉及用户提交的数据要小心：永远不要相信用户的提交数据，\r\n - 验证值类型是否正确(数字、字符串等)\r\n - 使用正则表达式匹配(14章)\r\n - 强制转换值类型保证是数字(13章)\r\n - 通过mysqli_real_escape_srting()函数处理用户提交的数据，通过转义清理有问题的字符:\r\n\r\n```php\r\n $safe = mysqli_real_escape_string($dbc, data);\r\n```', 'normal', 507, b'0', b'1'),
(52, '第10章 常用编程技术', 1520060584, 1520060584, 1019, '## 给脚本发送数据\r\n\r\n有两种方法：\r\n\r\n通过表单给脚本发生数据\r\n通过URI给脚本发生数据: \r\n```\r\nhttp://example.com?name1=value1&name2=value2&...\r\n```\r\n查询数据保存在$_GET数组中\r\n手动指定URI时，需要进行URI编码：\r\n```php\r\n$url = \'page.php\'?name\' . urlencode(string);\r\n```\r\n\r\n## 给查询结果分页\r\n\r\n分页效果的页面是相同的，不同的是数据。分页使用LIMIT实现，只要保证每页的LIMIT参数不同即可。\r\n\r\n## 给查询结果排序\r\n\r\n使用ORDER BY语句', 'normal', 600, b'0', b'1');
INSERT INTO `lb_article` (`id`, `title`, `create_time`, `update_time`, `category_id`, `content`, `status`, `view_count`, `is_top`, `is_original`) VALUES
(53, '第11章 web应用程序开发', 1520061154, 1520061154, 1019, '## 发送电子邮件\r\n\r\n语法: \r\n```php\r\nmail(address, theme, content [, header])\r\n```\r\n参数解释：\r\n- address: 邮件地址，多个之间用逗号隔开\r\n- theme: 邮件主题\r\n- content: 邮件内容\r\n- header: 设置发件人(\"From:\" + name)、回复(Reply-to)、抄送(Cc)、密件抄送(Bcc)、\r\n\r\n[php手册api参考](http://php.net/manual/zh/function.mail.php \"api参考\")\r\n\r\n注：此功能需要在服务器上安装邮件服务器软件。\r\n\r\n## 文件上传\r\n\r\n文件上传的php.ini配置：\r\n- file_uploads：文件上传功能开关\r\n- max_input_time: 允许PHP脚本运行的时间(单位秒)\r\n- post_max_size: 允许POST数据的总大小(单位字节)\r\n- upload_max_filesize: 最大的文件大小(单位字节)\r\n- upload_tmp_dir: 临时存放上传文件的位置，可以将此目录设置在web目录上层并需要设置相应的权限\r\n建立上传的文件目录：可以将此目录设置在web目录上层并需要设置相应的权限\r\n\r\n上传文件的表单需要设置属性\r\n```html\r\nenctype=\"multipart/form-data\" method=\"post\"\r\n```\r\n\r\n通过表单内的隐藏input简单限制文件大小, length单位为字节：\r\n\r\n```html\r\n<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"lenth\" />\r\n```\r\n\r\n$_FILES超全局变量保存了上传的文件信息:\r\n\r\n| $_FILES键 | 说明 |\r\n|--|--|\r\n| name | 文件原始名 |\r\n| type | 文件MIME类型，浏览器提供 |\r\n| size | 文件大小，单位字节 |\r\n| tmp_name | 临时文件名 |\r\n| error | 错误代码 |\r\n\r\n保存已经上传的临时文件：\r\n```html\r\nmove_uploaded_file($_FILES[\'intput_name\'][tmp_name], save_filename);\r\n```\r\n\r\n$_FILES[intput_name][\'error\']\r\n\r\n| 值 | 符号常量 | 含义 |\r\n|---|--|--|\r\n| 0 | UPLOAD_ERR_OK | 文件上传正常 |\r\n| 1 | UPLOAD_ERR_INI_SIZE | 上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值 |\r\n| 2 | UPLOAD_ERR_FORM_SIZE | 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值|\r\n| 3 | UPLOAD_ERR_PARTIAL | 文件只有部分被上传 |\r\n| 4 | UPLOAD_ERR_NO_FILE | 没有文件被上传 |\r\n| 6 | UPLOAD_ERR_NO_TMP_DIR | 找不到临时文件夹 |\r\n| 7 | UPLOAD_ERR_CANT_WRITE | 文件写入失败 |\r\n| 8 | UPLOAD_ERR_EXTENSION | 文件上传停止 |\r\n\r\n判断上传的文件是否存在：\r\n```php\r\nis_uploaded_file($_FILES[\'input_name\'][\'tmp_name\'])\r\n```\r\n\r\n\r\n## 发送HTTP头部\r\n\r\n[HTTP协议解析](http://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html \"HTTP协议解析\")\r\n\r\n方法：`header(head_string);` head_string为发送的 http 头部信息\r\n\r\n重定向：header(\"Location: url\");\r\n\r\n发送文件：\r\n1. 指定文件类型：\r\n```php\r\nheader(\"Content-Type: application/file_type\\n\");\r\n```\r\n2. 告诉浏览器怎么处理：\r\n```php\r\nheader(\"Content-Disposition: attachment或inline; filename=\\\"file_name.file_type\\\"\\n\");\r\n```\r\nattachment下载(不一定能行), inline显示文件\r\n3. 下载文件第三步：\r\n```php\r\nheader(\"Content-Length: length\\n\");  //指定文件长度\r\nreadfile($file_name);  //读取文件并发送给浏览器\r\n```\r\n注意：使用header()函数之前不能发送任何内容给web浏览器。使用headers_sent()函数可以判断是否已经发送数据给web浏览器\r\n\r\n\r\n## 日期和时间函数\r\n\r\n使用日期和时间函数之前，必须设置时区：\r\n\r\n```php\r\ndate_default_timezone_set(\'PRC\');  //PRC（People\'s Republic of China），即北京时区\r\n```\r\n\r\n[日期和时间函数API文档](http://php.net/manual/zh/ref.datetime.php \"日期和时间函数API文档\")', 'normal', 627, b'0', b'1'),
(54, '第12章 cookie和session', 1520061445, 1520061445, 1019, '## 设置cookie\r\n\r\ncookie是服务器保存在用户的计算机上少量数据，cookie通过http头部传递。\r\n\r\n设置一个cookie：\r\n```php\r\nsetcookie(name, value);\r\n```\r\n\r\n注意：cookie发送必须在输出其它信息之前\r\n\r\n## 设置cookie的更多信息\r\n\r\n```php\r\nsetcookie(name, value, expiration, path, host, secure, httponly);\r\n```\r\n\r\n参数解释：\r\n\r\n- expiration: 设置cookie保存时间，设置保存sec秒：time()+sec。默认为0，时间到关闭浏览器\r\n- path: 限制cookie在特定文件夹或限制到特定主机内有效, 如\"/admin\"则对于/admin目录有效，如\'luoluolzb.cn\'则对整个域有效。默认为\'/\'\r\n- secure: 1以安全https连接发送cookie，0以标准连接发送cookie。默认为0\r\n- httponly(php5.2): 布尔值，是否只能通过http/https访问cookie。默认为false\r\n\r\n## 获取cookie\r\n\r\n用户访问页面时会自动发送cookie给服务器\r\n\r\n获取cookie：$_COOKIE[\'name\']\r\n\r\n## 删除cookie\r\n\r\n方法：setcookie(\'name\');\r\n\r\n用户注销时，可以用此函数删除用户的cookie信息\r\n\r\n### 设置session变量\r\n\r\nsession(会话)是保存在服务上存储信息的。相对于cookie的优点：更安全，可以保存更多数据\r\n\r\n每个用户的会话信息通过id标识，这个id通过cookie保存在web浏览器上(也可以不使用cookie)\r\n\r\n使用任何会话之前必须调用session_start()函数，而且要在输出其它信息之前调用\r\n\r\n设置会话变量:\r\n```php\r\nsession：$_SESSION[\'name\'] = value;\r\n```\r\n\r\n获取会话变量：\r\n```php\r\n$value = $_SESSION[\'name\'];\r\n```\r\n\r\n删除会话变量\r\n\r\n- 删除一个变量：\r\n```php\r\nunset($_SESSION[\'name\']);\r\n```\r\n\r\n- 删除所有变量：\r\n```php\r\n$_SESSION = array();\r\n```\r\n\r\n- 删除所有会话数据：\r\n```php\r\nsession_destroy();\r\n```', 'normal', 612, b'0', b'1'),
(55, '第13章 安全性方法', 1520061733, 1520061733, 1019, '## 使用类型验证数据\r\n\r\nPHP对于每一种类型都有特定的类型验证函数：\r\nis_bool(), is_array(), is_numeric(), isfloat(), is_int(), is_null(), is_resource(), is_scalar(), is_string(), is_nan()\r\n\r\n强制类型转换：`$var = (type)$var`\r\n\r\n## 验证上传文件类型\r\n\r\n方法：\r\n\r\n```php\r\n$fileinfo = finfo_open(FILEINFO_MIME_TYPE);  //创建Fileinfo\r\nif(finfo_file($fileinfo, $_FILES[\'input_name\'][\'tmp_name\']) != MIME类型){  //验证文件的MIME类型\r\n	unlink($_FILES[\'input_name\'][\'tmp_name\']);  //删除文件\r\n	//other code\r\n}else{\r\n	//code\r\n}\r\nfinfo_close($fileinfo);  //释放fileinfo(同一个Fileinfo资源可以使用多次)\r\n```\r\n参考：[文件MIME类型大全](http://baike.baidu.com/link?url=GzGnulgcklNG5XYt6Isuk0iJ-Qup5dCVbDxoDzkzFG1EMX_6x5aHmWBvHwLRfDkHRd8ichTljAv-5IgCpk1YRq#4 \"文件MIME类型大全\")\r\n\r\n## 预防XSS攻击\r\n\r\nXSS攻击：web页面的输入框，可以输入HTML、css、JavaScript代码，攻击者通过输入恶意代码来窃取cookie、重定向、窃取资料等。\r\n\r\n## 验证用户输入：\r\n\r\n- htmlspecialchars()：把&、\'、\"、<、>转换成HTML实体字符\r\n- htmlentities(): 把所有适用的字符转换为HTML实体字符\r\n- strip_tags(): 删除所有的HTML和PHP标签\r\n\r\nnl2br()函数可以将回车符转换成HTML的br标签\r\n\r\n\r\n## 使用过滤器扩展\r\n\r\nPHP5.2提供了过滤器扩展，功能是验证数据和清理数据\r\n\r\n过滤变量：\r\n```php\r\nfileter_var($var, filter [, options]);\r\n```\r\n\r\nfilter为使用的过滤器类型，有验证过滤器和清理过滤器，options为附加条件\r\n\r\n## 预防SQL注入攻击\r\n\r\nSQL注入攻击：将恶意SQL代码插入SQL查询中，从而改变、破坏、盗取数据。\r\n\r\n预防措施：\r\n\r\n1. 验证查询中使用的所有数据(类型转换、过滤器扩展)\r\n2. 使用mysqli_real_escape_string()进行合法性验证\r\n3. 关闭错误报告，防止泄露信息\r\n\r\n\r\n## 预处理语句\r\n\r\n预处理查询：先使用占位符代替数据的原始串发送到MySQL解析，确保语法有效，之后再单独发送数据，MySQL再使用这些数据进行查询。\r\n\r\n优点：\r\n1. 安全性高，可以很好的预防SQL注入\r\n2. 速度更快，多次使用相同的SQL语法并发送不同的值比直接进行SQL查询更快\r\n\r\n例子：\r\n\r\n```php\r\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");  //连接到MySQL\r\n\r\n/* 检查连接错误 */\r\nif (mysqli_connect_errno()) {\r\nprintf(\"Connect failed: %s\\n\", mysqli_connect_error());\r\nexit();\r\n}\r\n\r\n//第一种：无返回数据的查询\r\n\r\nmysqli_query($link, \"CREATE TABLE myCity LIKE City\");\r\n\r\n/* 准备插入数据的声明 */\r\n$query = \"INSERT INTO myCity (Name, CountryCode, District) VALUES (?,?,?)\";\r\n$stmt = mysqli_prepare($link, $query);\r\n\r\nmysqli_stmt_bind_param($stmt, \"sss\", $val1, $val2, $val3);\r\n\r\n$val1 = \'Stuttgart\';\r\n$val2 = \'DEU\';\r\n$val3 = \'Baden-Wuerttemberg\';\r\n\r\n/* 执行查询 */\r\nmysqli_stmt_execute($stmt);\r\n\r\n\r\n$val1 = \'Bordeaux\';\r\n$val2 = \'FRA\';\r\n$val3 = \'Aquitaine\';\r\n\r\n/* 执行查询 */\r\nmysqli_stmt_execute($stmt);\r\n\r\n/* 关闭声明 */\r\nmysqli_stmt_close($stmt);\r\n\r\n//第二种：有返回数据的查询\r\n$query = \"SELECT Name, CountryCode, District FROM myCity\";\r\nif ($result = mysqli_query($link, $query)) {\r\n	while ($row = mysqli_fetch_row($result)) {\r\n	    printf(\"%s (%s,%s)\\n\", $row[0], $row[1], $row[2]);\r\n	}\r\n	mysqli_free_result($result);\r\n}\r\n\r\n/* 关闭MySQL连接 */\r\nmysqli_close($link);\r\n```\r\n\r\nmysqli_stmt_execute()第二个参数用于格式化字符(类似printf第一参数)：\r\n\r\n- d: 浮点数Decimal\r\n- i: 整数Integer\r\n- b: 二进制数据binary data\r\n- s: 其他类型\r\n\r\n## 预防暴力攻击\r\n\r\n预防暴力破解登录的方法：\r\n1. 让用户注册安全性高的密码：包含数字、字母、符号，长度至少8位等\r\n2. 设置动态登录验证码，并用图片形式给出\r\n3. 不要给出登录失败的具体原因：可以只说明用户名和密码的组合不正确，而不用说明用户名或密码不正确\r\n4. 限制某个ip的登录次数，或者登录失败多次屏蔽ip，或者同ip每次失败登录延迟响应(sleep()函数)等', 'normal', 685, b'0', b'1'),
(56, '第14章 Perl兼容的正则表达式', 1520062095, 1520062095, 1019, '## 基本概念\r\n\r\n正则表达式匹配串(模式)必须用分隔符作为开头和结尾，比如一个正斜杠(/)。\r\n\r\n分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。\r\n\r\nPHP中的模式串最好使用单引号，以防止被PHP转义\r\n\r\nPCRE函数库实现了与 perl5 在语法和语义上略有差异的正则表达式模式匹配功能\r\n\r\n正则表达式不适合用于经常性的匹配，因为它的效率不够高。\r\n\r\n## 元字符\r\n\r\n元字符是被赋予了特殊含义的字符，有两种不同的元字符：一种是可以在模式中方括号外任何地方使用的，另外一种是需要在方括号内使用的。\r\n\r\n方括号外使用的元字符：\r\n\r\n| 字符 | 含义 |\r\n|---|--|\r\n| \\ | 转义字符 |\r\n| ^ | 断言目标的开始位置(或在多行模式下是行首) |\r\n| $ | 断言目标的结束位置(或在多行模式下是行尾) |\r\n| . | 匹配除换行符外的任何字符(默认) |\r\n| [ | 开始字符类定义 |\r\n| ] | 结束字符类定义 |\r\n| 或符号 | 开始一个可选分支 |\r\n| ( |子组的开始标记 |\r\n| ) | 子组的结束标记 |\r\n| ? | 作为量词，表示0次或1次匹配。位于量词后面用于改变量词的贪婪特性 |\r\n| * | 量词，0 次或多次匹配 |\r\n| + | 量词，1 次或多次匹配 |\r\n| { | 自定义量词开始标记 |\r\n| } | 自定义量词结束标记| \r\n\r\n方括号内使用的元字符：\r\n\r\n| 字符 | 含义 |\r\n|---|--|\r\n| \\ |转义字符 |\r\n| ^ |仅在作为第一个字符(方括号内)时，表明字符类取反 |\r\n| - |标记字符范围 |', 'normal', 656, b'0', b'1'),
(57, '第15章 jQuery简介', 1520062264, 1520062264, 1019, '## 介绍\r\njQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。\r\n\r\njQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等。\r\n\r\n## 常用网站\r\n- [jQuery官网](http://jquery.com/ \"jQuery官网\")\r\n- [jQuery插件下载](http://plugins.jquery.com/ \"jQuery插件下载\")\r\n- [jQuery3.1 API文档(个人)](http://jquery.cuishifeng.cn/index.html \"jQuery3.1 API文档(个人)\")\r\n- [jQuery API文档(开源中国)](http://tool.oschina.net/apidocs/apidoc?api=jquery \"jQuery API文档(开源中国)\")\r\n\r\n## EasyUI\r\nEasyUI是基于jQuery的UI插件集合。\r\n\r\n常用网站：\r\n- [EasyUI官网](http://www.jeasyui.com/ \"EasyUI官网\")\r\n- [EasyUI中文网](http://www.jeasyui.com/ \"EasyUI中文网\")\r\n- [官网英文文档](http://www.jeasyui.com/documentation/index.php \"官网英文文档\")\r\n- [中文版chm文档下载](http://vdisk.weibo.com/s/dGcGpnbq4p-CH \"中文版chm文档下载\")', 'normal', 917, b'0', b'1'),
(58, '第16章 面向对象编程入门', 1520062388, 1520062388, 1019, '## 基础概念\r\n\r\n类：一种数据模板，可构造数据对象\r\n\r\n属性：类中的变量称为该类的属性\r\n\r\n方法：类中的函数称为该类的方法\r\n\r\n## 复杂概念\r\n\r\n继承、访问控制、方法重载、作用域、抽象\r\n\r\n## 面对过程与面向对象\r\n\r\n面向过程：更快的学习和使用，特别是小项目，缺点是代码难以维护和扩展\r\n\r\n面向对象：更容易维护，缺点是更难掌握，出错时不容易解决\r\n\r\n两种编程风格各有优缺点，我们要同时利用这两种风格的优势，而不是对其中一种有偏见不去用它。\r\n\r\n## 实例化对象\r\n\r\n使用new关键字并调用构造函数可以实例化类的一个对象。\r\n\r\n```php\r\n$obj = new ClassName([arg1, arg2, ...]);\r\n```\r\n\r\n## MySQLi类\r\n\r\n[PHP手册API文档](http://php.net/manual/zh/class.mysqli.php \"PHP手册API文档\")\r\n\r\n例子：\r\n\r\n```php\r\n<?php\r\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\r\n\r\n/* 检查数据库连接 */\r\nif ($mysqli->connect_errno) {\r\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\r\n    exit();\r\n}\r\n\r\n/* 创建一个数据 */\r\nif ($mysqli->query(\"CREATE TEMPORARY TABLE myCity LIKE City\") === TRUE) {\r\n    printf(\"Table myCity successfully created.\\n\");\r\n}\r\n\r\n/* 执行SELECT查询并获取返回结果 */\r\nif ($result = $mysqli->query(\"SELECT Name FROM City LIMIT 10\")) {\r\n    printf(\"Select returned %d rows.\\n\", $result->num_rows);\r\n\r\n    /* free result set */\r\n    $result->close();\r\n}\r\n\r\n/* 检索大量的数据使用MYSQLI_USE_RESULT */\r\nif ($result = $mysqli->query(\"SELECT * FROM City\", MYSQLI_USE_RESULT)) {\r\n\r\n    /* 注意,直到关闭结果集前不能执行其他的查询, 否则将会返回一个“不同步”的错误 */\r\n    if (!$mysqli->query(\"SET @a:=\'this will not work\'\")) {\r\n        printf(\"Error: %s\\n\", $mysqli->error);\r\n    }\r\n    $result->close();\r\n}\r\n\r\n$mysqli->close();\r\n?>\r\n```\r\n', 'normal', 900, b'0', b'1'),
(59, '第17章 示例---论坛', 1520062445, 1520062445, 1019, '## 分页效果\r\n\r\n使用SQL的LIMIT子语可以实现', 'normal', 998, b'0', b'1'),
(60, '第18章 示例---用户注册', 1520062614, 1520062614, 1019, '## 模块\r\n\r\n将网站中常用的模块单独做成一个文件，之后在需要的页面用使用文件包含即可多次复用。\r\n\r\n常见的模块有：数据库配置文件、网站配置文件、顶部管理块、底部信息块、导航菜单块\r\n\r\n## 数据库配置文件\r\n\r\n数据库配置模块文件中存放连接数据库所需的信息和连接后的句柄。\r\n\r\n```php\r\ndefine(\'DB_HOST\', \'localhost\');     //数据库主机\r\ndefine(\'DB_USER\', \'root\');          //数据用户名\r\ndefine(\'DB_PASSWORD\', \'luoluo00\');  //数据库用户密码\r\ndefine(\'DB_NAME\', \'laqblog\');       //数据库名\r\n\r\n//连接数据库\r\n$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\r\nif(!$dbc){\r\n	trigger_error(\'数据库连接出错\'.mysqli_connect_error());\r\n}\r\nmysqli_set_charset($dbc, \'utf8\');  //设置mysql传输编码\r\n```\r\n\r\n## 网站配置文件\r\n\r\n- 定义常量，如错误输出?、网站email\r\n- 网站设置，如时区设置\r\n- 定义并注册错误处理函数\r\n- 其它配置\r\n\r\n## 使用邮箱验证激活账号\r\n\r\n为每个用户生成唯一的激活码并保存在数据库中，并将激活链接发送到用户邮箱，用户点击链接跳转到激活页面，激活页面进行激活码验证。\r\n\r\n## 使用验证码防止多次注册\r\n使用验证码进行验证，防止多次注册。\r\n\r\n## 使用正则表达式验证\r\n\r\n用户提交注册信息后，可以使用正则表达式来验证用户输入的用户名、密码等是否规范。\r\n\r\n## 使用输出缓冲\r\n\r\n输出缓冲：先将输出放在内存缓冲区中（除http调用外），之后再发送给web浏览器\r\n\r\n开启输出缓冲：ob_start();\r\n\r\n关闭输出缓冲：ob_end_clean();', 'normal', 978, b'0', b'1'),
(61, '第19章 示例---电子商务', 1520062650, 1520062650, 1019, '略', 'normal', 1068, b'0', b'1'),
(62, 'Hook技术及PHP实现', 1520324225, 1520324225, 1000, '目前很多框架和系统基本都加入了Hook功能，如：tp，levavel，wordpres等 。因此也在我的PHP框架加入了Hook模块。\r\n\r\n![PHP](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=187afb979e82d158af8f51e3e16372bd/2f738bd4b31c870168f8cf9f257f9e2f0708ff79.jpg \"PHP\")\r\n\r\n## 什么是Hook\r\n百度百科中的解释：\r\n> Hook是Windows中提供的一种用以替换DOS下“中断”的系统机制，中文译为“挂钩”或“钩子”。在对特定的系统事件进行hook后，一旦发生已hook事件，对该事件进行hook的程序就会收到系统的通知，这时程序就能在第一时间对该事件做出响应。\r\n\r\n虽然这段话说的是windows编程下的，但在PHP中也是类似的。\r\n我的理解是：Hook是一种的插件机制，通过在‘钩子’上挂载一些行为（函数或者类方法，也可以说是插件），最后在需要的地方可以通过这个‘钩子’来执行这些行为。\r\n这种技术很有用，特别是在框架中，框架中预先设计一些钩子放在合适的位置，开发者可以将自己需要的一些功能放置在这些钩子上，当系统运行到钩子放置的位置时，会自动执行这些行为。\r\n\r\n## PHP中的实现\r\n\r\n没看懂概念的可以看看下面代码，看看输出结果。\r\n\r\n### Hook.php\r\n\r\n\r\n```php\r\n<?php\r\n/**\r\n * @description Hook类\r\n * @author      luoluolzb\r\n */\r\n\r\nclass Hook\r\n{\r\n	/**\r\n	 * 钩子列表\r\n	 * @var array\r\n	 */\r\n	protected static $hooks = [];\r\n\r\n	/**\r\n	 * 批量导入钩子\r\n	 * @param  array $data\r\n	 */\r\n	public static function import($data)\r\n	{\r\n		foreach ($data as $name => $behaviors) {\r\n			self::register($name, $behaviors);\r\n		}\r\n	}\r\n\r\n    /**\r\n     * 在一个钩子下挂载一个或多个行为\r\n     * @param  string $name   钩子名称\r\n     * @param  string $plugin 行为类名\r\n     */\r\n	public static function register($name, $behaviors)\r\n	{\r\n		isset(self::$hooks[$name]) || self::$hooks[$name] = [];\r\n		if (is_array($behaviors)) {\r\n			foreach ($behaviors as $behavior) {\r\n				self::_register($name, $behavior);\r\n			}\r\n		} else {\r\n			self::_register($name, $behaviors);\r\n		}\r\n	}\r\n\r\n    /**\r\n     * 在一个钩子下挂载一个行为\r\n     * @param  string $name   钩子名称\r\n     * @param  string $plugin 行为类名\r\n     */\r\n	protected static function _register($name, $behavior)\r\n	{\r\n		if (!class_exists($behavior)) {\r\n			throw new RuntimeException(\"Hook \'{$behavior}\' Not Found!\'\");\r\n		}\r\n		self::$hooks[$name][] = new $behavior;\r\n	}\r\n\r\n	/**\r\n	 * 触发一个钩子下的行为(按注册顺序执行)\r\n	 * @param  string $name   钩子名称\r\n	 * @param  array  $params 传入参数\r\n	 * @return mixed\r\n	 */\r\n	public static function trigger($name, $params = [])\r\n	{\r\n		if (isset(self::$hooks[$name])) {\r\n			foreach (self::$hooks[$name] as &$behavior) {\r\n				call_user_func_array([$behavior, \'exec\'], $params);\r\n			}\r\n		}\r\n	}\r\n}\r\n\r\n\r\n```\r\n\r\n### test.php\r\n```php\r\n<?php\r\n\r\nrequire __DIR__ . \'/Hook.php\';\r\n\r\n//以下是三个行为插件\r\n//必须都实现exec函数\r\n//同一个钩子下的插件的exec函数参数定义需保持一致\r\n\r\nclass SayHello\r\n{\r\n	public function exec()\r\n	{\r\n		echo \'Hello\';\r\n		echo \"\\n\";\r\n	}\r\n}\r\n\r\nclass SayWorld\r\n{\r\n	public function exec()\r\n	{\r\n		echo \'World\';\r\n		echo \"\\n\";\r\n	}\r\n}\r\n\r\nclass SayName\r\n{\r\n	public function exec($name)\r\n	{\r\n		echo $name;\r\n		echo \"\\n\";\r\n	}\r\n}\r\n\r\n//挂载单个钩子\r\nHook::register(\'say1\', \'SayHello\');\r\nHook::register(\'say2\', \'SayWorld\');\r\nHook::register(\'say3\', [\'SayWorld\', \'SayHello\']);\r\n\r\n//挂载多个钩子\r\nHook::register(\'say4\', [\'SayName\', \'SayName\']);\r\n\r\n//批量导入多个钩子\r\nHook::import([\r\n	\'say2\' => [\'SayWorld\', \'SayHello\'],\r\n	\'say1\' => [\'SayHello\', \'SayWorld\'],\r\n]);\r\n\r\n//触发钩子\r\nHook::trigger(\'say1\');\r\nHook::trigger(\'say2\');\r\nHook::trigger(\'say3\');\r\nHook::trigger(\'say4\', [\'luoluolzb\']);\r\n\r\n```\r\n\r\n### 执行结果\r\n```\r\nHello\r\nHello\r\nWorld\r\nWorld\r\nWorld\r\nHello\r\nWorld\r\nHello\r\nluoluolzb\r\nluoluolzb\r\n```\r\n\r\n', 'normal', 1552, b'0', b'1'),
(63, 'phpstudy配置虚拟域名(Apache)', 1520491781, 1520491781, 1000, 'window下的phpstudy软件集成了php开发所需要的所有环境，对于php开发者来说，十分的方便。\r\n但是默认情况下我们是使用`localhost`访问我们的设计的网站，那么怎么在本机上配置一个域名，方便我们访问呢。\r\n![apache](https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=eccc4646793e6709be0042f903c69fb8/d1160924ab18972b9f4dbaabe0cd7b899e510a5f.jpg \"apache\")\r\n\r\n其实很简单，这里假设要配置的域名为`test.com`，分三个步骤：\r\n（注意：这里是Apache服务器的配置方法）\r\n\r\n## 修改系统hosts配置文件\r\n文件位置： `C:\\Windows\\System32\\drivers\\etc\\hosts`\r\n文件内容：\r\n```\r\n    # Copyright (c) 1993-2009 Microsoft Corp.\r\n    #\r\n    # This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\r\n    #\r\n    # This file contains the mappings of IP addresses to host names. Each\r\n    # entry should be kept on an individual line. The IP address should\r\n    # be placed in the first column followed by the corresponding host name.\r\n    # The IP address and the host name should be separated by at least one\r\n    # space.\r\n    #\r\n    # Additionally, comments (such as these) may be inserted on individual\r\n    # lines or following the machine name denoted by a \'#\' symbol.\r\n    #\r\n    # For example:\r\n    #\r\n    #      102.54.94.97     rhino.acme.com          # source server\r\n    #       38.25.63.10     x.acme.com              # x client host\r\n    \r\n    # localhost name resolution is handled within DNS itself.\r\n		127.0.0.1       localhost\r\n```\r\n我们只需要添加一行：\r\n    \r\n    	127.0.0.1       test.com\r\n\r\n## 修改apache配置文件\r\n文件位置：`..\\phpStudy\\PHPTutorial\\Apache\\conf\\httpd.conf`\r\n搜索：\r\n```\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n```\r\n去掉前面的注释符号`#`即可\r\n\r\n## 配置vhost.conf文件\r\n找到：`..\\phpStudy\\PHPTutorial\\Apache\\conf`\r\n增加配置如下：\r\n```xml\r\n<VirtualHost _default_:80>\r\n  DocumentRoot \"E:\\htdocs\\test.com\"\r\n  ServerName test.com\r\n  <Directory \"E:\\htdocs\\test.com\">\r\n    Options -Indexes +FollowSymLinks +ExecCGI\r\n    AllowOverride All\r\n    Order allow,deny\r\n    Allow from all\r\n    Require all granted\r\n  </Directory>\r\n</VirtualHost>\r\n```\r\n其中的`E:\\htdocs\\test.com`为网站位置，请自行修改。\r\n', 'normal', 1174, b'0', b'1'),
(65, 'wxPython学习资料', 1524239587, 1561274314, 1023, '![wxPython](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=b8ba7e2ae1f81a4c323fe49bb6430b3c/4034970a304e251f214328a6ad86c9177f3e533c.jpg \"wxPython\")\r\n\r\n最近开始学Python，学到了GUI部分，于是重拾了在C++学过一部分的wxWidgets，wxPython对wxWidgets进行了封装，提供了Python版本的接口。\r\n\r\n这里就不介绍wxPython了，分享一些学习资料给大家。\r\n\r\n## 相关网站\r\n\r\n官方网站：https://wxpython.org/\r\n\r\n官方文档：https://docs.wxpython.org/index.html \r\n\r\n英文教程： http://zetcode.com/wxpython/ (推荐)\r\n\r\n中文教程：https://www.yiibai.com/wxpython/\r\n\r\nwx wiki：https://wiki.wxpython.org/How%20to%20Learn%20wxPython?action=PackagePages\r\n\r\n## 资料及书籍\r\n《使用wxwidgets进行跨平台程序开发》(pdf 中文)\r\n\r\n《wxPython in Action》(pdf 中文)\r\n\r\nwxWidgets3.0 API文档 (chm 英文)\r\n\r\n以上资料的下载链接：https://pan.baidu.com/s/1MpP-JQYi7PTOXR1d6X2JlQ\r\n密码：kzkc\r\n\r\n官方Demo下载：https://sourceforge.net/projects/wxpython/files/\r\n\r\n建议大家多动手，多看例子。\r\n\r\n', 'normal', 1802, b'0', b'1'),
(67, 'jQuery插件：返回顶部功能', 1527328556, 1527328556, 1030, '返回顶部的功能相信很多人都不陌生，那么是到底它的原理是什么呢？是怎么实现的呢？\r\n答案就在下面的代码中：\r\n\r\n## jquery-backtop.js\r\n```javascript\r\n/**\r\n * jQuery插件：返回顶部\r\n * @author luoluolzb\r\n * @time   2018/5/26\r\n */\r\n(function(){\r\n    var jq = jQuery.noConflict();\r\n    var distance = window.screen.availHeight ? window.screen.availHeight / 3 : 300;\r\n    var $backtop = jq(\'#jquery-backtop\');\r\n\r\n    $backtop.click(function(e){\r\n        e.preventDefault();\r\n        jq(\'html,body\').animate({scrollTop: 0}, 350);\r\n    });\r\n\r\n    var UpdatePos = function(){\r\n        if (jq(document).scrollTop() > distance) {\r\n            $backtop.show();\r\n        } else {\r\n            $backtop.hide();\r\n        }\r\n    };\r\n\r\n    jq(document).scroll(UpdatePos);\r\n    jq(UpdatePos);\r\n})();\r\n```\r\n\r\n## 使用方法\r\n1. 先加载 jQuey 库，版本为1.7以上\r\n2. 加载 `jquery-backtop.js`\r\n3. 对要实现的元素（如按钮）指定id为`jquery-backTop`\r\n例子：\r\n```html\r\n<a href=\"#\" id=\"jquery-backtop\"/>返回顶部</a>\r\n```\r\n\r\n也许你也发现了，本站的返回顶部功能就是这么实现的 ^_^\r\n\r\n![jQuery](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=c9ae9db23101213fdb3e468e358e5db4/9f510fb30f2442a79d8d54ced943ad4bd01302dd.jpg \"jQuery\")\r\n', 'normal', 966, b'0', b'1'),
(68, 'jQuery插件：使footer自动固定在底部', 1527330221, 1527330221, 1030, '今天给大家分享一个实用的jQuery插件。\r\n这个插件可以将footer自动固定在页面底部，这在我们的页面不足一屏时非常有用。\r\n\r\n## jquery-fixfooter.js\r\n```javascript\r\n/**\r\n * jQuery插件：使footer自动固定在底部(页面不足全屏时)\r\n * @author luoluolzb\r\n * @time   2018/5/26\r\n */\r\n(function(){\r\n    //给head添加一个style(固定样式)\r\n    $(document.head).append($(\'<style>.jquery-fixfooter{position: fixed;bottom: 0;width:100%;}</style>\'));\r\n    var $footer = $(\"#jquery-fixfooter\");\r\n\r\n    var FixFooter = function(){\r\n        $footer.removeClass(\"jquery-fixfooter\");\r\n        var contentHeight = document.body.scrollHeight; //网页正文全文高度\r\n        var winHeight = window.innerHeight;             //可视窗口高度，不包括浏览器顶部工具栏\r\n        if(!(contentHeight > winHeight)){               //当网页正文高度小于可视窗口高度时\r\n            $footer.addClass(\"jquery-fixfooter\");       //为footer添加固定样式\r\n        }\r\n    };\r\n    \r\n    $(document.body).resize(FixFooter);\r\n    $(FixFooter);\r\n})();\r\n```\r\n\r\n## 使用方法\r\n1. 先加载 jQuey 库，版本为1.7以上\r\n2. 加载 `jquery-fixfooter.js`\r\n2. 加载 `jquery-resize.js`（后面有说明）\r\n3. 对要实现的元素（如按钮）指定id为`jquery-fixfooter`\r\n例子：\r\n```html\r\n<footer id=\"jquery-fixfooter\"/>Copyright 2018 luoluolzb.cn</footer>\r\n```\r\n\r\n## jquery-resize.js\r\n代码中的这一行：\r\n```javascript\r\n$(document.body).resize(FixFooter);\r\n```\r\n该`resize`方法非jQuery原始方法，这也是一个插件，作用是监听html元素的大小改变事件。\r\n\r\n代码来自 https://blog.csdn.net/z470259742/article/details/52174329\r\n\r\n```javascript\r\n/**\r\n * jQuery插件：扩展Jquery的resize方法\r\n * 作者：ZW\r\n * 时间：2016年6月24日 下午1:57:30\r\n * @param $\r\n * @link https://blog.csdn.net/z470259742/article/details/52174329\r\n */\r\n(function(){\r\n    /**\r\n    * 扩展resize方法(可支持window和非window对象)\r\n    * callback:回调函数(长宽发生变化时触发)\r\n    */\r\n    $.fn.resize = function(callback){\r\n        $(this).each(function (){\r\n            var resizeDom = this;\r\n            resizeDom.callback = callback;\r\n \r\n            // 确定绑定的对象是否是window\r\n            if (this == window) {\r\n                window.onresize = function () {\r\n                    resizeDom.callback();\r\n                };\r\n            } else {\r\n                $(this).divResize(callback);\r\n            }\r\n        });\r\n    };\r\n \r\n    /**\r\n     * 封装非Window对象的resize方法\r\n     * callback:回调函数(长宽发生变化时触发)\r\n     */\r\n    $.fn.divResize = function(callback){\r\n        var cycleTime = 250; // 定义监控大小变化的时间\r\n        if (callback == undefined || callback == null) {\r\n            return;\r\n        }\r\n        if (!(typeof callback == \"function\")) {\r\n            return;\r\n        }\r\n \r\n        $(this).each(function(){\r\n            var resizeDom = this;\r\n            resizeDom.data = {};\r\n            resizeDom.data.width = $(resizeDom).css(\"width\"); // 存放当前宽度\r\n            resizeDom.data.height = $(resizeDom).css(\"height\"); // 存放当前高度\r\n            resizeDom.callback = callback;\r\n            // 定义监控函数\r\n            var resizeMonitor = function () {\r\n                // 判断高度和宽度是否发生变化\r\n                if ($(resizeDom).css(\"width\") != resizeDom.data.width\r\n                    || $(resizeDom).css(\"height\") != resizeDom.data.height) {\r\n                    resizeDom.data.width = $(resizeDom).css(\"width\");\r\n                    resizeDom.data.height = $(resizeDom).css(\"height\");\r\n                    resizeDom.callback();\r\n                }\r\n                var callFunc = arguments.callee; // 获取本身函数\r\n                setTimeout(function () {\r\n                    callFunc();\r\n                }, cycleTime);\r\n            };\r\n            resizeMonitor();\r\n        });\r\n    };\r\n})();\r\n```\r\n\r\n![jQuery](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=c9ae9db23101213fdb3e468e358e5db4/9f510fb30f2442a79d8d54ced943ad4bd01302dd.jpg \"jQuery\")\r\n\r\n', 'normal', 1176, b'0', b'1'),
(69, 'Java知识点复习与总结（一）—— 基础知识', 1532761563, 1533000904, 1031, '因为个人原因，Java语法自己学了好几次，但每次由于各种原因，之后没有经常使用Java，语法又忘掉了，所以这次在这里总结一下Java知识点，以便以后进行复习。\r\n\r\n![Java](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=f5c6e8806959252da3171a020c9a032c/0df431adcbef76096709930527dda3cc7cd99e2d.jpg \"Java\")\r\n\r\n## Java环境搭建\r\n### 所需安装包\r\n开发JAVA所需要的安装包有：JDK、JRE、Eclipse\r\nJDK： 全称是 Java Devolpment Kit，即Java开发套件，包含了JRE和Java工具。\r\nJRE： 全称是 Java Runtime Environment，即Java运行环境，包含JVM（Java虚拟机）标准实现及Java核心类库。Java程序编译后需要JRE环境才能运行，因此Java是一种半编译半解释型语言。\r\nEclipse： 开发Java程序的IDE，为java开发提供了良好的界面和工具。\r\n\r\n另外Java API文档在开发中也是必不可少的。\r\n\r\n### 安装步骤：\r\n1. 去Oracle从官网下载JDK安装程序，因为JDK内置了JRE，所以只需下载JDK即可。\r\n2. 去Eclipse官网下载Eclipse安装包。\r\n3. 安装JDK和Eclipse\r\n4. 将JDK安装目录`\\java\\bin`和`\\java\\jre\\bin`加入到环境变量PATH。\r\n5. 测试Java环境，打开控制台，输入 `java -version`，显示内容类似如下说明成功安装。\r\n\r\n```shell\r\njava version \"1.8.0_171\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_171-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)\r\n```\r\n\r\n## 变量\r\nJava中变量主要分为两大类： 基本数据类型和对象类型。\r\n\r\n### 基本数据类型\r\n1. 整型： `byte short int long `\r\n2. 浮点型： `float double`\r\n3. 字符型： `char`\r\n4. 布尔型：  `boolean`\r\n\r\n#### 包装类\r\njava为了方便，为每种基本类型都提供了包装类，让这些类型具备了对象的属性，包装类型可以解决一些基本类型解决不了的问题。各类型对应的包装类如下：\r\n1. 整型： `byte short int long ` => `Byte Short Integer Long `\r\n2. 浮点型： `float double` => `Float Double`\r\n3. 字符型： `char` => `Character`\r\n4. 布尔型：  `boolean` => `Boolean`\r\n各种包装类型可以想基本类型一样进行使用，也可以赋值给基本类型（拆箱），基本类型也可以直接赋值给包装类（装箱）。\r\n\r\n### 对象类型\r\n对象类型有：数组Array、字符串String、类Class、接口interface、抽象类abstrct\r\n类型这些之后会详细说明。\r\n\r\n### 变量类型转换\r\n基本数据类型转换：高精度类型可以自动向低精度类型转换，反过来则需要强制类型转换。\r\n类类型转换： 父类可自动向子类转换（向上转型），反过来需要强制转换（向下转型）\r\n\r\n## 输入输出\r\n输出比较简单，一般使用 `System.out.println()` 和 `System.out.print()` 在控制台输出数据。前者输出后会自动换行。\r\n输入稍微麻烦一些，使用Java提供的`Scanner`类，参考如下代码：\r\n```java\r\nScanner scanner = new Scanner(System.in);  //初始化scanner\r\nString string = scanner.next();    //输入一个字符串\r\nint i = scanner.nextInt();         //输入一个整数\r\nString line = scanner.nextLine();  //输入一行字符串\r\n```\r\nScanner提供了各种nextType()用来输入对应基本类型数据，注意next()方法和nextLine()方法的区别，前者输入一个字符串，遇到空白字符就结束了，后者可以输入一行，可以输入空白字符。\r\n\r\n## 运算符\r\nJava运算符基本同C/C++，使用也一样，所以不多说明了。\r\n\r\n## 条件语句和循环语句\r\n条件语句if、else、switch和循环语句while、do-while、for用法同C/C++。\r\n不同的是JAVA增加了一个forEach循环，可以用来遍历像Array、List之类的序列。\r\n```java\r\nint[] nums = {1, 2, 3, 4, 5};\r\n//普通for循环\r\nfor(int i = 0; i < nums.length; ++ i) {\r\n	System.out.println(nums[i]);\r\n}\r\n//效果等价上面的循环\r\nfor(int num: nums) {\r\n	System.out.println(num);\r\n}\r\n```\r\n\r\n## 数组 Array\r\n### 声明数组\r\n声明数组有两种方式：\r\n```java\r\nDataType[] array;   // 首选的方法\r\nDataType array[];   // 同上面等价但不推荐\r\n```\r\n### 创建数组\r\n创建数组也有两种方式：\r\n```java\r\nDataType[] array = new DataType[length];     //使用new动态创建\r\nDataType[] array = {val1, val2, val3, ...};  //用列表的方式创建\r\n```\r\n\r\n### 数组也是对象\r\n数组在Java其实是一种类，它继承于Object。并增加了length属性和clone()方法。\r\n其中length属性可以用来获取数组长度，而clone可以复制（深拷贝）一个相同的数组。\r\n\r\n## 字符串 String\r\nString也是一种对象，继承与Object，用来在java中对字符串进行操作。\r\n\r\n### 创建方法:\r\n```java\r\n//静态赋值\r\nString str = \"luoluolzb\";\r\n\r\n//动态new创建\r\nString str = new String(\"luoluolzb\");\r\n\r\n//使用字符数组创建\r\nchar[] data = {\'a\', \'b\', \'c\'};\r\nString str = new String(data);\r\n```\r\n其他的构造方法参考api文档。\r\n\r\nString提供了丰富的方法来满足各种对字符串操作的需求。下面介绍几种常用的字符串操作方法。\r\n\r\n### 获取字符串长度\r\n使用length()方法可以获取字符串长度 。\r\n```java\r\nString s = \"abc123def\";\r\nSystem.out.println(s.length());  //输出 9\r\n```\r\n\r\n### 字符拼接\r\n在Java中，可以直接使用`+`号拼接两个字符串，或者拼接一个字符串和可以转换为字符串的类型(基本类型可以自动转换为String，定义了toString()方法的类也可以自动转换)。\r\n例如：\r\n```java\r\npublic class Test {\r\n	public String toString() {\r\n		return \"Test\";\r\n	}\r\n	public static void main(String[] args) {\r\n		String s1 = \"abc\", s2 = new String(\"123\");\r\n		//输出 abc123\r\n		System.out.println(s1 + s2);\r\n		//输出 abcdef\r\n		System.out.println(s1 + \"def\");\r\n		//输出 abc123\r\n		System.out.println(s1 + 123);\r\n		Test test = new Test();\r\n		//输出 abcTest\r\n		System.out.println(s1 + test);\r\n	}\r\n}\r\n```\r\n### 获取字符串中字符\r\n使用`int charAt(int index)`方法，获取字符串中的某个字符。\r\n```java\r\nString s = \"abc123def\";\r\n//输出 a\r\nSystem.out.println(s.charAt(0));\r\n//输出 3\r\nSystem.out.println(s.charAt(3));\r\n```\r\n### 字符串比较\r\n使用`boolean equal(Object o)`方法判断两个是否相等。\r\n使用`int compareTo(String s)`方法字典序比较两个字符串。\r\n```java\r\nString s = \"abc123def\";\r\n//输出 true\r\nSystem.out.println(s.equals(\"abc123def\"));\r\n//输出 48，大于0说明大于\"abc123456\"\r\nSystem.out.println(s.compareTo(\"abc123456\"));\r\n```\r\n\r\n### 字符串搜索\r\n使用`int indexOf(char ch)`在字符串中搜索字符。\r\n使用`int indexOf(String s)`在字符串中搜索字符串。\r\n```java\r\nString s = \"abc123def\";\r\n//输出 2\r\nSystem.out.println(s.indexOf(\'c\'));\r\n//输出 6\r\nSystem.out.println(s.indexOf(\"def\"));\r\n```\r\n\r\n### 字符截取\r\n使用 `String substring(int beginIndex)` 截取字符串中从beginIndex开始到末尾的子字符串。\r\n使用 `String substring(int beginIndex, int endIndex)` 截取字符串中从beginIndex到endIndex的子字符串。\r\n```java\r\nString s = \"abc123def\";\r\n//输出 123def\r\nSystem.out.println(s.substring(3));\r\n//输出  123\r\nSystem.out.println(s.substring(3, 6));\r\n```\r\n\r\nString 还有其他很多方法，参考API文档。\r\n\r\n## Math类\r\nMath是Java中提供数学计算的类，里面的方法都是静态方法，所以可以直接使用 `Math.method()` 方式进行调用。\r\nMath类主要提供的方法有：\r\n1. 三角函数： sin、cos、tan、asin、acos、atan\r\n2. 最大最小值： max、min\r\n3. 幂次方、开方： pow、sqrt\r\n4. 对数: exp、log、log10、log1p\r\n5. 近似取整： ceil、floor\r\n6. 随机数： random\r\n\r\n具体说明参考API文档。\r\n', 'normal', 596, b'0', b'1'),
(70, 'Java知识点复习与总结（二）—— 面向对象', 1532779904, 1533000842, 1031, '## Java 修饰符\r\n\r\n### 访问控制修饰符\r\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\r\n\r\n1. default (默认值）\r\n在同一包内可见，不使用任何修饰符。使用对象有：类、接口、变量、方法。\r\n2. private\r\n在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\r\n3. public\r\n对所有类可见。使用对象：类、接口、变量、方法\r\n4. protected \r\n对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\r\n\r\n| 修饰符  |  当前类 | 	同一包内  | 子孙类(同一包)  |  	子孙类(不同包) |  	其他包 |\r\n| :------------: | :------------: | :------------: | :------------: | :------------: | :------------: |\r\n| public  |  Y  |  Y | Y  | Y  | Y  |\r\n| protected  | Y  | Y  | Y  | Y/N  | N  |\r\n| default  | Y  | Y  | Y  | N  |  N |\r\n| private  | Y  | N  | N  | N  | N  |\r\n\r\n### 非访问修饰符\r\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\r\n\r\n`static` 修饰符，用来修饰类方法和类变量。\r\n\r\n`final` 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\r\n\r\n`abstract` 修饰符，用来创建抽象类和抽象方法。\r\n\r\n`synchronized` 和 `volatile` 修饰符，主要用于线程的编程。\r\n\r\n## 包(package)\r\nJava包这种机制是为了防止命名冲突，类似C++的命名空间。\r\n\r\n包使用package声明，一般写在文件第一行，命名方式一般使用反写的域名。例如：\r\n```java\r\npackage cn.luoluolzb.www;\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		//some code\r\n	}\r\n}\r\n```\r\n\r\n### 包的作用\r\n1. 把功能相似或相关的类或接口组织在同一个包中，方便类的组织和管理。\r\n2. 包也采用如同目录层次的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。\r\n3. 限定了访问权限，拥有包访问权限的类才能访问某个包中的类。\r\n\r\n### 导入包\r\n使用`import`导入一个包中的对象，其语法格式为：\r\n```java\r\nimport package1[.package2].(classname|*);\r\n```\r\n其中`*`可以导入一个包中所有的东西。\r\n\r\n## 类和对象\r\n使用`class`关键字定义类，类由方法和属性组成，一般会把属性隐藏（private），只提供对外必要的接口（封装）。\r\n\r\njava程序由类组成，一个文件中只能有一个public类，所以一般只在一个文件定义一个类，并且`文件名=pubic类名.java`。\r\n\r\n在类中可以使用this关键字访问类方法和变量。\r\n\r\n### 构造方法\r\n构造方法是一种特殊的方法，提供对象的初始化工作，只在对象实例化时被调用一次。\r\n\r\n一个类如果没有任何定义构造方法，系统会自动添加一个无参的空方法体的构造方法。但是如果定义了构造方法，系统不会自动生成无参构造方法。\r\n\r\n构造方法定义时不能有返回值，方法名要和类名称一致，其他和普通方法定义方法一样。\r\n\r\n一个类可以重载定义多个构造方法，在实例化时会根据参数选择合适的构造方法。\r\n\r\n例子：\r\n```java\r\npublic class Test {\r\n	public Test() {\r\n		System.out.println(\"Test Constructor1\");\r\n	}\r\n	\r\n	public Test(String s) {\r\n		System.out.println(\"Test Constructor2\");\r\n	}\r\n	\r\n	public static void main(String[] args) {\r\n		Test t1 = new Test();\r\n		Test t2 = new Test(\"\");\r\n	}\r\n}\r\n```\r\n输出：\r\n```shell\r\nTest Constructor1\r\nTest Constructor2\r\n```\r\n\r\n### 析构方法\r\nJava中有析构方法，但我们一般用不到它，因为Java有自动内存回收机制，无需手动来释放，在Java中对象销毁前会调用void finalize()方法。\r\n\r\n### 实例化类\r\n类实例化后就是对象，才能使用对象中非静态的成员。实例化一个类的方法：\r\n```java\r\nClassName class = new ClassName(Arguments);\r\n```\r\nnew 后面的方法实际上是类的构造方法，从这里能看出来为什么构造方法定义时没有返回值了，因为会它会自动返回对象的引用。\r\n\r\n### 静态变量和静态方法\r\nJava使用`static`声明静态成员，表示该成员是该类所有对象共有的，因此可以通过类名直接访问静态成员（当然也可以用对象访问，但推荐使用类名）。\r\n\r\n静态变量在类被定义时初始化，程序结束时被回收。\r\n\r\n静态成员可以在非静态方法和静态方法中使用。但是静态方法中只能使用静态成员。\r\n\r\n### 初始化块和静态初始化块\r\nJava中除了可以在构造方法中初始化变量外，也可以在初始化块中进行相关初始化工作。静态初始化块在程序执行后调用。\r\n\r\n定义方法：\r\n```java\r\npublic class Test {\r\n	String name;\r\n	static int count;\r\n	\r\n	//初始化块\r\n	{\r\n		name = \"luoluolzb\";\r\n	}\r\n	\r\n	//静态初始化块\r\n	static {\r\n		count = 0;\r\n	}\r\n	\r\n	public static void main(String[] args) {\r\n		Test t = new Test();\r\n		System.out.println(t.name);\r\n		System.out.println(Test.count);\r\n	}\r\n}\r\n```\r\n### 重载(Overload)\r\n重载即在一个类中可以使用重载定义多个相同方法，但需要方法的 *返回值类型* 或者 *参数列表* 不同。\r\n\r\n重载实现了体现了面对对象编程的多态性。\r\n\r\n重载例子：\r\n```java\r\npublic class Test {\r\n	public static int max(int a, int b) {\r\n		return a > b ? a : b;\r\n	}\r\n	\r\n	public static double max(double a, double b) {\r\n		return a > b ? a : b;\r\n	}\r\n	\r\n	public static void main(String[] args) {\r\n		System.out.println(max(3, 4));\r\n		System.out.println(max(3.14, 4.2));\r\n	}\r\n}\r\n```\r\n\r\n## 类的继承\r\n使用`extends`进行类的继承，Java中只能单继承，即只能有一个直接父类，但可以多层继承。\r\n\r\n子类可以继承父类的方法和属性，无需重复编写代码，使用final声明类可以防止类被继承。\r\n\r\n### 重写(Override)\r\n重写是指子类对父类的方法进行重新编写, 返回值和形参列表都不能改变。即外壳不变，核心重写！\r\n\r\n重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要改变父类的方法。\r\n\r\n在子类中仍然可以通过`super`关键字访问父类中被重写的方法和属性。\r\n\r\n继承的例子：\r\n```java\r\nclass A{\r\n	public String name;\r\n	\r\n	public A(String name) {\r\n		this.name = name;\r\n	}\r\n	\r\n	public String getName() {\r\n		return name;\r\n	}\r\n	\r\n	public void say() {\r\n		System.out.println(\"A:I am \" + name);\r\n	}\r\n}\r\n\r\nclass B extends A{\r\n	public B(String name) {\r\n		super(name);  //调用父类构造方法\r\n	}\r\n	\r\n	public void say() {  //重写say方法\r\n		System.out.println(\"B:I am \" + name);  //name继承的\r\n	}\r\n}\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		A a = new A(\"classA\");\r\n		a.say();\r\n		\r\n		B b = new B(\"classB\");\r\n		b.say();\r\n		System.out.println(b.getName());  //getName继承的\r\n	}\r\n}\r\n```\r\n\r\n## 抽象类\r\n抽象类使用 `abstract class` 定义，抽象类是一种特殊的类，它不能被实例化，但可以被子类继承。\r\n\r\n抽象类中可以定义普通的方法和属性，最重要的是可以通过 abstract 声明抽象方法，继承了抽象类的普通子类必须要重写抽象方法，否则子类需声明为抽象类。\r\n\r\n```java\r\nabstract class A{\r\n	public int a;  //普通熟悉\r\n	public void fun() {}  //普通方法\r\n	public abstract void say();  //抽象方法\r\n}\r\n\r\nclass B extends A{\r\n	@Override\r\n	public void say() {  //必须重写抽象方法\r\n		System.out.println(\"I am B.\");\r\n	}\r\n}\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		//A a = new A();  //语法错误，抽象类不能被实例化\r\n		B b = new B();\r\n		b.say();\r\n	}\r\n}\r\n```\r\n\r\n## 接口\r\n接口只是一个规范，可以保证继承该接口的子类都遵循这些规范。\r\n\r\n接口在Java中是一种抽象类型，不能被实例化，它是抽象方法的集合（只能声明方法），使用`interface`定义。\r\n\r\n类继承接口：一个类使用`implements`继承一个或多个接口，必须实现每个接口里面的声明的方法。\r\n\r\n接口继承接口：一个接口使用extends能继承另一个接口或多个接口，子接口继承父接口的方法。\r\n\r\n```java\r\n/* 文件名 : Animal.java */\r\ninterface Animal {\r\n   public void eat();\r\n   public void travel();\r\n}\r\n```\r\n\r\n```java\r\n/* 文件名 : MammalInt.java */\r\npublic class MammalInt implements Animal{\r\n \r\n   public void eat(){\r\n      System.out.println(\"Mammal eats\");\r\n   }\r\n \r\n   public void travel(){\r\n      System.out.println(\"Mammal travels\");\r\n   } \r\n \r\n   public int noOfLegs(){\r\n      return 0;\r\n   }\r\n \r\n   public static void main(String args[]){\r\n      MammalInt m = new MammalInt();\r\n      m.eat();\r\n      m.travel();\r\n   }\r\n}\r\n```\r\n\r\n## 抽象类和接口的区别\r\n抽象类是用来捕捉子类的通用特性的 。它不能被实例化，只能被用作子类的超类。抽象类是被用来创建继承层级里子类的模板。\r\n\r\n接口是抽象方法的集合。如果一个类实现了某个接口，那么它就继承了这个接口的抽象方法。这就像契约模式，如果实现了这个接口，那么就必须确保使用这些方法。接口只是一种形式，接口自身不能做任何事情。\r\n\r\n共同点如下：\r\n1. 都是上层的抽象层。\r\n2. 都不能被实例化\r\n3. 都能包含抽象的方法，这些抽象的方法用于描述类具备的功能，但是不比提供具体的实现。\r\n\r\n区别如下：\r\n1. 在抽象类中可以写非抽象的方法，从而避免在子类中重复书写他们，这样可以提高代码的复用性，这是抽象类的优势；接口中只能有抽象的方法。\r\n2. 一个类只能继承一个直接父类，这个父类可以是具体的类也可是抽象类；但是一个类可以实现多个接口\r\n\r\n什么时候使用抽象类和接口\r\n1. 如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。\r\n2. 如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个3. 类，但可以实现多个接口。因此你就可以使用接口来解决它。\r\n如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。\r\n\r\n参考资料:\r\n1. http://www.importnew.com/12399.html\r\n2. https://www.zhihu.com/question/20149818#answer-52437385\r\n\r\n![Java](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=f5c6e8806959252da3171a020c9a032c/0df431adcbef76096709930527dda3cc7cd99e2d.jpg \"Java\")\r\n\r\n', 'normal', 623, b'0', b'1'),
(71, 'Java设计模式之单例模式', 1532932035, 1532932091, 1031, '## 什么是单例模式\r\n有时我们只需要某个类只有一个对象，不希望有更多对象。比如数据连接对象只需要一个，\r\n这种设计方法叫单例模式。\r\n\r\n## 单例模式特点\r\n1. 单例类只有一个实例。\r\n2. 单例类必须自己创建唯一实例。\r\n3. 单例类必须能对外提供这个实例。\r\n\r\n## 单例模式与静态类\r\n了解了单例模式后，你一定会想到静态类。它和静态类很像，为何不干脆使用静态类？\r\n实际上，它们是有一些区别的：\r\n1. 单例类可以继承和被继承，方法可以被重载，而静态方法不可以。\r\n2. 静态方法中产生的对象会在执行后被释放，不会一直存在于内存中。\r\n3. 静态类会在第一次运行时初始化，单例模式可以有其他的选择，即可以延迟加载。\r\n4. 基于2， 3条，由于单例对象往往存在于DAO层（例如sessionFactory），如果反复的初始化和释放，则会占用很多资源，而使用单例模式将其常驻于内存可以更加节约资源。\r\n5. 静态方法有更高的访问效率。\r\n6. 单例模式很容易被测试。\r\n\r\n## 实现代码\r\n1. Singleton.java\r\n```java\r\nclass Singleton {\r\n		static private Singleton instance;\r\n\r\n		private Singleton() {\r\n\r\n		}\r\n\r\n		public static Singleton getInstance() {\r\n			if (instance == null) {\r\n				instance = new Singleton();\r\n			}\r\n			return instance;\r\n		}\r\n}\r\n```\r\n2. Test.java\r\n```java\r\npublic class Test {\r\n		public static void main(String[] args) {\r\n			Singleton s1 = Singleton.getInstance();\r\n			System.out.println(s1);\r\n\r\n			Singleton s2 = Singleton.getInstance();\r\n			System.out.println(s2);\r\n\r\n			Singleton s3 = Singleton.getInstance();\r\n			System.out.println(s3);\r\n		}\r\n}\r\n```\r\n\r\n3. 输出结果\r\n```\r\nSingleton@7852e922\r\nSingleton@7852e922\r\nSingleton@7852e922\r\n```\r\n三个对象输出的结果一样，说明实际只创建了一个对象。\r\n\r\n', 'normal', 584, b'0', b'1'),
(72, 'Java知识点复习与总结（三） —— 泛型和异常', 1532936924, 1533000791, 1031, '## 泛型\r\nJava泛型类似C++里面的模板，表示的是一种通用类型，这种技术可以减少因为类型导致的代码重复。\r\nJava系统类库中的有些容器类也是使用泛型进行定义的，如`List`、`Map`。\r\n\r\n### 泛型方法\r\n对方法可以使用泛型返回值和泛型参数，泛型方法的调用同普通方法，系统会根据传入参数自动填入泛型参数。\r\n\r\n泛型参数格式: `<T1, T2, ...>`，位置放在方法的返回值之前。\r\n\r\n\r\n例子：\r\n```java\r\npublic class Test {\r\n	//泛型方法printArray\r\n	public static <E> void printArray(E[] inputArray) {\r\n		//输出数组元素\r\n		for (E element : inputArray) {\r\n			System.out.printf(\"%s \", element);\r\n		}\r\n		System.out.println();\r\n	}\r\n\r\n	public static void main(String args[]) {\r\n		// 创建不同类型数组： Integer, Double 和 Character\r\n		Integer[] intArray = {1, 2, 3, 4, 5};\r\n		Double[] doubleArray = {1.1, 2.2, 3.3, 4.4};\r\n		Character[] charArray = {\'H\', \'E\', \'L\', \'L\', \'O\'};\r\n\r\n		System.out.println(\"整型数组元素为:\");\r\n		printArray(intArray); // 传递一个整型数组\r\n\r\n		System.out.println(\"双精度型数组元素为:\");\r\n		printArray(doubleArray); // 传递一个双精度型数组\r\n\r\n		System.out.println(\"字符型数组元素为:\");\r\n		printArray(charArray); // 传递一个字符型数组\r\n	}\r\n}\r\n```\r\n\r\n输出结果：\r\n```\r\n整型数组元素为:\r\n1 2 3 4 5 \r\n双精度型数组元素为:\r\n1.1 2.2 3.3 4.4 \r\n字符型数组元素为:\r\nH E L L O \r\n```\r\n\r\n注意：泛型参数必须是引用类型，所以在上面例子上没有使用基本类型int、double和char，而使用了对应的包装类。这也是包装类的一个重要应用。\r\n\r\n### 泛型类\r\n对类使用泛型参数，该参数在全类都有效，声明格式同泛型方法，位置放置于类名称之后。如`class List<T>`。\r\n\r\n泛型类的实例化和普通类不同，需要手动指定泛型参数，格式：\r\n```java\r\nClass<Type> class = new Class(Arguments);\r\n```\r\n其中Type填入具体类型，注意只能是引用类型，如`Integer`，不能只用基本类型。\r\n\r\n\r\n例子：\r\n```java\r\npublic class Test<T> {\r\n  private T t;\r\n \r\n  public void set(T t) {\r\n    this.t = t;\r\n  }\r\n \r\n  public T get() {\r\n    return t;\r\n  }\r\n \r\n  public static void main(String[] args) {\r\n    Test<Integer> i = new Test<Integer>();\r\n    Test<String> s = new Test<String>();\r\n \r\n    i.set(new Integer(10));\r\n    s.set(new String(\"luoluolzb\"));\r\n \r\n    System.out.println(i.get());\r\n    System.out.println(s.get());\r\n  }\r\n}\r\n```\r\n\r\n输出：\r\n```\r\n10\r\nluoluolzb\r\n```\r\n\r\n### 有界的类型参数\r\n可能有时候，你会想限制传入参数只能使用某个类及其子类类型，如： `<T extends Number>`，只接受Number或者Number子类类型。\r\n\r\n例子：\r\n```java\r\nclass A {}\r\nclass B extends A {}\r\nclass D<T extends B>{}\r\n\r\npublic class Test {\r\n  public static void main(String[] args) {\r\n	  //D<Integer> d1 = new D<Integer>();  //错误\r\n	  //D<A> d2 = new D<A>();  //错误\r\n	  D<B> d3 = new D<B>();    //正确\r\n  }\r\n}\r\n```\r\n\r\n### 类型通配符\r\n类型通配符是指在泛型参数中是使用`?`代替具体的类型参数。\r\n\r\n结合extends和super可以指定上下界：\r\n1. 限定上界：`<? extends T>` ， 表示该通配符所代表的类型是T类及其子类。\r\n2. 限定下界：`<? super T>` ， 表示该通配符所代表的类型是T类及其父类。\r\n\r\n注意：泛型类型通配符只能在方法的参数列表中使用。\r\n\r\n例子：\r\n```java\r\nclass A {}\r\nclass B extends A {}\r\nclass C extends B {}\r\nclass D<T> {}\r\n\r\npublic class Test {\r\n	static void f1(D<? extends B> b) {}  //只能传入B及其子类\r\n	static void f2(D<? super B> b) {}    //只能传入B及其父类\r\n\r\n	public static void main(String[] args) {\r\n		//f1(new D<A>());  //错误\r\n		f1(new D<B>());\r\n		f1(new D<C>());\r\n		\r\n		f2(new D<A>());\r\n		f2(new D<B>());\r\n		//f2(new D<C>());  //错误\r\n	}\r\n}\r\n```\r\n\r\n## 异常\r\n异常也是面对对象编程的重要技术之一。在Java中也毫无例外的提供了异常处理机制。\r\n\r\n语法：\r\n```\r\n	try {\r\n			throw ExceptObj;\r\n		} catch(ExceptionType1 e) {\r\n			//异常处理代码\r\n		} catch(ExceptionType2 e) {\r\n			//异常处理代码\r\n		} finally {\r\n			//总会被调用的代码\r\n		}\r\n```\r\n使用 throw 抛出一个异常对象（实际上throw可以抛出任何类型），随后的多个 catch 可以捕获类型相同的异常（父类也可以捕获到子类的异常对象）。\r\n最后的 finally 的代码块总会被执行，无论有没有抛出异常。\r\n\r\ntry 语句块不可以独立存在，必须与 catch 或者 finally 块同存。cath可以有一个或多个，finally可以有也可以没有。\r\n\r\n### 定义异常类\r\n\r\nJava类库内置了很多异常类，具体可以查看API，如果开发中找不到合适的，也可以自己写一个异常类，自己写的异常类一般要继承Exception或它子类。\r\n\r\nJava内置异常类：\r\n![异常类关系图](http://incdn1.b0.upaiyun.com/2017/09/994bd262fec543853cd99fe680e857cc.png \"异常类关系图\")\r\n\r\n### thows声明\r\nthows 看起来和 throw 很像，这个多余的 s 指的 `statement` —— 声明，用来在修饰函数可能会抛出一个异常。\r\n\r\n如果一个方法没有捕获异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法的尾部。\r\n\r\n例如：\r\n```java\r\npublic class Test {\r\n	public static void main(String[] args) throws Exception {\r\n		throw new Exception();\r\n	}\r\n}\r\n```\r\n', 'normal', 639, b'0', b'1'),
(73, 'Java知识点复习与总结（四）—— 多线程', 1533001441, 1533019790, 1031, '\r\n## 什么是线程\r\n线程(Thread)相对于进程(Process)更轻，有时被称为轻量进程(Lightweight Process，LWP），是程序执行流的最小单元。线程切换起来更快速，因此现在使用进程作为资源分配的基本单位，将线程作为CPU调度的基本单位。\r\n\r\n线程实体 = 程序(Code) + 数据(Data) + 线程控制块(TCB)\r\n\r\n线程在的生命周期中有几个状态：创建、就绪、运行、阻塞、终止。\r\n\r\n## 创建线程\r\n在单个程序中同时运行多个线程完成不同的工作，称为多线程。在Java中创建线程有三种方式：\r\n\r\n### 继承 Thread 类\r\njava.lang 包提供了 Thread 类，继承 Thread 类并重写 `run()` 方法就能创建一个线程类。\r\n\r\n例子（来自jdk文档）：\r\n```java\r\nclass PrimeThread extends Thread {\r\n	long minPrime;\r\n	\r\n	public PrimeThread(long minPrime) {\r\n		this.minPrime = minPrime;\r\n	}\r\n	\r\n	@Override\r\n	public void run() {\r\n		// compute primes larger than minPrime\r\n	}\r\n}\r\n```\r\n然后使用下面的代码创建创建一个线程并启动。\r\n```java\r\nPrimeThread p = new PrimeThread(143);\r\np.start();\r\n```\r\n\r\n每个线程都有一个标识名，多个线程可以同名。如果线程创建时没有指定标识名，就会为其生成一个新名称。\r\n\r\n### 实现Runnable接口\r\n创建线程的另一种方法是实现 Runnable 接口的类。然后实现 run() 方法。然后可以分配该类的实例，在创建 Thread 时作为一个参数来传递并启动。采用这种风格的同一个例子如下所示（来自jdk文档）： \r\n\r\n```java\r\nclass PrimeRun implements Runnable {\r\n	long minPrime;\r\n	PrimeRun(long minPrime) {\r\n		this.minPrime = minPrime;\r\n	}\r\n\r\n	public void run() {\r\n		// compute primes larger than minPrime\r\n	}\r\n}\r\n```\r\n\r\n然后，下列代码会创建并启动一个线程： \r\n```java\r\nPrimeRun p = new PrimeRun(143);\r\nnew Thread(p).start();\r\n```\r\n\r\n实际上Thread也是通过实现Runnable接口实现的。Thread类源码如下：\r\n```java\r\npublic class Thread implements Runnable {\r\n	...\r\n}\r\n```\r\n\r\n### 使用 Callable 和 Future 创建线程\r\n使用以上两种方法的创建线程运行后不能有返回值，但使用Callable 和 Future创建的线程可以有返回值。\r\n\r\nCallable是类似于Runnable的接口，源码如下：\r\n```java\r\npublic interface Callable<V> {\r\n    V call() throws Exception;\r\n}\r\n```\r\n\r\n例子：\r\n```java\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.FutureTask;\r\n\r\nclass MyCallable implements Callable<Integer> {\r\n	@Override\r\n	public Integer call() throws Exception {\r\n		int sum = 0;\r\n		for (int i = 1; i <= 100; i ++) {\r\n			sum += i;\r\n		}\r\n		return sum;\r\n	}\r\n}\r\n\r\npublic class TestThread {\r\n	public static void main(String[] args) {\r\n		\r\n		//使用Callable方式创建线程，需要FutureTask类的支持，用于接收运算结果，可以使用泛型指定返回值的类型\r\n		FutureTask<Integer> task = new FutureTask<Integer>(new MyCallable());\r\n		\r\n		//启动线程\r\n		new Thread(task).start();\r\n\r\n		// 接收运算结果\r\n		// 只有当该线程执行完毕后才会获取到运算结果，等同于闭锁的效果\r\n		try {\r\n			int sum = task.get();\r\n			System.out.println(\"sum is \" + sum);\r\n		} catch (InterruptedException e) {\r\n			e.printStackTrace();\r\n		} catch (ExecutionException e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n}\r\n```\r\n\r\n## 线程控制\r\n从上面的创建方法中，可以看到实际上各种方法都使用了Thread类创建线程，因此线程的控制也是通过调用Thread的方法实现的。下面就来介绍一下这些方法。\r\n\r\n### 等待线程结束\r\n等待一个线程结束使用join方法，它有三种形式：\r\n\r\n|  方法 | 说明  |\r\n| ------------ | ------------ |\r\n|  void join()  |  等待该线程终止 |\r\n|  void join(long millis) | 等待该线程终止的时间最长为 millis 毫秒  |\r\n|void join(long millis, int nanos) | 等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒 |\r\n\r\n三个join方法功能都是一样的，就是等待一个线程终止，调用该方法的进程会进入阻塞状态，直到被等待的线程执行结束后止才会被唤醒。\r\n\r\n注意join方法可能会抛出 `InterruptedException` 异常，因此需要加上try-catch或throws声明。\r\n\r\n利用join方法我们可以修改Callable 和 Future中的例子，将接受结果部分修改为：\r\n```java\r\n		// 接收运算结果\r\n		// 只有当该线程执行完毕后才会获取到运算结果，等同于闭锁的效果\r\n		try {\r\n			thread.join();  //等待计算完成\r\n			try {\r\n				int sum = task.get();\r\n				System.out.println(\"sum is \" + sum);\r\n			} catch (InterruptedException e) {\r\n				e.printStackTrace();\r\n			} catch (ExecutionException e) {\r\n				e.printStackTrace();\r\n			}\r\n		} catch (InterruptedException e1) {\r\n			// TODO Auto-generated catch block\r\n			e1.printStackTrace();\r\n		}\r\n```\r\n\r\n### 暂停线程\r\n使用sleep方法可以让当前正在执行的线程暂停一段时间，并进入阻塞状态。sleep()方法有两种重载形式：\r\n\r\n| 方法  | 说明  |\r\n| ------------ | ------------ |\r\n| static void sleep(long millis)  |  在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响  |\r\n|  static void sleep(long millis, int nanos)  |  在指定的毫秒数加指定的纳秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响  |\r\n\r\n### 线程让步\r\nyield方法可以暂停当前正在执行的线程对象，并执行其他线程（有点像循环里面的continue语句，只是暂停，一下但并不会结束掉）。\r\n\r\n| 方法  | 说明  |\r\n| ------------ | ------------ |\r\n| static void yield()  | 暂停当前正在执行的线程对象，并执行其他线程  |\r\n\r\n### 守护线程\r\n与守护线程相关的是setDaemon方法：\r\n\r\n| 方法  | 说明  |\r\n| ------------ | ------------ |\r\n| void setDaemon(boolean on)  | 将该线程标记为守护线程或用户线程  |\r\n\r\n这里有两个名词：守护线程和用户线程。他们是什么呢？\r\n\r\n在Java中，分为两种线程：用户线程和守护线程。\r\n\r\n守护线程是指在后台默默守护用户线程的一种线程，它在后台为提供用户线程一些通用服务，比如垃圾回收线程就是一个很称职的守护者。并且守护线程有一个特点：当一个进程中所有的用户线程结束时，守护线程也会自动结束，程序也就终止了。因为没有了被守护者，守护线程也就没有工作可做了，也就没有继续运行了。\r\n\r\n### 中断线程\r\n与中断线程相关的方法有三个：\r\n\r\n| 方法  | 说明  |\r\n| ------------ | ------------ |\r\n| boolean isInterrupted()  | 测试一个线程中断标志是否为true |\r\n| void interrupt() | 将中断标志设置为true，并不会真正中断  |\r\n| static boolean interrupted()  | 测试当前运行的线程中断标志是否为true |\r\n\r\n从API可以看出，Thread并没有提供真正的中断方法，而只是在类内部维护了一个标志，那么我们如何才能实现真正的中断呢，Java推荐了线程run方法的一种写法实现中断：\r\n\r\n```java\r\npublic void run() {\r\n    while (Thread.currentThread().isInterrupted() == false) {\r\n        if (/*任务完成*/) {\r\n            Thread.currentThread().interrupt();\r\n        } else {\r\n            // do something ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n意思就是每次完成一个小任务后去检测中断标志，如果中断标志位true则结束循环，退出run方法。\r\n\r\n（未完待续）\r\n', 'normal', 731, b'0', b'1');
INSERT INTO `lb_article` (`id`, `title`, `create_time`, `update_time`, `category_id`, `content`, `status`, `view_count`, `is_top`, `is_original`) VALUES
(74, 'vue.js 学习笔记', 1549456723, 1556787016, 1030, '## 安装\r\n下载 vue.js 或者 vue.min.js 文件，在需要的html文档中使用。下面是 vue.js 的`hello world`例子。\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<meta charset=\"utf-8\" />\r\n	<title>vue.js Hello World</title>\r\n	<script src=\"vue.min.js\"></script>\r\n</head>\r\n<body>\r\n	<div id=\"app\">\r\n		<p>{{ message }}</p>\r\n	</div>\r\n	<script>\r\nvar vm = new Vue({\r\n	\'el\': \'#app\',\r\n	\'data\': {\r\n		\'message\': \'Hello World!\',\r\n	}\r\n});\r\n	</script>\r\n</body>\r\n</html>\r\n```\r\n\r\n其中Vue()为vue组件的构造函数，传入一个配置对象，其中：\r\n- el 为要构造的组件，使用css选择器。\r\n- data 为组件中的各变量的值。\r\n- `{{ message }}` 为文本插值，文本值可以在data.message中赋值，之后可以在控制台通过 	`vm.message = newValue` 动态修改，页面也将会自动更新。\r\n\r\n\r\n## 插值\r\nvue.js 有两种插值方式，一种是文本插值，另外一种是原始html插值。\r\n\r\n### 文本插值\r\n```html\r\n<span>{{ message }}</span>\r\n```\r\nmessage的值若是html将不会以html方式显示，而是显示其html文本内容。\r\n\r\n### 原始html插值\r\n```html\r\n<span v-html=\"rawHtml\"></span>\r\n```\r\nvue.js中带`v-`开头的属性称为指令，`v-html=\"rawHtml\"`的作用就是将`rawHtml`的值用html方式显示出来。 比如,若是rawHtml为`<b>Hello</b>`，Hello将会以粗体的方式显示在页面上。\r\n\r\n除了上面两种插值外，还可以在双大括号内直接使用js表达式，如：\r\n`{{ message.split(\'\').reverse().join(\'\') }}`\r\n这将会逆转 `message` 文本。要注意的是，表达式末尾不要加分号，只能使用表达式，而不能是多条语句，也不能是`if`、`while`等结构。\r\n可以使用普通js表达式，例如\r\n`{{ alert(\'vue.js\') }}`\r\n会在浏览器弹出 \'vue.js\' 。\r\n\r\n\r\n## 指令\r\nvue.js中标签带`v-`开头的属性称为指令。\r\n\r\n### 指令参数\r\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如：\r\n```html\r\n<a v-bind:href=\"url\">...</a>\r\n```\r\n其中href即为`v-bind`参数。\r\n\r\n### 指令修饰符\r\n修饰符是以半角句号`.`指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，`.prevent` 修饰符告诉 v-on 指令对于触发的事件调用 `event.preventDefault()`。\r\n```html\r\n<form v-on:submit.prevent=\"onSubmit\">...</form>\r\n```\r\n\r\n\r\n## v-bind 指令\r\n`v-bind`指令带有一个参数，这个参数表示要绑定的html属性名，参数值可以变量，这样可以就进行动态绑定属性了。\r\n例如：\r\n```html\r\n<div v-bind:class=\"boxClass\"></div>\r\n```\r\n之后就可以使用 `vm.boxClass` 动态修改该div的class的了。\r\n`v-bind` 常用参数有 `style`、`class`、`id`、`href`、`disabled` 等。\r\nvue.js为v-bind提供了缩写，上面的例子可以写成：\r\n```html\r\n<div :class=\"boxClass\"></div>\r\n```\r\n即`v-bind:`缩写为`:`即可。\r\n\r\n\r\n## v-on 指令\r\n`v-on`指令用于监听 DOM 事件：\r\n```html\r\n<a v-on:click=\"doSomething\">...</a>\r\n```\r\n其中`doSomething`可以是js代码，也可以一个方法名，这个方法名需要在Vue()构造方法的参数 `methods` 对象中定义：\r\n```html\r\nvar vm = new Vue({\r\n  el: \'#app\',\r\n  // 在 `methods` 对象中定义方法\r\n  methods: {\r\n    doSomething: function (event) {\r\n      // some code\r\n    }\r\n  }\r\n});\r\n```\r\nvue.js为v-on提供了缩写，上面的例子可以写成：\r\n```html\r\n<a @click=\"doSomething\">...</a>\r\n```\r\n即`v-on:`缩写为`@`即可。\r\n\r\n\r\n## 计算属性\r\n计算属性是 vue 中可以使用一个函数计算后返回的属性值。\r\n```html\r\n<div id=\"app\">\r\n	<p>Origin: {{ message }}</p>\r\n	<p>Reversed: {{ reverseMessage }}</p>\r\n</div>\r\n```\r\n```javascript\r\nvar vm = new Vue({\r\n	el: \'#app\',\r\n	data: {\r\n		\'message\': \'luoluolzb\',\r\n	},\r\n	computed: {\r\n		//reverseMessage getter\r\n		reverseMessage: function() {\r\n			return this.message.split(\'\').reverse().join(\'\');\r\n		},\r\n});\r\n```\r\n这个例子中显示的结果为：\r\n```html\r\n<div id=\"app\">\r\n	<p>Origin: luoluolzb</p>\r\n	<p>Reversed: bzlouloul</p>\r\n</div>\r\n```\r\n其中`reverseMessage`函数的返回值会插入到`{{ reverseMessage }}`位置。 计算属性不同于普通方法，计算属性是有缓存的，只有在依赖的`message`值改变时，`reverseMessage`函数才会重新执行。\r\n\r\n\r\n## 侦听器\r\n侦听器可以在数据发生变化的时候执行某些操作，从而动态响应数据的变化。\r\n```html\r\n<div id=\"app\">\r\n	<input type=\"text\" v-model=\"expr\" placeholder=\"输入表达式\" /> = {{ result }}\r\n	<div style=\"display: none;\">{{ expr }}</div>\r\n</div>\r\n```\r\n```js\r\nvar vm = new Vue({\r\n	el: \'#app\',\r\n	data: {\r\n		\'expr\': \'\',\r\n		\'result\': \'\',\r\n	},\r\n	watch: {\r\n		//expr listener\r\n		expr: function(){\r\n			this.result = eval(this.expr);\r\n		}\r\n	},\r\n});\r\n```\r\n这个例子是一个简易的计算器，`v-model`指令可以将表单值与一个vue变量绑定在一起。 `watch`中的函数在制定的变量值改变时将会被执行。\r\n\r\n计算属性和监听器的使用比较：watch（异步场景，事件监听），computed（数据联动）\r\n\r\n\r\n## 条件渲染\r\nvue提供了条件渲染功能，在需要的时候在显示某些内容。\r\n```html\r\n<span v-if=\"s == 1\">\r\n	s = 1\r\n</span>\r\n<span v-else-if=\"s == 2\">\r\n	s = 2\r\n</span>\r\n<span v-else>\r\n	s > 2\r\n</span>\r\n```\r\n这个例子会根据变量`s`的值动态选择一个`span`标签显示出来。其中`v-else-if`和`v-else`是可选的。\r\n另外，若在`template`标签上使用条件渲染，将不会显示此标签。\r\n\r\n此外，`v-show`指令也可以用于是否显示，不同的是`v-show`的显示是否是通过`display`实现的。\r\n\r\n\r\n## 循环渲染\r\n`v-for`指令提供了循环渲染功能：\r\n```html\r\n<ul>\r\n  <li v-for=\"item in items\">\r\n    {{ item.message }}\r\n  </li>\r\n</ul>\r\n```\r\n其中`items`是要遍历的数组或对象，在标签中可以使用`item`访问数组元素。\r\n对于数组可以添加一个参数来获取序号：\r\n```html\r\n<ul>\r\n  <li v-for=\"(item, index) in items\">\r\n    {{ item.message }}\r\n  </li>\r\n</ul>\r\n```\r\n对于对象还有两个参数来获取属性名和序号：\r\n```html\r\n<ul>\r\n  <li v-for=\"(item, key, index) in items\">\r\n    {{ item.message }}\r\n  </li>\r\n</ul>\r\n```\r\n此外，v-for也可以用于在`template`标签上，从而作为容器包裹多个标签。\r\n\r\n\r\n## 组件\r\n\r\n### 组件注册\r\n使用`Vue.component()`函数注册全局vue组件：\r\n```js\r\nVue.component(\'blog-title\', {\r\n  props: [\'title\'],\r\n  template: \'<h3>{{ title }}</h3>\',\r\n});\r\n```\r\n其中`props`数组声明这些属性可以从父组件中传入，`template`为组件的html内容，注意必须用一个顶级标签包裹起来(每个组件必须只有一个根元素)。\r\n初始化对象中还可以写 `data`、`methods`、`computed`、`watch` 等属性。\r\n\r\n以上定义了 `blog-title` 组件后，使用以下方式进行使用：\r\n```html\r\n<blog-title title=\"article title\"></blog-title>\r\n```\r\n或者用动态绑定的方法传入：\r\n```html\r\n<blog-title v-bind:title=\"title\"></blog-title>\r\n```\r\n\r\n### 插槽\r\n当我们需要在自定义组件内传入内容时，组件怎么获取到这些内容呢：\r\n```html\r\n<slot-test>测试插槽</slot-test>\r\n```\r\n```js\r\nVue.component(\'slot-test\', {\r\n	template: \'<b><slot></slot></b>\',\r\n});\r\n```\r\n这个例子中的渲染结果为：\r\n```html\r\n<b>测试插槽</b>\r\n```\r\n说明了在组件定义时候可以使用`slot`标签使用传入的内容。\r\n\r\n![VueJs](https://cn.vuejs.org/images/logo.png \"VueJs\")\r\n\r\n', 'normal', 303, b'0', b'1'),
(76, 'jQuery扩展（插件）编写方法', 1556785009, 1557065815, 1030, '点进来的同学一定都用过jQuery，它提供了很多实用、简单、便捷的方法。jQuery虽然好用，但有时候需要定制自己所需要的功能时候，应该去怎么扩展jQuery呢，今天作者就带大家一起总结一下jQuery插件编写方法。\r\n\r\n扩展jQuery有两种不同的方式：\r\n1. 扩展jQuery对象的方法，使用 `$.fn.extend`\r\n2. 扩展jQuery本身的方法，使用 `$.extend`\r\n\r\n![jQuery Pugin](https://jquery-plugins.net/image/jquery-plugins-logo.svg \"jQuery Pugin\")\r\n\r\n## 扩展jQuery对象的方法\r\njQuery对象的方法就是使用选择器选中元素后可以使用的方法，比如`click`方法。使用 `$.extend` 可以扩展对象方法。\r\njQuery扩展大多数属于此类型。\r\n\r\n例子：改变元素背景颜色的扩展方法\r\n```javascript\r\n$.fn.extend({\r\n	setBackColor: function(color){\r\n		return this.css(\'background-color\', color || \'#ffffff\');\r\n	},\r\n});\r\n```\r\n说明：\r\n1. `$.fn.extend` 传入一个对象，每个键值对即为扩充的方法名和方法体, 这意味着你可以一次扩展多个方法；\r\n2. 扩展方法内，如`setBackColor` 中，`this`为包裹当前元素的jQuery对象；\r\n3. 扩展方法应该返回 `this`，以便可以提供链式操作。\r\n\r\n使用方法：\r\n这类插件使用和使用jQuery内置的对象方法一样，先选择元素再调用扩展方法：\r\n```javascript\r\n$(\'h1\').setBackColor(\'#ff0000\');\r\n```\r\n这会将h1元素的背景颜色修改为红色。\r\n\r\n## 扩展jQuery本身的方法\r\njQuery本身的方法指的是jquery的全局方法（静态方法），不需要选择元素就可以使用，比如 `$.ajax` 方法。\r\n\r\n例子：jquery弹窗扩展\r\n```javascript\r\n$.extend({\r\n	alert: function(text){\r\n		return alert(text);\r\n	},\r\n	confirm: function(text){\r\n		return confirm(text);\r\n	},\r\n});\r\n```\r\n说明：\r\n1. `$.extend` 传入一个对象，每个键值对即为扩充的方法名和方法体, 这意味着你可以一次扩展多个方法；\r\n2. 扩展方法内，`this` 为jQuery函数本身；\r\n3. 不需要返回`this`，根据需要返回所需要的内容。\r\n\r\n使用方法：\r\n这类插件使用和就和使用其他jQuery全局方法一样：\r\n```javascript\r\n$.alert(\'jquery alert ok!\');\r\n$.confirm(\'jquery confirm ok!\');\r\n```\r\n\r\n## 插件编写经验\r\n\r\n### 使用 $.extend 设置默认参数\r\n$.extend 还有一种使用方法，当给 $.extend 传递多个参数时候，例如：\r\n```javascript\r\nvar options = $.extend({\r\n	width: 150,\r\n	height: 100,\r\n}, options);\r\n```\r\n后面参数相同中的值会依次覆盖掉前面的参数值。`$.extend`的详细说明： [戳这里查看](http://jquery.cuishifeng.cn/jQuery.extend.html \"$.extend说明\")\r\n\r\n所以在编写插件时，需要传入一些参数，可以这样写：\r\n```javascript\r\n$.fn.extend({\r\n	setSize: function(options){\r\n		options = $.extend({\r\n			width: \'100px\',\r\n			height: \'100px\',\r\n		}, options);\r\n		this.css(\'width\', options.width);\r\n		this.css(\'height\', options.height);\r\n		return this;\r\n	},\r\n});\r\n```\r\n这个例子扩展了一个修改元素尺寸的方法，需要传入两个参数`width`和`height`，使用上面的这种方法。不仅不需要记住参数顺序，而且可以设置默认参数，\r\n\r\n### 将代码放在匿名函数中\r\n将插件所有的相关代码放在一个匿名函数中，可以防止污染全局命名空间。\r\n\r\n例子：改写上面的修改元素尺寸插件\r\n```javascript\r\n/**\r\n * jquery修改元素尺寸插件\r\n * @author  luoluolzb\r\n * @version 1.0\r\n * @datetime 2019/5/2\r\n */\r\n;(function($){\r\n	function setSize(options){\r\n		options = $.extend({\r\n			width: \'100px\',\r\n			height: \'100px\',\r\n		}, options);\r\n		this.css(\'width\', options.width);\r\n		this.css(\'height\', options.height);\r\n		return this;\r\n	};\r\n\r\n	$.fn.extend({\r\n		\'setSize\': setSize,\r\n	});\r\n})(jQuery);\r\n```\r\n说明：\r\n1. 首行分号为了防止引入的其他库的代码末尾没有分号导致的问题；\r\n2. 可以在匿名函数中定义一些辅助函数和变量给插件函数使用，这样外部无法访问，也不会导致名称冲突。\r\n\r\n### 插件文件命名方法\r\n一般应该将插件放在一个单独js文件中，命名方法可以使用：`jquery.pluginName.js`\r\n\r\n例如，上面的修改元素尺寸插件应该命名为：`jquery.setSize.js`，压缩后：`jquery.setSize.min.js`\r\n\r\n## 作者写的一些jQuery插件\r\n\r\n### 图片轮播插件：jquery-lqImgCarousel\r\n\r\n项目地址：https://github.com/luoluolzb/jquery-plugin/tree/master/jquery-lqImgCarousel\r\n\r\n### 图片滚动插件：jquery-lqImgSlider\r\n\r\n项目地址：https://github.com/luoluolzb/jquery-plugin/tree/master/jquery-lqImgSlider\r\n\r\n### 文件上传插件：jquery-lqUploader\r\n\r\n项目地址：https://github.com/luoluolzb/jquery-plugin/tree/master/lqUploader\r\n', 'normal', 146, b'0', b'1'),
(77, 'jQuery阻止表单提交的两种方法', 1556903468, 1556903468, 1030, '有时候我们需要阻止表单，比如用户输入的信息没有验证通过时。\r\njQuery阻止表单有两个方法：\r\n\r\n## 监听form的submit事件\r\n用jQuery监听表单元素的submit事件，在事件处理函数中返回`false`即可。\r\n例子：\r\n```html\r\n	<form>\r\n		<input type=\"text\" name=\"user\" />\r\n		<input type=\"password\" name=\"password\" />\r\n		<button>submit</button>\r\n	</form>\r\n```\r\n\r\n```javascript\r\n	$(\'form\').submit(function(event) {\r\n		return false;\r\n	});\r\n```\r\n\r\n## 监听button的click事件\r\n用jQuery监听提交按钮的click事件，在事件处理函数中阻止事件的默认行为。\r\n\r\n例子：\r\nhtml代码和上面相同，JavaScript代码如下：\r\n```javascript\r\n	$(\'button\').click(function(event) {\r\n		event.preventDefault();  //阻止按钮点击后的默认行为\r\n		return false;\r\n	});\r\n```\r\n', 'normal', 124, b'0', b'1'),
(79, 'Windows下使用VirtualBox安装Linux虚拟机', 1559215599, 1559233366, 1032, '学习Linux的前提是你需要一个Linux系统，那么怎么获取一个Linux系统呢？有几个方法：\r\n1. 在你的电脑上直接安装Linux系统\r\n2. 在云服务器提供商处购买Linux服务器\r\n3. 在现有的系统（如Windows）上安装Linux虚拟机\r\n\r\n今天我们就来学习一下怎么在Windows上安装Linux虚拟机，这里我们使用VirtualBox软件，当然VMware也可以安装Linux虚拟机，操作是类似的。\r\n\r\n我们分为几步进行：\r\n1. 准备VirtualBox安装包和Linux系统镜像\r\n2. 安装VirtualBox\r\n3. 创建Linux虚拟机\r\n4. 启动Linux虚拟机\r\n\r\n## 准备VirtualBox安装包和Linux系统镜像\r\n### 下载VirtualBox\r\n打开VirtualBox官网：[https://www.virtualbox.org/](https://www.virtualbox.org/ \"https://www.virtualbox.org/\")\r\n\r\n![VirtualBox首页](/uploads/artimgs/79/825f9ee60c95391b754f768434cc0aba.jpg \"VirtualBox首页\")\r\n\r\n然后点击首页的那张大大的Download图片。页面跳转后，然后找到下面的下载列表：\r\n\r\n![download](/uploads/artimgs/79/d7e1043d58cc93dd12b66a75387a526d.jpg \"download\")\r\n\r\n点击 `Windows hosts` 进行下载。\r\n\r\n### 下载Linux系统镜像\r\n打开阿里镜像站：[https://opsx.alibaba.com/mirror](https://opsx.alibaba.com/mirror \"https://opsx.alibaba.com/mirror\")\r\n\r\n点击右边 `下载OS镜像` 按钮，然后选择一个镜像进行下载，我选择的是：\r\n\r\n![下载OS镜像](/uploads/artimgs/79/fa51d74ceb131f68782988761c382125.jpg \"下载OS镜像\")\r\n\r\n\r\n`Minimal`的是简洁版的意思，只包含系统必备的软件。centos系统的安装版本：\r\n- NetInstall ：网络安装版，根据你选择的从网络上下载安装\r\n- Minimal ： 纯净版，只包含系统必要软件（只有字符操作界面）\r\n- LiveKDE ： KDE桌面版，包含KDE桌面的版本（有图形操作界面）\r\n- LiveGNOME ： GNOME桌面版，包含GNOME桌面的版本（有图形操作界面）\r\n- Everything ： 集成所有软件，可根据需要选择安装哪些软件\r\n- DVD ：DVD安装版，包含桌面和常用软件，一般选择这个\r\n\r\n\r\n## 安装VirtualBox\r\n这步比较简单，打开下载的VirtualBox安装包进行安装。根据需要配置选项，或者全部选择默认即可。\r\n\r\n## 创建Linux虚拟机\r\n打开VirtualBox，点击菜单：`控制 > 新建`，出现下列界面：\r\n\r\n![新建虚拟机](/uploads/artimgs/79/a33e5f416f9949378374bb0c2d02c62c.jpg \"新建虚拟机\")\r\n\r\n版本填写：Other Linux（64-bit），选择64位时需要BIOS已经开启虚拟化。（开启虚拟化请自行查阅资料）\r\n\r\n接下来的设置根据需要修改，也可以一直点击 `下一步(N)`。\r\n\r\n## 启动Linux虚拟机\r\n创建完成以后，第一次启动系统我们需要进行一些配置。打开VirtualBox，在主界面左边，找到刚创建的虚拟机，点击\"启动\"。直到出现下面界面：\r\n\r\n![选择启动盘](/uploads/artimgs/79/7ed7be2c246258f05ad92e943873a66f.jpg \"选择启动盘\")\r\n\r\n点击对话框中的文件图标，选择之前下载好的Linux系统镜像，然后点击“启动”。启动后出现：\r\n\r\n![安装centos](/uploads/artimgs/79/e317b8c9d6067346993caeece72063bb.jpg \"安装centos\")\r\n\r\n选择`install centos 7`回车。\r\n\r\n等待系统安装，下面开始进行系统的初始化设置：\r\n\r\n![选择语言](/uploads/artimgs/79/23a09ba279ec484d6aa0c7962d7fd1ec.jpg \"选择语言\")\r\n\r\n我们可以选择中文，简体中文（中国）：\r\n\r\n![选择简体中文](/uploads/artimgs/79/4219e47ffce7771e4df9799ea43c7324.jpg \"选择简体中文\")\r\n\r\n选好后点击“继续”按钮，等待出现下面的界面：\r\n\r\n![选择安装源](/uploads/artimgs/79/2c2c7a77ba6738020df25395fa91e3c1.jpg \"选择安装源\")\r\n\r\n点击 `软件 > 安装源`，点击里面的磁盘后，点击“完成”按钮（点两次）。\r\n\r\n然后自动回到主界面，点击 `系统 > 网络和主机名称`，打开网络开关，然后点击`完成`按钮（点两次）。\r\n\r\n回到主界面，点击开始安装，下一步需要配置root用户的密码，点击 `用户设置 > ROOT密码`：\r\n\r\n![设置ROOT密码](/uploads/artimgs/79/221dcc49609bff7e1d1ad5bfd84c2214.jpg \"设置ROOT密码\")\r\n\r\n输入两次密码后，点击“完成”按钮（两次）。回到主界面，然后等待系统安装完毕即可。该过程可能有点长，请耐心等待，安装完毕后点击`重启`按钮。\r\n\r\n### 启动测试\r\n重启虚拟机，输入root账号和密码后。若出现下面图片所示界面则说明Linux虚拟机安装好了，接下来就可以愉快的学习Linux了^_^。\r\n\r\n![Linux登陆](/uploads/artimgs/79/4e9beaa4608d39966708b75311afe084.jpg \"Linux登陆\")\r\n\r\n\r\n\r\n', 'normal', 144, b'0', b'1'),
(85, 'PHP文件的BOM头的坑', 1559307978, 1559307978, 1000, '昨晚将网站迁移到了新服务器上，使用了最新的PHP7.2，安装好后发现登陆页面的验证码无法显示。开始时怀疑是GD库没有安装好，所以重新安装了PHP，但是重新安装了后还是没有解决。折腾了一晚上还是没找到问题。\r\n\r\n今天终于找到了问题所在，原因是在使用Xftp上传了代码后，我直接使用了xftp的“记事本编辑”服务器上面的配置文件，而记事本默认保存utf8文件带有BOM头，所以在加载文件的时候，将BOM头输出了，导致图片不能正常显示。\r\n\r\n重新上传了一下代码，问题解决了。\r\n\r\n我在之前的一个项目中也翻过这个错误，这里记录一下这个坑，防止下次再犯。', 'normal', 88, b'0', b'1'),
(86, '使用Xshell和Xftp连接VirtualBox下的Linux虚拟机', 1559395033, 1561274279, 1032, '由于VirtualBox自带的Linux虚拟机的界面不够友好，字符界面无法上下移动，字体也不好看，也不能复制粘贴内容等。因此我尝试找到使用xshell连接虚拟机的办法，这里记录一下。\r\n\r\n## 免费使用xshell和xftp\r\n先来说说怎么免费使用xshell和xftp，之前不知道方法，导致每次使用一段时间后就不能用了。\r\n\r\n要免费使用xshell和xftp我们需要选择免费授权，先打开官网授权网页：[https://www.netsarang.com/zh/xshell-download/](https://www.netsarang.com/zh/xshell-download/ \"https://www.netsarang.com/zh/xshell-download/\")\r\n\r\n填好信息后，xshell和xftp免费版的下载连接会发送到你的邮箱里，我们下载后安装即可，这样就可以免费使用了。\r\n\r\n注意免费版有限制：只供非商业用途。\r\n\r\n## 设置端口转发\r\n我们打开VirtualBox，选择要连接的虚拟机，点击设置，选择“网络”，然后点击“高级”，再点击“端口转发”按钮：\r\n\r\n![打开端口转发](/uploads/artimgs/86/433381174303277440bad494fae71b14.jpg \"打开端口转发\")\r\n\r\n下面我设置端口转发规则，我这里设置了两个：\r\n- 本机的9022端口 转发到 虚拟机的22端口，用于xshell和xftp使用ssh连接虚拟机；\r\n- 本机的9080端口 转发到 虚拟机的80端口，用于在虚拟机上搭建网站。\r\n\r\n![设置端口转发规则](/uploads/artimgs/86/fcd24637549aa4618ccd3c09a77b79e9.jpg \"设置端口转发规则\")\r\n\r\n## 连接虚拟机\r\n这步大家应该能猜到怎么做了，主机IP填127.0.0.1，端口填9022即可。\r\n\r\n由于xshell和xftp都是使用ssh协议连接，所以两个的连接设置是一样的。\r\n', 'normal', 129, b'0', b'1'),
(87, 'Linux下安装Nginx', 1559974265, 1560173037, 1034, '![nginx](https://www.runoob.com/wp-content/uploads/2015/01/nginx.jpg \"nginx\")\r\n作为一个PHPer，不能只会使用集成开发环境，比如windows下的phpstudy、wxampp，Linux下的LNMP、LAMP、OneinStack等。还得具备单独安装每个软件的能力，今天来学习一下怎么在Linux安装Nginx。安装步骤：\r\n1. 安装编译工具及库文件\r\n2. 安装 Nginx\r\n3. Nginx 测试\r\n\r\n## 安装编译工具及库文件\r\n安装Nginx需要一些工具和库，可以使用`yum`安装：\r\n```shell\r\nyum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel pcre\r\n```\r\n\r\n## 安装 Nginx\r\n去 Nginx 官网：[http://nginx.org/en/download.html](http://nginx.org/en/download.html \"http://nginx.org/en/download.html\")，找你需要的版本的下载链接。\r\n\r\n### 下载 Nginx 源码：\r\n```shell\r\ncd /usr/local/src\r\n\r\nwget http://nginx.org/download/nginx-1.16.0.tar.gz\r\n```\r\n\r\n### 解压 Nginx 源码：\r\n```shell\r\ntar -zxvf nginx-1.16.0.tar.gz\r\n```\r\n\r\n### 设置编译选项\r\n```shell\r\ncd nginx-1.16.0\r\n\r\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\r\n```\r\n\r\n### 编译安装 Nginx\r\n```shell\r\nmake && make install\r\n```\r\n\r\n## Nginx 测试\r\n### 查看 Nginx 版本：\r\n```shell\r\n/usr/local/nginx/sbin/nginx -v\r\n```\r\n\r\n### 启动 Nginx：\r\n```shell\r\n/usr/local/nginx/sbin/nginx\r\n```\r\n\r\n### 查看 Nginx 进程：\r\n```shell\r\nps -aux | grep nginx\r\n```\r\n如果看到类似下图进程，则说明nginx已经启动\r\n\r\n![nginx进程](/uploads/artimgs/87/a9be615bdb5eecbb7a512bdb425be542.png \"nginx进程\")\r\n\r\n## 关闭防火墙\r\n在虚拟机下运行可能需要先关闭防火墙或者开启防火墙80端口，虚拟机的话可以直接关闭防火墙：\r\n```shell\r\n#停止firewall\r\nsystemctl stop firewalld.service \r\n\r\n#禁止firewall开机启动\r\nsystemctl disable firewalld.service \r\n\r\n#查看默认防火墙状态（关闭后显示not running，开启后显示running）\r\nfirewall-cmd --state\r\n```\r\n\r\n## 打开页面\r\n浏览器打开页面，显示如下图则说明nginx安装成功：\r\n\r\n![welcome nginx](/uploads/artimgs/87/7af0db3e901b6555b27361987a63f635.png \"welcome nginx\")\r\n\r\n我这里设置了虚拟机端口转发，将本机9180端口转发到了虚拟机的80端口。端口转发方法具体查看：[使用xshell和xftp连接VirtualBox下的Linux虚拟机](http://www.luoluolzb.cn/article/86 \"使用xshell和xftp连接VirtualBox下的Linux虚拟机\")\r\n\r\n非虚拟机环境，直接在浏览器打开 `127.0.0.1` 即可。\r\n\r\n## 参考文章：\r\n[https://www.runoob.com/linux/nginx-install-setup.html](https://www.runoob.com/linux/nginx-install-setup.html)\r\n\r\n[https://www.cnblogs.com/wyd168/p/6636529.html](https://www.cnblogs.com/wyd168/p/6636529.html)\r\n', 'normal', 91, b'0', b'1'),
(88, 'Nginx控制命令', 1559978832, 1560131980, 1034, '## Nginx 进程模型\r\nNginx进程分为两种：主进程（master process）和工人进程（worker process）。\r\n\r\nmaster进程只有一个，负责是读取解析配置和管理worker进程。worker进程一般有多个，它负责处理http请求，一个worker进程可以同时处理多个http请求。\r\n\r\nworker进程数量 和 一个worker进程能保持处理的http连接数量可以在配置文件里面设置。将worker进程数量设置为可用的cpu核数将是一个好办法。\r\n\r\nNginx 进程模型图：\r\n![Nginx 进程模型图](/uploads/artimgs/88/40eaa1142158316877cfb1bd5cb4d066.png \"Nginx 进程模型图\")\r\n\r\n## 常用 Nginx 控制命令\r\n官网文档：[http://nginx.org/en/docs/switches.html](http://nginx.org/en/docs/switches.html \"http://nginx.org/en/docs/switches.html\")\r\n\r\n### 查看 Nginx 版本、编译器版本和配置参数。\r\n```shell\r\nnginx -V\r\n```\r\n\r\n### 测试配置文件语法\r\n```shell\r\nnginx -t\r\n```\r\n\r\n### 启动 Nginx\r\n```shell\r\nnginx\r\n```\r\n\r\n### 加载配置文件重新启动\r\n```shell\r\nnginx -s reload\r\n```\r\n优雅地关闭并重新启动，`-s`参数表示`signal`。\r\n\r\n### 关闭 Nginx\r\n快速关闭，不管现在有没有在工作的worker\r\n```shell\r\nnginx -s stop\r\n```\r\n\r\n优雅的关闭，等待worker处理所有请求后再关闭\r\n```shell\r\nnginx -s quit\r\n```\r\n\r\n### 重新打开日志文件\r\n```shell\r\nnginx -s reopen\r\n```\r\n这个命令一般在你修改了配置文件中的日志文件的位置或者文件名后使用。\r\n\r\n## 使用信号控制 Nginx\r\n也可以不直接使用控制命令而使用信号来控制 Nginx，具体参考：[http://nginx.org/en/docs/control.html](http://nginx.org/en/docs/control.html \"http://nginx.org/en/docs/control.html\")\r\n\r\n', 'normal', 79, b'0', b'1'),
(89, '了解Nginx配置文件', 1560005300, 1560005617, 1034, '要学习Nginx，了解配置文件是必须的。\r\n\r\n## 配置文件结构\r\nNginx配置文件由指令组成。指令分为简单指令和块指令。简单的指令由名称和参数组成，以空格分隔，以分号结尾(;)。块指令具有与简单指令相同的结构，但它以一组由大括号包围的附加指令结束，而不是分号({和})。如果块指令可以在大括号中包含其他指令，则称为上下文(例如：events, http, server，location等)。\r\n\r\n配置文件中放置在任何上下文之外的指令称为主上下文。`#`表示单行注释。配置结构示意如下：\r\n\r\n```\r\n# 全局块\r\n...\r\n\r\n# events块\r\nevents {\r\n	...\r\n}\r\n\r\n# http块\r\nhttp {\r\n	# http全局块\r\n	...\r\n	# server块\r\n	server {\r\n		# server全局块\r\n		....\r\n		# location块\r\n		location ... {\r\n			...\r\n		}\r\n		...\r\n	}\r\n	...\r\n}\r\n\r\n```\r\n各模块功能：\r\n- 全局块：配置影响nginx全局的指令。一般有:运行nginx的用户组，nginx进程pid路径，日志路径，配置文件引入，允许的worker进程数等。\r\n- events块：配置影响nginx与用户的网络连接。一般有:每个worker进程的最大连接数，事件驱动模型处理连接请求类型，是否允许同时接受多个网路连接，是否开启多个网络连接序列化等。\r\n- http块：内部可包含多个server块，每个server即是一个虚拟主机。http全局块一般的指令有：配置代理，缓存，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\r\n- server块：虚拟主机相关配置，如端口号，域名，根目录，默认文件等。\r\n- location：配置路由。\r\n\r\n## 配置文件示例\r\n```\r\n# nginx进程使用的用户\r\nuser nobody nobody;\r\n\r\n# 允许的worker进程数量\r\nworker_processes  1;\r\n\r\n# error日志配置, notice和info表示日志等级，依次为：debug|info|notice|warn|error|crit|alert|emerg\r\n#error_log  logs/error.log;\r\n#error_log  logs/error.log  notice;\r\n#error_log  logs/error.log  info;\r\n\r\n# 进程pid文件\r\n#pid        logs/nginx.pid;\r\n\r\n\r\n# 网络连接相关\r\nevents {\r\n	# 每个worker进程可处理的连接数量\r\n    worker_connections  1024;\r\n	\r\n	# 设置网路连接序列化，防止惊群现象发生，默认为on\r\n	accept_mutex on;\r\n	\r\n	# 设置一个进程是否同时接受多个网络连接，默认为off\r\n    multi_accept on;\r\n    \r\n	# 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\r\n	#use epoll;      \r\n}\r\n\r\n# http块\r\nhttp {\r\n	# 引入文件mime类型表\r\n    include       mime.types;\r\n    \r\n	# 默认返回的mime类型\r\n	default_type  application/octet-stream;\r\n	\r\n	# 定义一种日志格式，main为格式名称\r\n    log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'\r\n                      \'$status $body_bytes_sent \"$http_referer\" \'\r\n                      \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';\r\n	\r\n	# 全局访问日志配置，mian为要使用的格式名称\r\n    access_log  logs/access.log  main;\r\n	\r\n	# 是否开启sendfile\r\n    sendfile        on;\r\n    \r\n	# 连接超时时间，单位秒\r\n    keepalive_timeout  65;\r\n	\r\n	# 是否开启gzip\r\n    gzip  on;\r\n	\r\n	# server块\r\n    server {\r\n		# 监听的端口号\r\n        listen       80;\r\n        \r\n		# 监听的地址或者域名，多个之间用空格隔开\r\n		server_name  localhost;\r\n		\r\n		# 编码设置\r\n        #charset koi8-r;\r\n		\r\n		# 单独访问日志配置\r\n        #access_log  logs/localhost.access.log  main;\r\n		\r\n		# location块\r\n        location / {\r\n			# 根目录\r\n            root   html;\r\n            \r\n			# 默认页面\r\n			index  index.html index.htm;\r\n        }\r\n		\r\n		# 错误页面配置，404为错误码\r\n        #error_page  404              /404.html;\r\n\r\n        # 错误页面配置\r\n        error_page   500 502 503 504  /50x.html;\r\n    }\r\n}\r\n\r\n```\r\n具体的指令说明可以查看文章末尾的参考文档：nginx核心模块。\r\n\r\n## 参考文章：\r\n- [Beginner\'s Guide](http://nginx.org/en/docs/beginners_guide.html \"Beginner\'s Guide\")\r\n- [Nginx配置详解](https://www.cnblogs.com/knowledgesea/p/5175711.html \"Nginx配置详解\")\r\n- [nginx核心模块参考文档](http://nginx.org/en/docs/ngx_core_module.html \"nginx核心模块参考文档\")\r\n\r\n', 'normal', 104, b'0', b'1'),
(90, 'Nginx配置PHP运行环境', 1560064242, 1560180650, 1034, 'nginx和php都安装好了，那么怎么让nginx处理请求时转给php去处理呢，今天来学学如何nginx配置php。\r\n\r\n## 配置 PHP\r\n\r\n```\r\n    # 配置PHP\r\n    location ~ \\.php/?.*$ {\r\n        # 设置php-cgi\r\n        fastcgi_pass 127.0.0.1:9000;\r\n        # Linux用下行代替上行可以提升性能\r\n        # fastcgi_pass  unix:/tmp/php-cgi.sock;\r\n        \r\n        # 该指令设置的文件名会被附加到URI的前面，并且中间添加一个\'/\'\r\n        # 值保存于$fastcgi_script_name\r\n        fastcgi_index index.php;\r\n        \r\n        # 加载PHP环境参数，这些参数会被php的超全局数组$_SERVER获取\r\n        include fastcgi_params;\r\n		\r\n		fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;\r\n		fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\r\n	}\r\n```\r\n\r\n## 配置 PATH_INFO\r\n```\r\n    # 配置PHP\r\n    location ~ \\.php/?.*$ {\r\n        # 设置php-cgi\r\n        fastcgi_pass 127.0.0.1:9000;\r\n        # Linux用下行代替上行可以提升性能\r\n        # fastcgi_pass  unix:/tmp/php-cgi.sock;\r\n        \r\n        # 该指令设置的文件名会被附加到URI的前面，并且中间添加一个\'/\'\r\n        # 值保存于$fastcgi_script_name\r\n        fastcgi_index index.php;\r\n        \r\n        # 加载PHP环境参数，这些参数会被php的超全局数组$_SERVER获取\r\n        include fastcgi_params;\r\n\r\n        # 配置pathinfo\r\n        set $fastcgi_script_name2 $fastcgi_script_name;\r\n        if ($fastcgi_script_name ~ \"^(.+\\.php)(/.+)$\") {\r\n            set $fastcgi_script_name2 $1;\r\n            set $path_info $2;\r\n        }\r\n        fastcgi_param   PATH_INFO         $path_info;\r\n        fastcgi_param   SCRIPT_FILENAME   $document_root$fastcgi_script_name2;\r\n        fastcgi_param   SCRIPT_NAME       $fastcgi_script_name2;\r\n    }\r\n```\r\n\r\n## 配置单一入口\r\n```\r\n    # 配置单一入口\r\n    location / {\r\n        if (!-e $request_filename) {\r\n            rewrite ^/(.*)$ /index.php/$1 last;\r\n            break;\r\n        }\r\n    }\r\n```\r\n\r\n## Nginx 配置 PHP 模板\r\n把上面的结合在一起就可以配置一个完整的php执行环境了。\r\n如果需要单一入口，删掉下面的38~43行前面得注释符`#`即可。\r\n```\r\nserver {\r\n    # 监听端口\r\n    listen       80;\r\n    # 监听地址或域名，多个之间用空格隔开\r\n    server_name  localhost;\r\n    \r\n    # 网站根目录\r\n    root  /web/path;\r\n    # 默认页\r\n    index index.php index.html;\r\n\r\n    # 配置PHP\r\n    location ~ \\.php/?.*$ {\r\n        # 设置php-cgi\r\n        fastcgi_pass 127.0.0.1:9000;\r\n        # Linux用下行代替上行可以提升性能\r\n        # fastcgi_pass  unix:/tmp/php-cgi.sock;\r\n        \r\n        # 该指令设置的文件名会被附加到URI的前面，并且中间添加一个\'/\'\r\n        # 值保存于$fastcgi_script_name\r\n        fastcgi_index index.php;\r\n        \r\n        # 加载PHP环境参数，这些参数会被php的超全局数组$_SERVER获取\r\n        include fastcgi_params;\r\n\r\n        # 配置pathinfo\r\n        set $fastcgi_script_name2 $fastcgi_script_name;\r\n        if ($fastcgi_script_name ~ \"^(.+\\.php)(/.+)$\") {\r\n            set $fastcgi_script_name2 $1;\r\n            set $path_info $2;\r\n        }\r\n        fastcgi_param   PATH_INFO         $path_info;\r\n        fastcgi_param   SCRIPT_FILENAME   $document_root$fastcgi_script_name2;\r\n        fastcgi_param   SCRIPT_NAME       $fastcgi_script_name2;\r\n    }\r\n\r\n    # 配置单一入口\r\n    #location / {\r\n    #    if (!-e $request_filename) {\r\n    #       rewrite ^/(.*)$ /index.php/$1 last;\r\n    #       break;\r\n    #    }\r\n    #}\r\n\r\n    # 设置图片缓存时间\r\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {\r\n        expires  30d;  # 有效期30天\r\n    }\r\n\r\n    # 设置js和css缓存时间\r\n    location ~ .*\\.(js|css)?$ {\r\n        expires  12h;  # 有效期12小时\r\n    }\r\n\r\n    # 允许访问.well-known目录(用于https)\r\n    location ~ /.well-known {\r\n        allow  all;\r\n    }\r\n\r\n    # 禁止访问其他隐藏文件(夹)\r\n    location ~ /\\.{\r\n        deny  all;\r\n    }\r\n    \r\n    # 设置访问日志文件\r\n    access_log  logs/localhost.access.log;\r\n    # 设置错误日志文件\r\n    error_log  logs/localhost.error.log;\r\n}\r\n```\r\n', 'normal', 98, b'0', b'1'),
(91, 'Linux下安装PHP', 1560082985, 1562567973, 1000, '![php-logo](/uploads/artimgs/91/50e9cecc453db4c1c6b369bef04dc52f.png \"php-logo\")\r\n\r\nLinux系统下安装php是通过源码编译安装的，今天就来学习一下。\r\n\r\n## 下载 PHP 源码并解压\r\n进入官网：[https://www.php.net/downloads.php](https://www.php.net/downloads.php \"https://www.php.net/downloads.php\")，找到你想要版本的源码的下载链接，我这里选择的是7.2.19。\r\n\r\n### 下载源码\r\n```shell\r\ncd /usr/local/src\r\n\r\nwget https://www.php.net/distributions/php-7.2.19.tar.gz\r\n```\r\n\r\n### 解压源码：\r\n```shell\r\ntar -zxvf php-7.2.19.tar.gz\r\n```\r\n\r\n## 配置编译选项\r\n### 先进入源码目录\r\n```shell\r\ncd php-7.2.19\r\n```\r\n\r\n### 安装所需要的工具和库\r\n```shell\r\nyum -y install gcc openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libxslt-devel libxml2 libxml2-devel epel-release libmcrypt-devel libzip libzip-devel\r\n```\r\n\r\n### 配置编译选项并安装\r\n```shell\r\n./configure \\\r\n--prefix=/usr/local/php \\\r\n--exec-prefix=/usr/local/php \\\r\n--with-config-file-path=/usr/local/php/etc \\\r\n\\\r\n--with-curl \\\r\n--with-freetype-dir \\\r\n--with-gd \\\r\n--with-gettext \\\r\n--with-iconv-dir \\\r\n--with-kerberos \\\r\n--with-libdir=lib64 \\\r\n--with-libxml-dir \\\r\n--with-mysqli \\\r\n--with-openssl \\\r\n--with-pcre-regex \\\r\n--with-pdo-mysql \\\r\n--with-pear \\\r\n--with-png-dir \\\r\n--with-jpeg-dir\\\r\n--with-xmlrpc \\\r\n--with-xsl \\\r\n--with-zlib \\\r\n\\\r\n--enable-fpm \\\r\n--enable-bcmath \\\r\n--enable-libxml \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-mbstring \\\r\n--enable-opcache \\\r\n--enable-pcntl \\\r\n--enable-shmop \\\r\n--enable-soap \\\r\n--enable-sockets \\\r\n--enable-sysvsem \\\r\n--enable-xml \\\r\n--enable-zip\r\n```\r\n执行过程中如果发现缺少某些库导致出错，可以先使用 `yum`安装这些库，然后再执行上面的配置命名。\r\n\r\n具体的编译选项可以运行下面的命令查看：\r\n```shell\r\n./configure --help\r\n```\r\n要查看中文的翻译可以参考：[php编译选项的翻译(./configure --help)](http://www.luoluolzb.cn/article/92 \"php编译选项的翻译(./configure --help)\")\r\n\r\n### 编译安装\r\n```shell\r\nmake && make install\r\n```\r\n\r\n### 创建配置文件\r\n```shell\r\ncp php.ini-production /usr/local/php/etc/php.ini\r\n\r\ncp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\r\n\r\ncp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\r\n```\r\n\r\n## 测试 PHP\r\n### 查看版本\r\n执行：\r\n```shell\r\n/usr/local/php/bin/php -v\r\n```\r\n输出类似如下：\r\n```\r\nPHP 7.2.19 (cli) (built: Jun 10 2019 13:00:07) ( NTS )\r\nCopyright (c) 1997-2018 The PHP Group\r\nZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\r\n```\r\n\r\n### 启动 PHP-FPM\r\n```shell\r\n/usr/local/php/sbin/php-fpm\r\n```\r\n\r\n### 查看 PHP-FPM 进程\r\n执行：\r\n```shell\r\nps -aux | grep php\r\n```\r\n输出类似如下：\r\n```\r\nroot     25864  0.0  0.6 198088  9448 pts/0    S+   00:41   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)\r\nnobody   25865  0.0  0.5 198284  7944 pts/0    S+   00:41   0:00 php-fpm: pool www\r\nnobody   25866  0.0  0.5 198284  8124 pts/0    S+   00:41   0:00 php-fpm: pool www\r\nroot     25897  0.0  0.0 110288   908 pts/1    R+   00:53   0:00 grep --color=auto php\r\n```\r\n\r\n\r\n## Nginx 配置 PHP\r\n这里不多说了，可查看我的另外一篇文章：[Nginx配置PHP运行环境](http://www.luoluolzb.cn/article/90 \"Nginx配置PHP运行环境\")\r\n\r\n## 参考文章\r\n1. [php手册 - Unix 系统下的 Nginx 1.4.x 安装和配置 PHP](https://www.php.net/manual/zh/install.unix.nginx.php \"php手册 - Unix 系统下的 Nginx 1.4.x 安装和配置 PHP\")\r\n2. [Linux下源码安装PHP](https://blog.csdn.net/qq_23033339/article/details/80864684 \"Linux下源码安装PHP\")\r\n', 'normal', 85, b'0', b'1'),
(92, 'PHP编译选项的翻译(./configure --help)', 1560090423, 1561274243, 1000, '安装php时执行 `./configure --help` 的文档翻译，了解一下有助于更好的安装PHP。\r\n\r\n下面是 php7.3.6 的编译选项的翻译，在编译PHP时候可以参考一下：\r\n\r\n```\r\n`configure\' 这个包配置适应多种系统。\r\n\r\n用法: ./configure [选项]... [VAR=VALUE]...\r\n\r\n指定环境变量 (例如, CC, CFLAGS...), 他们指定为 VAR=VALUE.  见下文描述的一些有用的变量。\r\n\r\n在括号中指定选项的默认值。\r\n\r\n配置:\r\n  -h, --help              显示这个帮助并退出\r\n      --help=short        显示指定包的选项\r\n      --help=recursive    显示所有包含包的短帮助\r\n  -V, --version           显示版本信息并退出\r\n  -q, --quiet, --silent   不打印 `checking ...\' 消息\r\n      --cache-file=FILE   将测试结果保存在缓存文件(默认禁用)\r\n  -C, --config-cache      `--cache-file=config.cache\'的别名\r\n  -n, --no-create         不创建输出文件\r\n      --srcdir=DIR        在指定文件夹查找资源 [配置目录或者 `..\']\r\n\r\n安装目录:\r\n  --prefix=PREFIX         安装 architecture-independent(独立结构) 文件到 PREFIX 里\r\n                          [/usr/local]\r\n  --exec-prefix=EPREFIX   安装 architecture-dependent(依赖结构) 文件到 EPREFIX 里\r\n                          [PREFIX]\r\n\r\n默认情况下, `make install\' 将安装的所有文件在`/usr/local/bin\', `/usr/local/lib\' 等. \r\n您可以指定一个安装前缀 `/usr/local\' 通过使用 `--prefix\', 例如 `--prefix=$HOME\'.\r\n\r\n为了更好的控制，使用下面的选项。\r\n\r\n细微的调整安装目录\r\n  --bindir=DIR            用户可执行文件 [EPREFIX/bin]\r\n  --sbindir=DIR           系统管理员可执行文件 [EPREFIX/sbin]\r\n  --libexecdir=DIR        程序的可执行文件 [EPREFIX/libexec]\r\n  --sysconfdir=DIR        只读单机数据 [PREFIX/etc]\r\n  --sharedstatedir=DIR    修改与体系结构无关的数据 [PREFIX/com]\r\n  --localstatedir=DIR     修改的单机数据 [PREFIX/var]\r\n  --runstatedir=DIR       修改的每个进程的数据 [LOCALSTATEDIR/run]\r\n  --libdir=DIR            目标代码库 [EPREFIX/lib]\r\n  --includedir=DIR        C头文件 [PREFIX/include]\r\n  --oldincludedir=DIR     non-gcc C头文件 [/usr/include]\r\n  --datarootdir=DIR       只读的独立数据根目录 [PREFIX/share]\r\n  --datadir=DIR           只读与体系结构无关的数据 [DATAROOTDIR]\r\n  --infodir=DIR           信息文档 [DATAROOTDIR/info]\r\n  --localedir=DIR         本地化数据 [DATAROOTDIR/locale]\r\n  --mandir=DIR            man文档 [DATAROOTDIR/man]\r\n  --docdir=DIR            文档更目录 [DATAROOTDIR/doc/PACKAGE]\r\n  --htmldir=DIR           html文档 [DOCDIR]\r\n  --dvidir=DIR            dvi文档 [DOCDIR]\r\n  --pdfdir=DIR            pdf文档 [DOCDIR]\r\n  --psdir=DIR             ps文档 [DOCDIR]\r\n\r\n系统类型:\r\n  --build=BUILD     配置基础上构建(猜测) [guessed]\r\n  --host=HOST       保存构建程序运行在主机(建立) [BUILD]\r\n  --target=TARGET   配置构建编译器为目标(主机) [HOST]\r\n\r\n可选的特性和包:\r\n  --disable-option-checking  忽略未被认可的 --enable/--with 选项\r\n  --disable-FEATURE       不包括功能 (等同于 --enable-FEATURE=no)\r\n  --enable-FEATURE[=ARG]  包括功能 [ARG=yes]\r\n  --with-PACKAGE[=ARG]    使用包 [ARG=yes]\r\n  --without-PACKAGE       不使用包 (等同于 --with-PACKAGE=no)\r\n  --with-libdir=NAME      运作lib库在 .../NAME 而不是 .../lib\r\n  --disable-rpath         禁用传递额外的运行时库搜索路径\r\n  --enable-re2c-cgoto     使用 -g 标志 to re2c 去计算 goto gcc扩展\r\n  --disable-gcc-global-regs\r\n                          是否启用 GCC 全局寄存器变量\r\n\r\nSAPI 模块:\r\n\r\n  --with-apxs2=FILE       建立共享的Apache2.0处理程序模块。文件是Apache的选项apxs型工具\r\n  --disable-cli           禁用 php-cli 版本\r\n                          (这就迫使 --without-pear)\r\n  --enable-embed=TYPE     实验: 支持构建embedded SAPI库, 类型是“shared”或“static”. TYPE=shared\r\n  --enable-fpm            构建 fpm SAPI \r\n  --with-fpm-user=USER    设置 php-fpm 运行用户. (默认: nobody)\r\n  --with-fpm-group=GRP    设置 php-fpm 运行组。\r\n                          对于系统用户,这通常应该设置为匹配fpm用户名 (默认: nobody)\r\n  --with-fpm-systemd      激活 systemd 集成\r\n  --with-fpm-acl          使用 POSIX 访问控制列表\r\n  --with-litespeed        构建 PHP 作为 litespeed 模块\r\n  --enable-phpdbg         构建 phpdbg\r\n  --enable-phpdbg-webhelper\r\n                          构建 phpdbg web SAPI 支持\r\n  --enable-phpdbg-debug   构建 phpdbg 在调试模式\r\n  --enable-phpdbg-readline   使在phpdbg支持readline  (取决于静态 ext/readline)\r\n  --disable-cgi           禁用 PHP-CGI 版本\r\n  --with-valgrind=DIR     启用 valgrind 支持\r\n\r\n一般设置:\r\n\r\n  --enable-gcov           启用 GCOV 代码覆盖(需要LTP)——仅供开发人员!!\r\n  --enable-debug          启用编译与调试符号\r\n  --with-layout=TYPE      设置如何制定安装文件. 类型可以是PHP或GNU [PHP]\r\n  --with-config-file-path=PATH\r\n                          设置php.ini的寻找路径 [PREFIX/lib]\r\n  --with-config-file-scan-dir=PATH\r\n                          设置扫描配置文件的路径\r\n  --enable-sigchild       启用PHP的SIGCHLD处理程序\r\n  --enable-libgcc         启动libgcc显式链接\r\n  --disable-short-tags    禁用的短小精悍的 <? 默认开始标记\r\n  --enable-dmalloc        启用 dmalloc\r\n  --disable-ipv6          启用 IPv6 支持\r\n  --enable-dtrace         启动 DTrace 支持\r\n  --enable-fd-setsize     设置描述符集的大小\r\n\r\n扩展:\r\n\r\n  --with-EXTENSION=shared[,PATH]\r\n\r\n    请注意: 并不是所有的扩展可以作为 “shared”。\r\n\r\n    例子: --with-foobar=shared,/usr/local/foobar/\r\n\r\n      o 构建foobar扩展作为共享扩展。\r\n      o foobar包安装前缀是 /usr/local/foobar/\r\n\r\n\r\n  --disable-all           禁用所有默认启用的扩展\r\n\r\n  --disable-libxml        禁用 LIBXML 支持\r\n  --with-libxml-dir=DIR   LIBXML: libxml2 安装前缀\r\n  --with-openssl=DIR      包括OpenSSL支持 (需要 OpenSSL >= 1.0.1)\r\n  --with-kerberos=DIR     OPENSSL: 包括Kerberos支持\r\n  --with-system-ciphers   OPENSSL: 使用系统默认密码列表,而不是硬编码的值\r\n  --with-pcre-regex=DIR   包括Perl兼容的正则表达式的支持。\r\n                          DIR 是 PCRE 安装前缀绑定\r\n  --with-pcre-jit         启用PCRE JIT功能 (仅BUNDLED)\r\n  --with-pcre-valgrind=DIR\r\n                          启用PCRE valgrind支持。 只限于开发人员!\r\n  --without-sqlite3=DIR   不包括SQLite3的支持。 DIR是SQLite3安装目录前缀.\r\n  --with-zlib=DIR         包括ZLIB支持 (需要 zlib >= 1.2.0.4)\r\n  --with-zlib-dir=<DIR>   定义zlib安装目录的位置\r\n  --enable-bcmath         启用bc风格精确数学函数\r\n  --with-bz2=DIR          包含 BZip2 支持\r\n  --enable-calendar       开启日历转换\r\n  --disable-ctype         禁用 ctype 函数库\r\n  --with-curl=DIR         包含 cURL 支持\r\n  --enable-dba            与绑定模块建立DBA。 建立共享的DBA扩展使用 --enable-dba=shared\r\n  --with-qdbm=DIR         DBA: QDBM 支持\r\n  --with-gdbm=DIR         DBA: GDBM 支持\r\n  --with-ndbm=DIR         DBA: NDBM 支持\r\n  --with-db4=DIR          DBA: Oracle Berkeley DB 4.x 或 5.x 支持\r\n  --with-db3=DIR          DBA: Oracle Berkeley DB 3.x 支持\r\n  --with-db2=DIR          DBA: Oracle Berkeley DB 2.x 支持\r\n  --with-db1=DIR          DBA: Oracle Berkeley DB 1.x 支持/模拟\r\n  --with-dbm=DIR          DBA: DBM 支持\r\n  --with-tcadb=DIR        DBA: Tokyo Cabinet(开源软件) 抽象 DB 支持\r\n  --with-lmdb=DIR         DBA: Lightning memory-mapped database 支持\r\n  --without-cdb=DIR       DBA: CDB 支持 (已捆绑)\r\n  --disable-inifile       DBA: INI 支持 (已捆绑)\r\n  --disable-flatfile      DBA: FlatFile 支持 (已捆绑)\r\n  --disable-dom           禁用 DOM 支持\r\n  --with-libxml-dir=DIR   DOM: libxml2 安装前缀\r\n  --with-enchant=DIR      包括 enchant 支持.\r\n                          GNU Aspell版本1.1.3或更高的要求。\r\n  --enable-exif           启动 EXIF (元数据图像) 支持\r\n  --disable-fileinfo      禁用 fileinfo 支持\r\n  --disable-filter        禁用 input filter 支持\r\n  --with-pcre-dir         FILTER: pcre 安全前缀\r\n  --enable-ftp            启用 FTP 支持\r\n  --with-openssl-dir=DIR  FTP: openssl 安装前缀\r\n  --with-gd=DIR           包含 GD 支持.  DIR 是 GD 库基安装目录 BUNDLED\r\n  --with-webp-dir=DIR     GD: 设置libwebp库安装前缀\r\n  --with-jpeg-dir=DIR     GD: 设置libjpeg库安装前缀\r\n  --with-png-dir=DIR      GD: 设置libpng库安装前缀\r\n  --with-zlib-dir=DIR     GD: 设置libz库安装前缀\r\n  --with-xpm-dir=DIR      GD: 设置libXpm库安装前缀\r\n  --with-freetype-dir=DIR GD: 设置FreeType 2库安装前缀\r\n  --enable-gd-jis-conv    GD: 启用 JIS-mapped 日文字体 支持\r\n  --with-gettext=DIR      包含 GNU gettext 支持\r\n  --with-gmp=DIR          包含 GNU MP 支持\r\n  --with-mhash=DIR        包含 mhash 支持\r\n  --disable-hash          禁用 hash 支持\r\n  --without-iconv=DIR     排除 iconv 支持\r\n  --with-imap=DIR         包含 IMAP 支持. DIR 是 c-client 安装前缀\r\n  --with-kerberos=DIR     IMAP: 包含 Kerberos 支持. DIR 是 Kerberos 安装前缀\r\n  --with-imap-ssl=DIR     IMAP: 包含 SSL 支持. DIR 是 OpenSSL 安装前缀\r\n  --with-interbase=DIR    包含 Firebird 支持.  DIR 是 Firebird 基准安装目录 /opt/firebird\r\n  --enable-intl           启用 internationalization(国际化) 支持\r\n  --with-icu-dir=DIR      知道ICU库和标题寻找目录\r\n  --disable-json          禁用 JavaScript对象序列化 支持\r\n  --with-ldap=DIR         包含 LDAP 支持\r\n  --with-ldap-sasl=DIR    LDAP: 包含 Cyrus SASL 支持\r\n  --enable-mbstring       启动多字节字符串 支持\r\n  --disable-mbregex       MBSTRING: 禁用多字节正则表达式支持\r\n  --disable-mbregex-backtrack\r\n                          MBSTRING: 禁用多字节正则表达式回溯检测\r\n  --with-onig=DIR         MBSTRING: 使用外部的 oniguruma. DIR 是 oniguruma 安装前缀.\r\n                          如果 DIR 没有设置, 将使用捆绑的 oniguruma \r\n  --with-mysqli=FILE      包含 MySQLi 支持. FILE是mysql_config文件路径.  如果没有值或者mysqlnd 已经通过\r\n                          作为文件, the MySQL 本地驱动器将被使用\r\n  --enable-embedded-mysqli\r\n                          MYSQLi: 启用 embedded 支持\r\n                          注意:不使用MySQL本地驱动器!\r\n  --with-mysql-sock=SOCKPATH\r\n                          MySQLi/PDO_MYSQL: MySQL unix socket 指针位置.\r\n                          如果未指定, 使用默认的搜索位置\r\n  --with-oci8=DIR         包含 Oracle Database OCI8 支持. DIR 默认为 $ORACLE_HOME.\r\n                          使用 --with-oci8=instantclient,/path/to/instant/client/lib\r\n                          使用Oracle客户端安装\r\n  --with-odbcver=HEX      Force 支持作为通过 ODBC 版本. 要求一个十六进制数字,默认为 0x0350.\r\n                          使用特殊的值为0,防止一个显式ODBCVER定义。\r\n  --with-adabas=DIR       包含 Adabas D 支持 /usr/local\r\n  --with-sapdb=DIR        包含 SAP DB 支持 /usr/local\r\n  --with-solid=DIR        包含 Solid 支持 /usr/local/solid\r\n  --with-ibm-db2=DIR      包含 IBM DB2 支持 /home/db2inst1/sqllib\r\n  --with-empress=DIR      包含 Empress 支持 \\$EMPRESSPATH\r\n                          (Empress 版本 >= 8.60 必须)\r\n  --with-empress-bcs=DIR  包含 Empress Local Access 支持 \\$EMPRESSPATH\r\n                          (Empress Version >= 8.60 必须)\r\n  --with-custom-odbc=DIR  包含 用户定义的ODBC支持. DIR 是 ODBC 安装基准目录 /usr/local.\r\n                          确保定义 CUSTOM_ODBC_LIBS 和 需要一些 odbc.h在你包含的 dirs. 例如：你应该\r\n                          在Sybase SQL 5.5.00在QNX的任何地方, 之前运行配置脚本:\r\n                            CPPFLAGS=\\\"-DODBC_QNX -DSQLANY_BUG\\\"\r\n                            LDFLAGS=-lunix\r\n                            CUSTOM_ODBC_LIBS=\\\"-ldblib -lodbc\\\"\r\n  --with-iodbc=DIR        包含 iODBC 支持 /usr/local\r\n  --with-esoob=DIR        包含 Easysoft OOB 支持 /usr/local/easysoft/oob/client\r\n  --with-unixODBC=DIR     包含 unixODBC 支持 /usr/local\r\n  --with-dbmaker=DIR      包含 DBMaker 支持\r\n  --disable-opcache       禁用 Zend OPcache 支持\r\n  --disable-opcache-file  禁用 基于文件缓存\r\n  --disable-huge-code-pages\r\n                          禁用PHP代码页复制到巨大的页面\r\n  --enable-pcntl          启动 pcntl 支持 (仅 CLI/CGI)\r\n  --disable-pdo           禁用 PHP 数据对象 支持\r\n  --with-pdo-dblib=DIR    PDO: DBLIB-DB 支持.  DIR 是 FreeTDS home目录\r\n  --with-pdo-firebird=DIR PDO: Firebird 支持.  DIR 是 Firebird 基准安装目录 /opt/firebird\r\n  --with-pdo-mysql=DIR    PDO: MySQL 支持. DIR 是 MySQL 基目录\r\n                          如果没有值或者 mysqlnd 作为 DIR 传递,\r\n                          本地驱动程序将会被使用\r\n  --with-zlib-dir=DIR     PDO_MySQL: 设置 libz 路径的安装前缀\r\n  --with-pdo-oci=DIR      PDO: Oracle OCI 支持. DIR 默认为 $ORACLE_HOME.\r\n                          使用 --with-pdo-oci=instantclient,/path/to/instant/client/lib\r\n                          作为一个 Oracle 即时客户端安装.\r\n  --with-pdo-odbc=flavour,dir\r\n                          PDO: 支持作为 \'flavour\' ODBC 驱动器.\r\n			  包含 和在“dir”下查找lib\r\n\r\n			 \'flavor\'可以是以下之一：ibm-db2、iodbc、unixodc、generic\r\n       如果省略\'dir\'部分，则将使用您选择的flavor的默认值。\r\n       例如。：\r\n       --with-pdo-odbc=unixODBC\r\n\r\n			  将会在/usr/local下面检测 unixODBC . \r\n        您可以尝试使用“generic”风格的不受支持的驱动程序。\r\n        通用ODBC支持的语法是:\r\n        --with-pdo-odbc=generic,dir,libname,ldflags,cflags\r\n			  当扩展名构建为\'shared\'时，扩展名始终是 pdo_odbc\r\n  \r\n  --with-pdo-pgsql=DIR    PDO: PostgreSQL 支持.  DIR 是 PostgreSQL 基准安装目录或者 pg_config 文件路径\r\n  --without-pdo-sqlite=DIR\r\n                          PDO: sqlite 3 支持.  DIR 是 sqlite 基准安装目录 BUNDLED\r\n  --with-pgsql=DIR        包含 PostgreSQL 支持.  DIR 是 PostgreSQL 基准安装目录或者 pg_config 文件路径\r\n  --disable-phar          禁用 phar 支持\r\n  --disable-posix         禁用 POSIX-like 函数库\r\n  --with-pspell=DIR       包含 PSPELL 支持.\r\n                          需要GNU Aspell版本为0.50.0或更高版本\r\n  --with-libedit=DIR      包含 libedit 阅读线替换 (仅 CLI/CGI)\r\n  --with-readline=DIR     包含 readline 支持 (仅 CLI/CGI)\r\n  --with-recode=DIR       包含 recode 支持\r\n  --disable-session       禁用 session 支持\r\n  --with-mm=DIR           SESSION: 包含 mm 支持 作为 session 存储\r\n  --enable-shmop          启动 shmop 支持\r\n  --disable-simplexml     禁用 SimpleXML 支持\r\n  --with-libxml-dir=DIR   SimpleXML: libxml2 安装前缀\r\n  --with-snmp=DIR         包含 SNMP 支持\r\n  --with-openssl-dir=DIR  SNMP: openssl 安装前缀\r\n  --enable-soap           启动 SOAP 支持\r\n  --with-libxml-dir=DIR   SOAP: libxml2 安装前缀\r\n  --enable-sockets        启动 sockets 支持\r\n  --with-sodium=DIR       包含 sodium 支持\r\n  --with-password-argon2=DIR\r\n                          包含 Argon2 支持 in password_*. DIR 是 Argon2 共享目录路径\r\n  --enable-sysvmsg        启用 sysvmsg 支持\r\n  --enable-sysvsem        启用 System V 信号量 支持\r\n  --enable-sysvshm        启用 System V 共享内存 支持\r\n  --with-tidy=DIR         包含 TIDY 支持\r\n  --disable-tokenizer     禁用 tokenizer 支持\r\n  --enable-wddx           启动 WDDX 支持\r\n  --with-libxml-dir=DIR   WDDX: libxml2 安装前缀\r\n  --with-libexpat-dir=DIR WDDX: libexpat dir for XMLRPC-EPI (已弃用)\r\n  --disable-xml           Disable XML 支持\r\n  --with-libxml-dir=DIR   XML: libxml2 安装前缀\r\n  --with-libexpat-dir=DIR XML: libexpat 安装前缀 (已弃用)\r\n  --disable-xmlreader     Disable XMLReader 支持\r\n  --with-libxml-dir=DIR   XMLReader: libxml2 安装前缀\r\n  --with-xmlrpc=DIR       包含 XMLRPC-EPI 支持\r\n  --with-libxml-dir=DIR   XMLRPC-EPI: libxml2 安装前缀\r\n  --with-libexpat-dir=DIR XMLRPC-EPI: libexpat dir 为了 XMLRPC-EPI (已弃用)\r\n  --with-iconv-dir=DIR    XMLRPC-EPI: iconv dir 为了 XMLRPC-EPI\r\n  --disable-xmlwriter     Disable XMLWriter 支持\r\n  --with-libxml-dir=DIR   XMLWriter: libxml2 安装前缀\r\n  --with-xsl=DIR          包含 XSL 支持.  DIR 是 libxslt 基准安装目录 (libxslt >= 1.1.0 必须)\r\n  --enable-zend-test      启动 zend-test 扩展\r\n  --enable-zip            包含 Zip 读/写 支持\r\n  --with-zlib-dir=DIR     ZIP: 位置 libz 路径的安装前缀\r\n  --with-pcre-dir         ZIP: pcre 安装前缀\r\n  --with-libzip=DIR       ZIP: 使用 libzip\r\n  --enable-mysqlnd        启动 mysqlnd 明确地, 当需要其他扩展时将隐式完成\r\n  --disable-mysqlnd-compression-支持\r\n                          禁用 支持 MySQL 压缩协议在 mysqlnd 里\r\n  --with-zlib-dir=DIR     mysqlnd: 设置 libz 路径的安装前缀\r\n\r\nPEAR:\r\n\r\n  --with-pear=DIR         安装 PEAR 到 DIR [PREFIX/lib/php]\r\n  --without-pear          不安装 PEAR\r\n\r\nZend:\r\n\r\n  --enable-maintainer-zts 启动线程安全 - 仅限代码维护人员！！\r\n  --disable-inline-optimization\r\n                          如果构建zend_execute.lo失败，请尝试此开关\r\n  --disable-zend-signals  是否启用Zend信号处理\r\n\r\nTSRM:\r\n\r\n  --with-tsrm-pth=pth-config\r\n                          使用 GNU Pth\r\n  --with-tsrm-st          使用 SGI\'s 状态线程\r\n  --with-tsrm-pthreads    使用 POSIX 线程 (默认)\r\n\r\nLibtool:\r\n\r\n  --enable-shared=PKGS    生成共享库 默认=yes\r\n  --enable-static=PKGS    生成静态库 默认=yes\r\n  --enable-fast-install=PKGS\r\n                          优化以快速安装 默认=yes\r\n  --with-gnu-ld           假设 C 编译器使用 GNU ld 默认=no\r\n  --disable-libtool-lock  避免锁定（可能会破坏并行生成）\r\n  --with-pic              尝试仅使用 pic/non-pic 对象\r\n  --with-tags=TAGS        包含附加自动配置\r\n\r\n\r\n一些有影响的环境变量：\r\n\r\n  CC          C 编译器命令\r\n  CFLAGS      C 编译器标志\r\n  LDFLAGS     链接器标志, 例如 -L<lib dir> 如果库位于非标准目录中 <lib dir>\r\n  LIBS        要传递给链接器的库, 例如 -l<library>\r\n  CPPFLAGS    (目标) C/C++ 预处理器标志, 例如 -I<include dir>\r\n               如果在非标准目录中有头文件 <include dir>\r\n  CPP         C  预处理器\r\n  YACC        要使用的 `Yet Another Compiler Compiler` 实现。\r\n              默认为发现的第一个程序： `bison -y\', `byacc\', `yacc\'.\r\n  YFLAGS      默认情况下将传递给$yacc的参数列表。\r\n              此脚本将默认 YFLAGS 为空字符串，以避免\r\n              一些make应用程序给出的默认值为“-d”。\r\n  CXX         C++ 编译器命令\r\n  CXXFLAGS    C++ 编译器标志\r\n  CXXCPP      C++ 预处理器\r\n\r\n使用这些变量覆盖“configure”所做的选择，或帮助它查找具有非标准名称/位置的库和程序。\r\n\r\n向包提供程序报告错误。\r\n```', 'normal', 187, b'0', b'1'),
(94, 'Linux设置PHP开机自动启动', 1560131605, 1560131605, 1000, '## 设置开机启动\r\n打开：\r\n```shell\r\nvim /etc/systemd/system/php-fpm.service\r\n```\r\n\r\n写入下面内容：\r\n```\r\n[Unit]\r\nDescription=The PHP FastCGI Process Manager\r\nAfter=syslog.target network.target\r\n\r\n[Service]\r\nType=simple\r\nPIDFile=/run/php-fpm.pid\r\nExecStart=/usr/local/php/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php/etc/php-fpm.conf\r\nExecReload=/bin/kill -USR2 $MAINPID\r\nExecStop=/bin/kill -SIGINT $MAINPID\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\n添加到开机启动:\r\n```shell\r\nsystemctl enable php-fpm.service\r\n```\r\n\r\n下面就可以使用`systemctl`命令管理`php-fpm`了：\r\n\r\n```shell\r\n# 启动php-fpm:\r\nsystemctl start php-fpm.service\r\n\r\n# 重启php-fpm:\r\nsystemctl reload php-fpm.service\r\n\r\n# 停止php-fpm:\r\nsystemctl stop php-fpm.service\r\n```\r\n\r\n## 添加php到环境变量\r\n\r\n打开文件：\r\n```shell\r\nvim /etc/profile\r\n```\r\n末尾添加：\r\n```\r\nPATH=$PATH:/usr/local/php/bin:/usr/local/php/sbin:\r\nexport PATH\r\n```\r\n\r\n使配置生效:\r\n```shell\r\nsource /etc/profile\r\n```\r\n\r\n\r\n', 'normal', 70, b'0', b'1'),
(95, 'Linux设置Nginx开机自动启动', 1560131860, 1560141865, 1034, '## 配置 Nginx 开机启动\r\n编辑文件：\r\n```shell\r\nvim /etc/systemd/system/nginx.service\r\n```\r\n\r\n文件内容：\r\n```\r\n[Unit]\r\nDescription=Nginx - high performance web server\r\nAfter=network.target \r\n   \r\n[Service] \r\nType=forking \r\nExecStart=/usr/local/nginx/sbin/nginx\r\nExecReload=/usr/local/nginx/sbin/nginx -s reload\r\nExecStop=/usr/local/nginx/sbin/nginx -s stop\r\nPrivateTmp=true \r\n   \r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\n添加到开机启动：\r\n```shell\r\nsystemctl enable nginx.service\r\n```\r\n\r\n使用`systemctl`控制Nginx：\r\n```shell\r\n# 启动\r\nsystemctl start nginx.service\r\n\r\n# 重启\r\nsystemctl reload nginx.service\r\n\r\n# 停止\r\nsystemctl stop nginx.service\r\n```\r\n\r\n## 添加 Nginx 到环境变量\r\n打开文件：\r\n```shell\r\nvim /etc/profile\r\n```\r\n\r\n末尾添加两行：\r\n```\r\nPATH=$PATH:/usr/local/nginx/sbin:\r\nexport PATH\r\n```\r\n\r\n使配置生效:\r\n```shell\r\nsource /etc/profile\r\n```\r\n', 'normal', 73, b'0', b'1'),
(96, 'PHP开启Opcache', 1560247059, 1560247446, 1000, '开启 opcache能有效的提升PHP执行速度，建议在生产环境中开启。\r\n## 开启 opcache的方法\r\n### 修改 php.ini\r\n在 `php.ini` 找到 `opcache` 段，修改下面的几行，去掉前面的注释符`;`\r\n```\r\n[opcache]\r\n\r\n; opcache 开关\r\nopcache.enable=1\r\n\r\n; php-cli 模式 opcache 开关\r\nopcache.enable_cli=0\r\n\r\n; opcache 共享内存大小，单位为M\r\nopcache.memory_consumption=128\r\n\r\n; 暂存池中字符串的占内存总量.(单位:MB), 推荐 8\r\nopcache.interned_strings_buffer=8\r\n \r\n; 最大缓存的文件数目 200  到 100000 之间,推荐 4000\r\nopcache.max_accelerated_files=4000\r\n\r\n; 打开快速关闭, 打开这个在PHP Request Shutdown的时候会收内存的速度会提高\r\nopcache.fast_shutdown=1\r\n\r\n; 如果启用，那么 OPcache 会每隔 opcache.revalidate_freq 设定的秒数 检查脚本是否更新。 如果禁用此选项，你必须使用 opcache_reset() 或者 opcache_invalidate() 函数来手动重置 OPcache，也可以 通过重启 Web 服务器来使文件系统更改生效。\r\nopcache.validate_timestamps=60\r\n```\r\n\r\n并在 `php.ini` 添加一行：\r\n```\r\nzend_extension=\"opcache.so\"\r\n```\r\n\r\n修改好重启一下 `php-fpm`。\r\n\r\n### PHP-CGI 模式测试\r\n配置完成后，可以使用如下代码或php探针查看是否开启opcache：\r\n```php\r\n<?php\r\n    phpinfo();\r\n\r\n```\r\n如果发现有 `Zend Opcache` 模块则说明PHP-CGI/FastCGI模式已经开启opcache。\r\n\r\n#### PHP-CLI 模式测试\r\n测试PHP-CLI模式下是否开启，输入命令：\r\n```shell\r\nphp -m\r\n```\r\n发现有 `Zend Opcache` 模块则说明PHP-CLI模式已经开启opcache。\r\n\r\n## 参考文章\r\n1. [让PHP7达到最高性能的几个Tips | 风雪之隅](http://www.laruence.com/2015/12/04/3086.html \"让PHP7达到最高性能的几个Tips | 风雪之隅\")\r\n2. [[PHP] - 性能加速 - 开启Opcache](https://www.jianshu.com/p/582b683a26a2 \"[PHP] - 性能加速 - 开启Opcache\")\r\n\r\n\r\n', 'normal', 108, b'0', b'1'),
(97, '隐藏Nginx和PHP版本号', 1560251104, 1560251104, 1000, '> 因为一般来说，软件的漏洞都与版本有关，隐藏版本号是为了防止恶意用户利用软件漏洞进行攻击。\r\n\r\n## 隐藏 Nginx 版本号\r\n修改 Nginx 配置文件 `nginx.conf`，找到`http`块，在里面添加一行：\r\n```\r\nserver_tokens off;\r\n```\r\n\r\n重启 Nginx 后生效。\r\n\r\n这里只是隐藏了Nginx 版本号，还可以更进一步，隐藏 Nginx 服务器标志。具体做法可以查看文章末尾的参考文章。\r\n\r\n## 隐藏 PHP 版本号\r\n修改 PHP 配置文件 `php.ini`，找到：\r\n```\r\nexpose_php = On\r\n```\r\n\r\n修改为\r\n```\r\nexpose_php = Off\r\n```\r\n\r\n重启 PHP-FPM 后生效。\r\n\r\n## 测试\r\nLinux 下可以运行 `curl -I address` 进行测试：\r\n```\r\nHTTP/1.1 200 OK\r\nServer: nginx\r\nDate: Tue, 11 Jun 2019 10:59:29 GMT\r\nContent-Type: text/html; charset=UTF-8\r\nConnection: keep-alive\r\nVary: Accept-Encoding\r\n\r\n```\r\n发现已经没有了 NginxPHP版本信息。\r\n\r\n## 参考文章\r\n1. [nginx干货（一）隐藏Nginx标识与版本号 - 轩少学习之路 - CSDN博客](https://blog.csdn.net/yuanzhenwei521/article/details/78819482 \"ginx干货（一）隐藏Nginx标识与版本号 - 轩少学习之路 - CSDN博客\")\r\n2. [隐藏 Nginx 版本号和软件名 - memory日记 - CSDN博客](https://blog.csdn.net/wgw_dream/article/details/83867597 \"隐藏 Nginx 版本号和软件名 - memory日记 - CSDN博客\")\r\n\r\n\r\n\r\n', 'normal', 124, b'0', b'1'),
(98, '', 0, 0, 0, '', 'edit', 0, b'0', b'0');
INSERT INTO `lb_article` (`id`, `title`, `create_time`, `update_time`, `category_id`, `content`, `status`, `view_count`, `is_top`, `is_original`) VALUES
(99, '概念区分：CLI，CGI，FastCGI，PHP-CLI，PHP-CGI，PHP-FastCGI，PHP-FPM', 1560341514, 1560345790, 1000, '学习PHP时遇到一些慨念，开始的时候有些分不清，这几天又好好查了一下资料，这里总结一下。\r\n\r\n## CLI\r\nCLI 为 Command Line Interface 的缩写，即命令行接口。CLI是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）。\r\n\r\n比如你在windows下使用的cmd，在Linux下使用的shell，就是操作系统提供的CLI。\r\n\r\n## CGI\r\nCGI 为 Common Gateway Interface 的缩写，即通用网关接口（CGI只是接口协议，不是语言）。CGI是Web服务器运行时调用外部程序的规范, 按CGI编写的程序可以扩展Web服务器的功能。可以说无论什么服务器和编程语言，只要他们遵循了CGI规范，可以配合使用。\r\n\r\n![CGI运行模式.](/uploads/artimgs/99/7561a7df2bfacee65b6575b99006b2fd.jpg \"CGI运行模式.\")\r\n\r\n## FastCGI\r\nFastCGI 为 CGI 的优化，优化了CGI的运行模式，从而加快了执行速度和效率（所以加了个Fast）。\r\n\r\nCGI工作模式：每当客户请求CGI的时候，WEB服务器就请求操作系统生成一个新的CGI进程，一个CGI进程则处理完一个请求后就立马结束，下个请求来时再创建新的CGI进程。当然，这样在访问量很少没有并发的情况也行。可是当访问量增大，需要较高并发，这种方式就不适合了。\r\n\r\n而FastCGI像是一个常驻内存的CGI，它可以一直执行，等待请求的到来，不会每次请求都要重新启动一次（这是CGI最为人诟病的fork-and-execute模式）。\r\n\r\n## PHP-CLI\r\nPHP-CLI 为 PHP - Command Line Interface 的缩写，即PHP命令行接口。这是PHP提供的CLI，在系统命令行中使用PHP的一种方式。PHP-CLI将PHP的所有优点应用于命令行脚本，允许创建服务端支持脚本或系统应用程序，还可以使用GUI！\r\n\r\n## PHP-CGI\r\nPHP-CGI 为 PHP - Common Gateway Interface 的缩写，即PHP通用网关接口。这是PHP提供的CGI实现，可以在提供了CGI的服务器上使用，比如 Apache，Nginx。\r\n\r\n## PHP-FastCGI\r\nPHP-FastCGI 是 PHP 在 FastCGI 模式的实现，是对PHP-CLI的优化。\r\n\r\n## PHP-FPM\r\nPHP-FPM的全称是 PHP FastCGI Process Manager，即PHP的FastCGI进程管理器。意思PHP-FPM是一个管理FastCGI进程的管理程序。它能够根据实际情况决定是否需要启动新的FastCGI进程，是否需要结束FastCGI进程等，可以有效控制内存和进程、可以平滑重载PHP配置。\r\n\r\n![php-fpm运行模式](/uploads/artimgs/99/3ec41783a822304ccccdc7e26bf3e284.jpg \"php-fpm运行模式\")\r\n\r\n## 总结\r\n\r\nCLI、CGI、FastCGI 是接口实现的规范，不是具体的软件程序，任何编程语言都可以根据这些规范的编写自己的CLI、CGI、FastCGI，比如PHP、Python、Nodejs都可以。\r\n\r\nPHP-CLI、PHP-CGI、PHP-FastCGI 是 PHP 实现的 CLI、CGI、FastCGI 规范，他们是具体的程序，比如做网站使用的PHP-CGI、PHP-FastCGI，而编写爬虫一般使用的PHP-CLI。\r\n\r\n## 参考文章\r\n1. [概念了解：CGI，FastCGI，PHP-CGI与PHP-FPM](http://www.nowamagic.net/librarys/veda/detail/1319 \"概念了解：CGI，FastCGI，PHP-CGI与PHP-FPM\")\r\n2. [PHP 的命令行模式](https://www.php.net/manual/zh/features.commandline.php \"PHP 的命令行模式\")\r\n3. [CGI、FastCGI、PHP-CGI和PHP-FPM 概念区分](https://www.jianshu.com/p/d7aa1d89554c \"CGI、FastCGI、PHP-CGI和PHP-FPM 概念区分\")\r\n4. [PHP CLI](http://www.php-cli.com/ \"PHP CLI\")\r\n5. [CGI与FastCGI - wanghetao - 博客园](https://www.cnblogs.com/wanghetao/p/3934350.html \"CGI与FastCGI - wanghetao - 博客园\")\r\n6. [CGI + FastCGI（PHP-FPM）联系与区别 【图解 + 注释】 - 小蒋不素小蒋 - 博客园](https://www.baidu.com/link?url=5qo-UVWX96bNHZ6WL3gB3Dz10NBUt7GaSbfi2Qb9M1QauGRy6taWJ416TElUiiDUA5JUIhrvOWnqBR3T6VAyiq&wd=&eqid=d039cf040002dd51000000065d00f748 \"CGI + FastCGI（PHP-FPM）联系与区别 【图解 + 注释】 - 小蒋不素小蒋 - 博客园\")\r\n', 'normal', 159, b'0', b'1'),
(100, '', 0, 0, 0, '', 'edit', 0, b'0', b'0'),
(101, '', 0, 0, 0, '', 'edit', 0, b'0', b'0'),
(102, 'Linux下安装MySQL 5.5', 1560423942, 1562573731, 1035, 'MySQL是PHP中开发比不可少的，学习Linux下安装MySQL也是必须的，今天在这里总结一下。注意这里是5.5版本的，5.6及以上安装有一些区别。\r\n\r\n## 下载MySQL安装包\r\n打开官网：[https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/ \"https://dev.mysql.com/downloads/mysql/\")，选择你想要安装的版本，我这里选择的5.5版本：\r\n\r\n![mysql5.5下载](/uploads/artimgs/102/5f8014fb765fdf60d0e2d6488b239b30.jpg \"mysql5.5下载\")\r\n\r\n点击“Download”，进入下载页，点击“No thanks, just start my download.”下载，然后复制下载链接，使用wget下载：\r\n```shell\r\ncd /usr/local/src\r\nwget https://cdn.mysql.com//Downloads/MySQL-5.5/mysql-5.5.62-linux-glibc2.12-x86_64.tar.gz\r\n```\r\n\r\n解压压缩包并重命名：\r\n```shell\r\n# 解压\r\ntar -zxvf mysql-5.5.62-linux-glibc2.12-x86_64.tar.gz\r\n\r\n# 移动并重命名\r\nmv ./mysql-5.5.62-linux-glibc2.12-x86_64 /usr/local/mysql\r\n\r\n# 删除安装包(建议安装好再删)\r\nrm -f mysql-5.5.62-linux-glibc2.12-x86_64.tar.gz\r\n```\r\n\r\n## 初始化MySQL\r\n我这里下载的是二进制版本的，所以不需要像Nginx和PHP一样需要自己编译。我们只需要进行初始化配置一下就可以使用了。\r\n\r\n切换到mysql目录：\r\n```shell\r\ncd /usr/local/mysql\r\n```\r\n\r\n创建mysql用户组及用户用于执行mysqld:\r\n```shell\r\ngroupadd mysql\r\nuseradd -r -g mysql mysql\r\n```\r\n\r\n添加MySQL配置文件：\r\n```shell\r\nmkdir etc logs\r\ncp ./support-files/my-medium.cnf ./etc/my.cnf\r\n```\r\n\r\n修改配置文件my.cnf：\r\n```shell\r\nvim  ./etc/my.cnf\r\n```\r\n\r\n将mysqld段前面修改为：\r\n```\r\n[mysqld]\r\n# 监听的端口号\r\nport		= 3306\r\n# sock连接文件\r\nsocket		= /tmp/mysql.sock\r\n# 设置字符集\r\ncharacter-set-server = utf8\r\n# 日期文件\r\nlog-error = /usr/local/mysql/logs/mysqld_error.log\r\n# 进程id存放文件\r\npid-file = /usr/local/mysql/etc/mysqld.pid\r\n# mysql目录\r\nbasedir = /usr/local/mysql\r\n# 数据库文件目录\r\ndatadir = /usr/local/mysql/data\r\n# 禁止域名解析的（包括主机名）\r\nskip-name-resolve\r\n```\r\n\r\n并在末尾添加：\r\n```\r\n[mysqld_safe]\r\nlog-error=/usr/local/mysql/logs/mysqld_safe_error.log\r\npid-file=/usr/local/mysql/etc/mysqld_safe.pid\r\n```\r\n\r\n添加日志文件和pid文件：\r\n```\r\ntouch ./logs/mysqld_error.log\r\ntouch ./logs/mysqld_safe_error.log\r\n\r\ntouch ./etc/mysqld.pid\r\ntouch ./etc/mysqld_safe.pid\r\n\r\n# 修改目录权限：\r\nchown -R mysql:mysql ./\r\n```\r\n\r\n初始化数据库：\r\n```shell\r\n./scripts/mysql_install_db \\\r\n--user=mysql \\\r\n--verbose \\\r\n--defaults-file=/usr/local/mysql/etc/my.cnf \\\r\n--datadir=/usr/local/mysql/data \\\r\n--basedir=/usr/local/mysql \\\r\n--pid-file=/usr/local/mysql/etc/mysqld.pid \\\r\n--log-error=/usr/local/mysql/logs/mysqld_error.log \\\r\n--tmpdir=/tmp\r\n```\r\n\r\n修改mysql.server文件：\r\n```shell\r\n# 将服务文件拷贝到init.d下，并重命名为mysql\r\ncp ./support-files/mysql.server /etc/init.d/mysql.server\r\n\r\n# 编辑\r\nvim /etc/init.d/mysql.server\r\n```\r\n\r\n找到 basedir 和 datadir 这两行，修改为：\r\n```\r\nbasedir=/usr/local/mysql\r\ndatadir=/usr/local/mysql/data\r\n```\r\n\r\n设置开机启动mysqld：\r\n```shell\r\n# 赋予可执行权限   \r\nchmod +x /etc/init.d/mysql.server\r\n\r\n# 添加到开机启动服务\r\nchkconfig --add mysql.server\r\n\r\n# 启动mysqld服务\r\nchkconfig mysql.server on\r\n\r\n# 查看开启启动服务列表，有mysql表示成功\r\nchkconfig --list\r\n```\r\n\r\n之后就可以使用下面的命令管理mysqld了：\r\n```shell\r\n# 启动mysqld\r\nservice mysql.server start\r\n\r\n# 重启mysqld\r\nservice mysql.server restart\r\n\r\n# 查看mysqld状态\r\nservice mysql.server status\r\n\r\n# 重载mysqld配置\r\nservice mysql.server reload\r\n```\r\n\r\n启动mysqld（MySQL服务器）：\r\n```shell\r\nservice mysql.server start\r\n```\r\n\r\n如果显示：\r\n```\r\nStarting MySQL... SUCCESS! \r\n```\r\n说明MySQL安装成功。\r\n\r\n还可以进一步确认mysqld服务已经启动：\r\n```shell\r\nps -aux | grep mysqld\r\n```\r\n\r\n输出类似如下：\r\n```\r\nroot     19802  0.2  0.1  11820  1648 pts/0    S    01:30   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/usr/local/mysql/data --pid-file=/usr/local/mysql/etc/mysqld.pid\r\nmysql    20164  0.6  4.1 469416 42124 pts/0    Sl   01:30   0:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/logs/mysqld_safe-error.log --pid-file=/usr/local/mysql/etc/mysqld.pid --socket=/tmp/mysql.sock --port=3306\r\nroot     20186  0.0  0.0 112724   988 pts/0    R+   01:30   0:00 grep --color=auto mysqld\r\n```\r\n\r\n最后一步修改数据库root账号密码(默认为空)：\r\n```shell\r\n./bin/mysqladmin -u root password \'new-password\'\r\n```\r\n将其中`new-password`修改为要设置的密码。\r\n\r\n## 将MySQL加入环境变量\r\n执行：\r\n```shell\r\nvim /etc/profile\r\n```\r\n\r\n末尾添加两行：\r\n```\r\nPATH=$PATH:/usr/local/mysql/bin:\r\nexport PATH\r\n```\r\n\r\n使配置生效:\r\n```shell\r\nsource /etc/profile\r\n```\r\n\r\n## 测试\r\n查看MySQL版本：\r\n```shell\r\nmysql --version\r\n```\r\n\r\n输出类似如下：\r\n```\r\nmysql  Ver 14.14 Distrib 5.5.62, for linux-glibc2.12 (x86_64) using readline 5.1\r\n```\r\n\r\n登陆到mysql：\r\n```shell\r\nmysql -u root -p\r\n```\r\n输入之前设置的密码后，显示如下界面说明MySQL安装和配置成功。\r\n\r\n![登陆MySQL](/uploads/artimgs/102/26ba6d7d134ff2137be7194f6ef001f8.png \"登陆MySQL\")\r\n\r\n## 相关文件位置\r\n按上面的过程安装，相关的文件或目录位置和如下：\r\n- 日志目录：/usr/local/mysql/logs\r\n- 配置文件：/usr/local/mysql/etc/my.cnf\r\n- 数据库文件目录：/usr/local/mysql/data\r\n- 二进制程序目录（已经加入环境变量，可以直接使用）：/usr/local/mysql/bin\r\n\r\n## 参考文章\r\n1. [Linux下MySQL的安装以及问题的解决 - sinat_19562099的博客 - CSDN博客](https://blog.csdn.net/sinat_19562099/article/details/80711984 \"Linux下MySQL的安装以及问题的解决 - sinat_19562099的博客 - CSDN博客\")\r\n2. [linux系统安装mysql数据库 - 段然涛 - 博客园](https://www.cnblogs.com/duanrantao/p/8988116.html \"linux系统安装mysql数据库 - 段然涛 - 博客园\")\r\n3. [官网MySQL5.5安装教程](https://dev.mysql.com/doc/refman/5.5/en/binary-installation.html \"官网MySQL5.5安装教程\")\r\n', 'normal', 184, b'0', b'1'),
(103, 'Nginx修改为使用sock文件连接PHP-FPM', 1560510509, 1560511637, 1034, '在Linux下，Nginx使用sock文件连接PHP-FPM比普通转发方式（转发到9000端口）要更快、更高效，这里记录一下配置方法。\r\n\r\n## 修改PHP-FPM配置文件\r\n打开PHP-FPM配置文件，一般是 `/usr/local/php/etc/php-fpm.conf` 或者 `/usr/local/php/etc/php-fpm.d/www.conf`，如果不知道文件位置可以使用下面的命令：\r\n```shell\r\nps -aux | grep php-fpm\r\n```\r\n\r\n文件位置如下：\r\n![查看php-fpm配置文件位置](/uploads/artimgs/103/d569d48ba638a90577f0b33c2591f7be.png \"查看php-fpm配置文件位置\")\r\n\r\n找到下面的这两行：\r\n```\r\nlisten = 127.0.0.1:9000\r\n\r\n;listen.mode = 0660\r\n```\r\n\r\n修改为：\r\n```\r\nlisten = /tmp/php-cgi.sock\r\n\r\nlisten.mode = 0666\r\n```\r\n/tmp/php-fpm.sock 即为sock文件路径，你可以根据需要进行修改。\r\n\r\n\r\n## 修改 Nginx 配置文件\r\n\r\n修改Nginx配置文件中的配置php的部分，找到:\r\n```\r\nfastcgi_pass 127.0.0.1:9000;\r\n```\r\n\r\n修改为:\r\n```\r\nfastcgi_pass  unix:/tmp/php-cgi.sock;\r\n```\r\n\r\n## 重启 PHP-FPM 和 Nginx\r\n\r\n保存文件后，需要重新启动（先stop再start，用reload不行） PHP-FPM 和 Nginx 生效。\r\n\r\n改好后打开网站进行测试， 如果正常能访问说明配置成功，如果出现502错误说明配置有问题。\r\n\r\n', 'normal', 183, b'0', b'1'),
(104, 'Nginx配置指令之rewrite', 1560515795, 1560516057, 1034, 'rewrite指令在Nginx配置文件里面是用于重写的，有点像PHP框架里面的路由配置。\r\n\r\n下面内容从官方文档翻译：\r\n\r\n> \r\n语法  :	rewrite regex replacement [flag];\r\n默认值:	无\r\n所处环境:	server, location, if\r\n\r\n如果指定的正则表达式（regex）与请求URI匹配，则URI将更改为替换字符串（replacement）中指定的URI。rewrite重写指令是按照它们在配置文件中的出现顺序执行的。可以使用标志终止对指令的进一步处理。如果替换字符串（replacement）以\"http:/\"、\"https:/\" 或 \"$plan\"开头，则处理停止并将重定向返回给客户端。\r\n\r\n一个可选的标志参数（flag）可以是：\r\n- last：停止处理当前 ngx_http_rewrite_module 指令集，并开始搜索与更改的URI匹配的新位置；\r\n- break：停止处理当前的 ngx_http_rewrite_module 模块指令集，就像中断指令一样；\r\n- redirect：返回302代码的临时重定向；如果替换字符串不以\"http:/\"、\"https:/\" 或 \"$plan\"开头，则使用；\r\n- permanent：使用301代码返回永久重定向。\r\n\r\n完整的重定向URL是根据请求方案($plan)和 server_name_in_redirective 和 port_in_redirect  指令形成的。\r\n\r\n示例:\r\n```\r\nserver {\r\n    ...\r\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\r\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\r\n    return  403;\r\n    ...\r\n}\r\n```\r\n\r\n但是，如果将这些指令放在\"/Download/\"位置中，则应将最后一个标志替换为 break，否则nginx将进行10次循环并返回500错误：\r\n```\r\nlocation /download/ {\r\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\r\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\r\n    return  403;\r\n}\r\n```\r\n\r\n如果替换字符串（replacement）包括新的请求参数，则在它们后面追加前一个请求参数。如果这是不想要的，那么在替换字符串的末尾添加问号可以避免将它们追加，例如：\r\n```\r\nrewrite ^/users/(.*)$ /show?user=$1? last;\r\n```\r\n\r\n如果正则表达式包括“}”或“；”字符，则整个表达式应以单引号或双引号括起来。\r\n', 'normal', 91, b'0', b'1'),
(105, 'Nginx正向代理和反向代理', 1560582500, 1560669273, 1034, '什么是代理？\r\n> 代理（英语：Proxy），也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。 \r\n\r\n## 正向代理和反向代理的概念\r\n\r\n盗了两张图，第二张比较形象：\r\n\r\n![正向代理和反向代理](/uploads/artimgs/105/42b2f9372ed0e17bb4c72784084ce1b6.jpg \"正向代理和反向代理\")\r\n\r\n![正向代理和反向代理](/uploads/artimgs/105/fdfde2d9b6c3c129032f6d96b0cbe19d.png \"正向代理和反向代理\")\r\n\r\n### 正向代理\r\n你（client）需要访问某台服务器（server），但是你没有访问渠道，只能通过一个代理服务器（proxy）去访问server。这个过程就要正向代理，特点是你知道你访问的目的地但是只能通过代理去访问。\r\n\r\n正向代理的代理服务器（proxy）代理的是客户端（clinet）。\r\n\r\n正向代理的有个典型例子是“翻墙”，比如你通过代理去访问Google。\r\n\r\n### 反向代理\r\n你（client）访问了某台服务器，但实际上这台服务器只是一个代理服务器（proxy），代理服务器会把请求转交给真正提供服务的服务器（server）。这个过程就要反向代理，特点是你只知道你访问的代理服务器能提供服务，但是不知道谁是真正的服务提供者（也不需要知道）。\r\n\r\n反向代理的代理服务器（proxy）代理的是服务器端（server）。\r\n\r\n反向代理的一般用于服务器负载均衡。\r\n\r\n## Nginx配置正向代理\r\n\r\n打开配置文件，在http块增加下面代码：\r\n\r\n```\r\n\r\n# http正向代理\r\nserver {\r\n	# 指定DNS服务器IP地址\r\n	resolver 114.114.114.114;\r\n	\r\n	# 监听端口(http)\r\n	listen 80;\r\n	\r\n	location / {\r\n		# 设定代理服务器的协议和地址\r\n		proxy_pass $scheme://$http_host$request_uri;\r\n		proxy_set_header HOST $http_host;\r\n		proxy_buffers 256 4k;\r\n		proxy_max_temp_file_size 0k;\r\n		proxy_connect_timeout 30;\r\n		proxy_send_timeout 60;\r\n		proxy_read_timeout 60;\r\n		proxy_next_upstream error timeout invalid_header http_502;\r\n	}\r\n	\r\n	#access_log logs/proxy_access.log;\r\n	#error_log  logs/proxy_error.log;\r\n}\r\n\r\n# https正向代理\r\nserver {\r\n	# 指定DNS服务器IP地址\r\n	resolver 114.114.114.114;\r\n	\r\n	# 监听端口(http)\r\n	listen 443;\r\n	\r\n	location / {\r\n		# 设定代理服务器的协议和地址\r\n		proxy_pass $scheme://$http_host$request_uri;\r\n		\r\n		# 代理配置参数\r\n		proxy_set_header HOST $http_host;\r\n		proxy_buffers 256 4k;\r\n		proxy_max_temp_file_size 0k;\r\n		proxy_connect_timeout 30;\r\n		proxy_send_timeout 60;\r\n		proxy_read_timeout 60;\r\n		proxy_next_upstream error timeout invalid_header http_502;\r\n	}\r\n	\r\n	#access_log logs/proxy_access.log;\r\n	#error_log  logs/proxy_error.log;\r\n}\r\n```\r\n\r\n## Nginx配置反向代理\r\n\r\nNginx 反向代理的指令不需要新增额外的模块，默认自带 proxy_pass 指令，只需要修改配置文件就可以实现反向代理。\r\n\r\n打开配置文件，在http块增加：\r\n```\r\n# 设定实际的服务器列表 \r\nupstream proxy_server{\r\n	server 127.0.0.1:8080;\r\n	server 127.0.0.1:8081;\r\n	# ...\r\n}\r\n```\r\n注：upstream作用是使nginx轮询访问，每一个请求按时间顺序逐一分配到不同的后端服务器。\r\n\r\n然后在配置代理服务器的server块中增加：\r\n```\r\n#反向代理的路径（和upstream绑定），location 后面设置映射的路径\r\nlocation / {\r\n	proxy_pass http://proxy_server;\r\n	\r\n	# 代理配置参数\r\n	proxy_set_header Host $host;\r\n	proxy_set_header X-Forwarder-For $remote_addr;\r\n	proxy_connect_timeout 180;\r\n	proxy_send_timeout 180;\r\n	proxy_read_timeout 180;\r\n} \r\n```\r\n\r\n## 参考文章\r\n1. [正向代理和反向代理的区别](http://baijiahao.baidu.com/s?id=1600687025749463237&wfr=spider&for=pc \"正向代理和反向代理的区别\")\r\n2. [Nginx正向代理与反向代理 - 简书](https://www.jianshu.com/p/ae76c223c6ef \"Nginx正向代理与反向代理 - 简书\")\r\n', 'normal', 148, b'0', b'1'),
(106, 'Nginx之负载均衡', 1560673420, 1560675819, 1034, '## 什么是负载均衡\r\n> 负载均衡是高可用网络基础架构的的一个关键组成部分，有了负载均衡，我们通常可以将我们的应用服务器部署多台，然后通过负载均衡将用户的请求分发到不同的服务器用来提高网站、应用、数据库或其他服务的性能以及可靠性。\r\n\r\n简单来说就是将客户的请求均衡的分配给多台服务器处理。\r\n\r\n\r\n## Nginx负载均衡相关指令\r\nNginx实现负载均衡需要了解两个指令：upstream 和 proxy_pass 。\r\n\r\n### upstream指令\r\n指令语法：\r\n>Syntax:	upstream name { ... }\r\nDefault:	—\r\nContext:	http\r\n\r\n官方文档的例子：\r\n```\r\nresolver 114.114.114.114;\r\n\r\nupstream backend {\r\n    server backend1.example.com weight=5;\r\n    server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;\r\n    server unix:/tmp/backend3;\r\n\r\n    server backup1.example.com  backup;\r\n}\r\n```\r\nbackend 是这个服务器集群的名字，upstream中的每个server增加一台服务器，服务器地址可以写ip、unix sock、域名（需要使用resolver指令配置dns解析）。\r\n\r\nserver指令语法：\r\n>Syntax:	server address [parameters];\r\nDefault:	—\r\nContext:	upstream\r\n\r\n常见parameters有：\r\n- weight=number  设置服务器的权重（默认值为1）。\r\n- max_conns=number  限制与代理服务器的同时活动连接的最大数量(1.11.5)。如果服务器组不驻留在共享内存中，则每个工作进程的限制都有效。（默认值为0，意味着没有限制）\r\n- max_fails=number  设置的持续时间内与服务器通信的失败尝试次数（默认值为1）。\r\n- fail_timeout=time  设置的持续时间内与服务器通信的失败尝试时间（默认值为10s）。\r\n- backup  将服务器标记为备份服务器。当主服务器不可用时，将传递请求。\r\n- down  将服务器标记为永久不可用。\r\n- resolve  监视与服务器域名相对应的IP地址的变化，并自动修改upstream配置，而不需要重新启动nginx(1.5.12)。服务器组必须驻留在共享内存中。\r\n\r\n更多详细查看官网文档： http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\r\n\r\n### proxy_pass指令\r\nproxy_pass指令语法：\r\n>Syntax:	proxy_pass URL;\r\nDefault:	—\r\nContext:	location, if in location, limit_except\r\n\r\n设置代理服务器的协议和地址以及应该将位置映射到的可选URI。作为协议，可以指定“http”或“https”。可以将地址指定为域名或IP地址，并指定一个可选端口，或作为UNIX域套接字路径，在单词“unix”之后指定，并以冒号括起来。\r\n\r\n更多详细查看官网文档： http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass\r\n\r\n\r\n## Nginx负载均衡算法\r\n\r\n负载均衡算法是指：将客户端请求如何分配给服务器集群处理的方法。Nginx中常用的负载均衡算法有：\r\n\r\n### 轮询法\r\n将客户端请求按照时间顺序依次分配给后台服务器。\r\n\r\n适用于后台机器性能一致的情况。 \r\n\r\n### weight（权重法）\r\n通过设置服务器的权重值，指定服务器请求分配几率，weight和访问率成正比。\r\n\r\n用于后端服务器性能不均的情况。\r\n\r\n### ip_hash（ip哈希法）\r\n根据请求者ip的hash值将请求发送到后台服务器中，可以保证来自同一ip的请求被打到固定的机器上。\r\n\r\n可以解决session问题。\r\n\r\n### url_hash（url哈希法）\r\n根据请求的url的hash值将请求分到不同的后台服务器，当后台服务器为缓存的时候效率高。\r\n\r\n### fair（最短响应时间法）\r\n根据后台响应时间来分发请求，响应时间短的分发的请求多。\r\n\r\n## least_conn（最少链接数法）\r\n最少链接数，哪个机器连接数少就发分发给哪个机器。\r\n\r\n## 配置负载均衡\r\n\r\n### 配置upstream\r\nupstream指令的上下文是http，因此先在配置文件的http块中添加upstream块：\r\n\r\n```\r\n    # 设定实际的服务器列表 \r\n    upstream backend{\r\n        # ip哈希法\r\n        #ip_hash;\r\n\r\n        # 最少链接数法\r\n        #least_conn;\r\n\r\n        # 最短响应时间法\r\n        #fair;\r\n\r\n        # url哈希法\r\n        #hash $request_uri;\r\n        #hash_method crc32;\r\n        \r\n		# 设置weight配置权重法\r\n        server address [weight=w1] [parameters];\r\n        server address [weight=w2] [parameters];\r\n        server address [weight=w3] [parameters];\r\n        # ...\r\n    }\r\n```\r\n\r\n根据需要选择合适的负载均衡算法。\r\n\r\n### 配置proxy_pass\r\n\r\n在你需要的http块的server块中添加：\r\n\r\n```\r\n# 设置代理\r\nproxy_pass http://backend;\r\n# 设置请求主机\r\nproxy_set_header Host $host;\r\n# 设置客户端请求IP（让真正处理请求的服务器知道客户端IP）\r\nproxy_set_header X-Forwarder-For $remote_addr;\r\n```\r\n\r\n\r\n## 参考文章\r\n1. [一篇文章彻底了解清楚什么是负载均衡](https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650121487&idx=1&sn=71086d1b4cf4231c6c1d0fcea5ab9ea0&chksm=f36bb82ec41c31387aef7ad7df1cf2a5a89f5f3d6d0505f4d2220f8dd792e4e59934dfde9124&mpshare=1&scene=1&srcid=0614WlRZiAw05dGZkuyGdmC6#rd \"一篇文章彻底了解清楚什么是负载均衡\") （推荐阅读）\r\n2. [Nginx配置upstream实现负载均衡 - wzjhoutai - 博客园](https://www.cnblogs.com/wzjhoutai/p/6932007.html \"Nginx配置upstream实现负载均衡 - wzjhoutai - 博客园\")\r\n', 'normal', 126, b'0', b'1'),
(107, 'Nginx配置HTTPS', 1560696023, 1560754414, 1034, '## HTTPS介绍\r\nHTTPS（HyperText Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。可以理解为 HTTPS = HTTP + SSL/TLS，即在HTTP协议基础上加入了加密层，保障了数据传输的安全。\r\n\r\n这里只要简单了解，更详细的内容可以查看文章末尾的第一篇参考文章。\r\n\r\n## 如何让你的网站支持HTTPS\r\n要支持HTTPS你需要做两件事，获得一个SSL证书，然后在你的web服务器上安装这个证书。\r\n\r\n### 如何申请SSL证书\r\n我的SSL证书是在：[FreeSSL首页 - FreeSSL.cn 一个申请免费HTTPS证书的网站](https://freessl.cn/ \"FreeSSL首页 - FreeSSL.cn 一个申请免费HTTPS证书的网站\")，这个网站申请的。\r\n\r\n个人的话可以使用免费证书，商用的话可以使用收费的。\r\n\r\n具体申请过程就不说了，可以查看FreeSSL给的视频教程：[如何使用FreeSSL申请免费证书?](https://blog.freessl.cn/how-to-use-freessl-issue-free-certificates/ \"如何使用FreeSSL申请免费证书?\")\r\n\r\n### Nginx配置HTTPS\r\n\r\n首先确认你的Nginx安装了SSL模块，使用实现下面的命名查看编译选项：\r\n```\r\nnginx -V\r\n```\r\n如果发现有ngx_http_ssl_module说明支持SSL，如果没有需要重新编译，具体可以查看文章末尾的第二篇参考文章。\r\n\r\n\r\n获取好证书后，你会得到两个文件：crt文件和key文件 或者是 pem文件和key文件。把它们上传到你的服务器上，然后打开Nginx配置文件，增加一个server块：\r\n```\r\n# 配置HTTPS\r\nserver {\r\n        listen 443 ssl;\r\n		server_name example.com;\r\n        # SSL设置\r\n		ssl_certificate      /path/to/xxx.crt 或 /path/to/xxx.pem;\r\n        ssl_certificate_key  /path/to/xxx.key;\r\n        ssl_protocols        TLSv1.2 TLSv1.1 TLSv1;\r\n        ssl_ciphers   ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n        ssl_prefer_server_ciphers   on;\r\n        ssl_session_timeout 5m;\r\n		\r\n		# 其他配置省略\r\n		# ...\r\n}\r\n```\r\n这里只列出了与HTTPS有关的配置，其他配置和普通server一致。\r\n\r\n配置好HTTPS后，原来是通过HTTP访问，我们可以修改原来的HTTP配置，让它跳转到新的HTTPS上。\r\n\r\n```\r\nserver {\r\n		listen 80;\r\n		server_name example.com;\r\n		# 使用301跳转\r\n        return 301 https://$host$request_uri;\r\n		\r\n		# 其他配置省略\r\n		# ...\r\n}\r\n```\r\n\r\n配置好了别忘了重启Nginx。\r\n\r\n其他服务器的配置方法也可以参考FreeSSL给的例子：[如何安装我们的 SSL 证书，IIS、Nginx、Apache、Exchange、Tomcat？](https://blog.freessl.cn/how-do-i-install-an-ssl-certificate-collection/ \"如何安装我们的 SSL 证书，IIS、Nginx、Apache、Exchange、Tomcat？\")\r\n\r\n## 网站不能访问的问题\r\n\r\n如果配置好了后不能访问，可能源于有：\r\n- 证书有问题\r\n- 配置文件有问题\r\n- 防火墙443端口没有打开\r\n- 如果是云服务器，可能安全组没有打开443端口\r\n\r\n## 参考文章\r\n1. [HTTPS系列干货（一）：HTTPS 原理详解 - 知乎](https://zhuanlan.zhihu.com/p/27395037 \"HTTPS系列干货（一）：HTTPS 原理详解 - 知乎\")\r\n2. [nginx实现https网站设置 - 静小妞 - 博客园](https://www.cnblogs.com/jingxiaoniu/p/6745254.html \"nginx实现https网站设置 - 静小妞 - 博客园\") （里面有自己颁布SSL证书的方法）\r\n3. [让网站永久拥有HTTPS - 申请免费SSL证书并自动续期 - Lucien\'s Blog](https://blog.lucien.ink/archives/81/ \"让网站永久拥有HTTPS - 申请免费SSL证书并自动续期 - Lucien\'s Blog\")\r\n4. [FreeSSL博客](https://blog.freessl.cn/ \"FreeSSL博客\") （里面有一些关于SSL证书的知识）\r\n\r\n\r\n', 'normal', 94, b'0', b'1'),
(108, '', 0, 0, 0, '', 'edit', 0, b'0', b'0'),
(109, 'Linux下安装Memcached', 1560776231, 1560778453, 1036, '今天开始学习NoSQL——Memcached。工欲善其事必先利其器，首先需要学会如何安装。这里总结一下步骤。\r\n\r\n## Memcached介绍\r\n官网介绍：\r\n>What is Memcached?\r\nFree & open source, high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\r\n\r\n>Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.\r\n\r\n>Memcached is simple yet powerful. Its simple design promotes quick deployment, ease of development, and solves many problems facing large data caches. Its API is available for most popular languages.\r\n\r\n翻译：\r\n什么是Memcached?\r\n\r\n免费、开放源码、高性能、分布式内存对象缓存系统，在本质上是通用的，但目的是通过减轻数据库负载来加快动态Web应用程序的速度。\r\n\r\nmemcached是一个内存中的键值（key-value）存储，用于存储来自数据库调用、API调用或页面呈现结果的小块任意数据(字符串、对象)。\r\n\r\nmemcached很简单，但功能强大。它的简单设计促进了快速部署，易于开发，并解决了许多面临的大数据缓存问题。它的API适用于大多数流行语言。\r\n\r\n\r\n## 安装Memcached\r\n先安装依赖：\r\n```shell\r\nyum -y install libevent libevent-devel\r\n```\r\n\r\n下载源码:\r\n```shell\r\ncd /usr/local/src\r\nwget -O memcached.tar.gz https://memcached.org/latest\r\n```\r\nMemcached源码包很小，不到500K。\r\n\r\n解压源码：\r\n```shell\r\ntar -zxvf memcached.tar.gz\r\n```\r\n\r\n配置编译选项:\r\n```shell\r\ncd memcached-1.5.13\r\n./configure --prefix=/usr/local/memcached\r\n```\r\n\r\n编译安装:\r\n```shell\r\nmake && make install\r\n```\r\n\r\n## 启动及测试\r\n\r\n### 启动memcached\r\n```shell\r\n/usr/local/memcached/bin/memcached -u nobody -p 11211 -d -m 64\r\n```\r\n各参数含义：\r\n- -u 运行Memcache的用户\r\n- -p Memcached监听端口号，默认11211\r\n- -m 分配给Memcache使用的内存大小，单位MB\r\n- -d 表示以守护进程（后台运行）的方式启动\r\n\r\n其他更多参数使用 --help 查看。\r\n\r\n### 测试\r\n先查看memcached进程是否启动：\r\n```shell\r\nps -aux | grep memcached\r\n```\r\n输出类似如下则已经启动：\r\n```\r\nnobody    5896  0.0  0.2 414876  4176 ?        Ssl  20:20   0:00 /usr/local/memcached/bin/memcached -d -m 64 -u nobody\r\nroot      5920  0.0  0.0 112724   984 pts/0    S+   20:52   0:00 grep --color=auto memcached\r\n```\r\n\r\n使用telnet测试连接到memcached：\r\n```shell\r\ntelnet 127.0.0.1 11211\r\n```\r\n\r\n显示如下则连接成功：\r\n```\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is \'^]\'.\r\n```\r\n\r\n如果提示telnet命令没有找到，使用yum进行安装：\r\n```shell\r\nyun -y install telnet\r\n```\r\n\r\n\r\n## 参考文章\r\n1. [memcached官网](https://memcached.org/ \"memcached官网\")\r\n2. [Install · memcached/memcached Wiki](https://github.com/memcached/memcached/wiki/Install \"Install · memcached/memcached Wiki\")\r\n3. [Linux Memcached 安装 | 菜鸟教程](https://www.runoob.com/memcached/memcached-install.html \"Linux Memcached 安装 | 菜鸟教程\")\r\n\r\n\r\n\r\n', 'normal', 104, b'0', b'1'),
(110, 'Windows下安装PHP的memcache扩展', 1560851521, 1561274108, 1000, 'Windows上PHP集成的软件开发环境如wampp、phpstudy，对于一般的扩展都有，memcache扩展需要自己安装，这里总结一下。\r\n\r\n\r\n## windows下如何安装扩展？\r\nwindows安装扩展是比较容易的，不需要自己去编译，一般的步骤为：\r\n1. 下载你要安装的php扩展库的dll文件，并放在php安装目录下的ext目录\r\n2. 修改php.ini配置文件，加上 `extension=xxx.dll`\r\n\r\n然后你可以在`phpinfo()`或者使用`php -m`查看是否已经加载。\r\n\r\n\r\n## 安装memcache服务\r\n要在php使用memcached先确认已经安装了memeched服务。\r\n\r\n官网上并未提供 Memcached 的 Windows 平台安装包，我们可以使用以下链接来下载，你需要根据自己的系统平台及需要的版本号点击对应的链接下载即可：\r\n\r\n32位系统 1.4.4版本：http://static.runoob.com/download/memcached-win32-1.4.4-14.zip\r\n64位系统 1.4.4版本：http://static.runoob.com/download/memcached-win64-1.4.4-14.zip\r\n\r\n解压到合适的位置，管理员身份运行cmd，cd到解压目录下，执行：\r\n```cmd\r\nmemcached.exe -d install\r\n```\r\n然后打开windows的服务管理，将memcached启动。\r\n\r\n其他版本：[Windows 下安装 Memcached | 菜鸟教程下安装 Memcached](https://www.runoob.com/memcached/window-install-memcached.html \"Windows 下安装 Memcached | 菜鸟教程下安装 Memcached\")\r\n\r\n## 安装memcache扩展\r\n\r\n### 下载扩展库的dll\r\nPHP < 7.0 ：http://pecl.php.net/package/memcache/3.0.8/windows\r\nPHP >= 7.0 ：https://github.com/nono303/PHP7-memcache-dll\r\n下载好之后，放到php安装目录的ext目录下面，可以重命名为：php-memcache.dll\r\n\r\n### 修改php.ini\r\n打开php配置文件php.ini，增加一行：\r\n```\r\nextension=php_memcache.dll\r\n```\r\n使用php-cgi运行时需要重启php-cgi或php-fpm。\r\n\r\n## 测试\r\nphp-cli：`php -m`\r\n\r\nphp-cgi: `phpinfo()` 或 其他探针\r\n\r\n有memcache则安装成功。\r\n\r\n## 参考文章：\r\n1. [windows下安装memcached及php_memcached扩展（踩坑） - TXX - CSDN博客](https://blog.csdn.net/txx_c/article/details/79315165 \"windows下安装memcached及php_memcached扩展（踩坑） - TXX - CSDN博客\")\r\n2. [window下安装php7的memcached扩展 - xmlife的专栏 - CSDN博客](https://blog.csdn.net/xmlife/article/details/79458991 \"window下安装php7的memcached扩展 - xmlife的专栏 - CSDN博客\")\r\n', 'normal', 147, b'0', b'1'),
(111, 'Memcached中flags的作用', 1560864693, 1561274147, 1036, '我们在使用memcached的增删改查的时候，应该知道里面有一个`flags`参数，可能有很多人不知道这个参数和作用。\r\n\r\n我们知道memcached是保存的是key-value，而flags仅仅用来给你存的这个数据打一个标签（整数）。memcached本身并不会对它进行任何处理的。\r\n\r\n由于memcached的数据类型比较单一，只能保存字符串，像对象、数组都是需要序列化之后才能保存的（序列化和还原工作由各个语言的提供的接口完成）。而序列号之后，都是字符串了，并不能知道实际上保存的是是什么，这个时候flags可以用来标记原来的数据类型了，就可以区分保存的是什么类型。\r\n\r\n总之一句话，flags用来给你存的这个数据打个标签，怎么使用完全由你决定。\r\n', 'normal', 83, b'0', b'1'),
(112, '【转】使用PECL安装扩展', 1560947002, 1561038248, 1000, '原文：[什么是phpize及其用法 - weixin_38674371的博客 - CSDN博客](https://blog.csdn.net/weixin_38674371/article/details/84714696 \"什么是phpize及其用法 - weixin_38674371的博客 - CSDN博客\")\r\n\r\n应用场景：\r\n在使用php的过程中，我们常常需要去添加一些PHP扩展库。但是重新对php进行编译是比较蛮烦的，所以这时候我们可以使用phpize对php进行添加扩展。并且phpize编译的扩展库可以随时启用或停用，比较灵活。\r\n\r\n使用方法：\r\nextention为要挂载的扩展包\r\n\r\n`wget extension_name.tar.gz` 下载相应的扩展包并解压。\r\n\r\n`cd extension_name/` 切换到扩展extension的目录中\r\n\r\n`/path/to/php/bin/phpize` 运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。\r\n\r\n`./configure --with-php-config=/php/bin/php-config` 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加`--with-php-config` 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。\r\n\r\n`make && make install` 编译模块\r\n\r\n编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。\r\n作用\r\n\r\n其实phpize是一个运行脚本，主要作用是检测php的环境还有就是在特定的目录生成相应的configure文件,这样make install之后，生成的 .so 文件才会自动加载到php扩展目录下面。\r\n', 'normal', 111, b'0', b'0'),
(113, 'Linux下安装PHP的memcached扩展', 1560947811, 1561273982, 1000, '在PHP中，memcache扩展和memcached扩展是两个不同的扩展，注意区分一下：[php的memcache和memcached扩展区别](https://www.cnblogs.com/lechie/p/4429232.html \"php的memcache和memcached扩展区别\")。\r\n\r\n## 使用pecl安装\r\n\r\n安装 libmemcached：\r\n```shell\r\nyum -y install libmemcached-devel\r\n```\r\n\r\npecl编译安装：\r\n```shell\r\npecl install memcached\r\n```\r\n\r\n修改 php.ini 文件，添加：\r\n```\r\n[memcached]\r\nextension=memcached.so\r\n```\r\n\r\n## 下载源码安装\r\n```shell\r\n# 下载\r\ncd /usr/local/src\r\npecl download memcached 或 wget 或 curl\r\n\r\n# 解压\r\ntar -zxvf memcached-xxx\r\n\r\n# 切换目录\r\ncd memcached-xxx\r\n\r\n# 编译安装\r\nphpize\r\n./configure\r\n```\r\n\r\n然后重启php-cgi，然后使用`phpinfo()`或者`php -m`查看是否安装。\r\n\r\n## 参考文章\r\n[通过 pecl 快速安装 php-memcached 扩展 - netmouse的个人页面 - OSCHINA](https://my.oschina.net/netmouse/blog/614901 \"通过 pecl 快速安装 php-memcached 扩展 - netmouse的个人页面 - OSCHINA\")\r\n', 'normal', 206, b'0', b'1'),
(114, 'Linux下安装Redis', 1561002780, 1561038177, 1036, '## 安装步骤\r\n去Redis官网：[Redis官网下载页](https://redis.io/download \"Redis官网下载页\") ，选择你想要的版本，复制一下载链接。\r\n\r\n下载源码：\r\n```shell\r\ncd /usr/local/src\r\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\r\n```\r\n\r\n解压源码：\r\n```shell\r\ntar -zxvf redis-5.0.5.tar.gz\r\n```\r\n\r\n编译并安装：\r\n```shell\r\ncd redis-5.0.5\r\nmake && make PREFIX=/usr/local/redis install\r\n```\r\nPREFIX 为Redis安装位置。\r\n\r\n\r\n## 启动Redis\r\n先启动redis服务端：\r\n```shell\r\n/usr/local/redis/bin/redis-server\r\n```\r\n启动后截图如下：\r\n![启动 redis-server](/uploads/artimgs/114/af6b6bbcd8124bdd3e30b4efc8827670.png \"启动 redis-server\")\r\n\r\n然后可以启动redis本地命令行：\r\n```shell\r\n/usr/local/redis/bin/redis-cli\r\n```\r\n![启动redis-cli](/uploads/artimgs/114/945a79ef9eafabed20cce1aced6c219c.png \"启动redis-cli\")\r\n\r\n\r\n## 配置Redis\r\n下载的源码包里面带了配置文件，你可以直接使用：\r\n```\r\nmkdir /usr/local/redis/etc\r\ncp /usr/local/src/redis-5.0.5/redis.conf /usr/local/redis/etc\r\n```\r\n\r\n你可以对配置文件进行一些修改：\r\n```shell\r\nvim /usr/local/src/redis-5.0.5/redis.conf\r\n```\r\n\r\n然后启动 redis-server 的时候指定配置文件：\r\n```shell\r\n/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\r\n```\r\n\r\n\r\n## 参考文章\r\n1. [Redis 安装 | 菜鸟教程](https://www.runoob.com/redis/redis-install.html \"Redis 安装 | 菜鸟教程\")\r\n2. [Redis installation](https://redis.io/download#installation \"Redis installation\")\r\n', 'normal', 317, b'0', b'1'),
(115, '', 0, 0, 0, '', 'edit', 0, b'0', b'0'),
(116, 'Windows安装Redis', 1561027298, 1561105884, 1036, 'Windows下安装Redis主要是为了在本地进行测试，项目实际部署一般还是Linux系统。\r\n\r\nRedis官方不支持Windows。但是，微软开发并维护了针对Windows的版本。\r\n\r\n## 下载\r\n\r\n微软的Redis：[Releases · microsoftarchive/redis](https://github.com/microsoftarchive/redis/releases \"Releases · microsoftarchive/redis\")\r\n\r\n打开页面后选择你需要的版本，然后点击“Assets”:\r\n\r\n![Redis下载](/uploads/artimgs/116/54de770c2b17632eeb381f86efac81a3.png \"Redis下载\")\r\n\r\n选择第一个或者第二个文件下载都可以，建议第一个。\r\n\r\n下载好之后执行即可安装，配置选项根据需要修改，如果不知道也可以全部默认。但是你最好记住安装位置，方便以后的操作。\r\n\r\n## 启动运行\r\n打开cmd，使用cd切换到安装目录，然后执行：\r\n```cmd\r\nredis-server redis.windows.conf\r\n```\r\n\r\n如果没出错则启动成功，然后可以执行下面命令进入redis命令行：\r\n```cmd\r\nredis-cli\r\n```\r\n\r\n可以输入下面进行测试一下：\r\n```\r\n127.0.0.1:6379> set msg hello\r\nOK\r\n127.0.0.1:6379> get msg\r\n\"hello\"\r\n```\r\n输入`quit`可退出。\r\n\r\n## 将Redis加入系统服务\r\n在redis安装目录下执行下面命令加入系统服务（用管理员身份启动cmd）：\r\n```\r\nredis-server --service-install redis.windows.conf\r\n```\r\n提示：Redis successfully installed as a service. 表示加入服务成功！\r\n\r\n然后你下次可以直接在cmd或powershell（用管理员身份启动）使用下面命令管理redis：\r\n```\r\n# 启动redis服务\r\nnet start Redis\r\n\r\n# 停止redis服务\r\nnet stop Redis\r\n```\r\n\r\n如果 Redis 设置了密码，你可以在计算机管理>服务管理，里面找到Redis，然后加上启动参数：\r\n```\r\n-a password\r\n```\r\n\r\n## 参考文章\r\n1. [Redis安装（Windows环境下Redis安装） - 老麻 - CSDN博客](https://blog.csdn.net/antma/article/details/79225084 \"Redis安装（Windows环境下Redis安装） - 老麻 - CSDN博客\")\r\n2. [Redis 安装 | 菜鸟教程](https://www.baidu.com/link?url=D_me4QVwgho03GeIcNq6jduMtSRkNDDI_h1Hel0rUlNY182MHJ8z_QlNAczXisIMqHGDYsIJwMoypq0twT5rw_&wd=&eqid=dab67d960000ee04000000065d0b5911 \"Redis 安装 | 菜鸟教程\")\r\n\r\n\r\n\r\n', 'normal', 164, b'0', b'1'),
(117, 'Windows安装PHP的Redis扩展', 1561028552, 1561273908, 1036, '## 安装步骤\r\n去PECL载dll文件：[PECL :: Package :: redis](https://pecl.php.net/package/redis/4.3.0/windows \"PECL :: Package :: redis\")，注意要选择和你电脑上的php版本一致的。如果不知道可以用`php -v`查看。\r\n\r\n下载好之后将压缩包里面的`php_redis.dll`放到php安装目录下的ext目录。\r\n\r\n修改php.ini文件，加上：\r\n```\r\n[Redis]\r\nextension=php_redis.dll\r\n```\r\n\r\n需要重启 php-fpm/php-cgi。\r\n\r\n## 查看redis扩展\r\n\r\n然后可以在`php -m`和`phpinfo()`里面查看是否加载了redis扩展。\r\n\r\ncmd下执行`php -m`：\r\n\r\n![php-m redis](/uploads/artimgs/117/a9c7170d18c9c3a737d8295fb103a2ee.png \"php-m redis\")\r\n\r\n查看`phpinfo()`：\r\n\r\n![phpinfo redis](/uploads/artimgs/117/ac2f1e481098387ff73614e426993aa0.png \"phpinfo redis\")\r\n', 'normal', 147, b'0', b'1'),
(118, ' Nginx限制同一IP的访问频率', 1561277067, 1561277067, 0, '未完待续。。\r\n', 'edit', 2, b'0', b'1'),
(119, '', 0, 0, 0, '', 'edit', 1, b'0', b'0'),
(120, 'Linux下安装MongoDB', 1562138127, 1562153002, 1036, 'Linux下安装MongoDB相对于Redis、Memcached要简单很多，因为它不需要我们自己去编译，我们只需要下载软件包解压就可以了。\r\n\r\n## 下载软件包\r\nMongoDB官网：https://www.mongodb.com\r\nMongoDB文档：https://docs.mongodb.com/manual\r\n软件包下载页面：https://www.mongodb.com/download-center/community\r\n\r\n根据自己的操作系统选择合适的版本：\r\n\r\n![MongoDB下载](/uploads/artimgs/120/390343b1e2dd576195e970a607ef6bfc.png \"MongoDB下载\")\r\n\r\n我这里使用wget进行下载，先复制页面上的下载地址，然后执行命令：\r\n```shell\r\ncd /usr/local/src\r\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.10.tgz\r\n```\r\n\r\n\r\n## 解压和安装\r\n解压压缩包：\r\n```shell\r\ntar -zxvf mongodb-linux-x86_64-4.0.10.tgz\r\n```\r\n\r\n移动到 /usr/local/：\r\n```shell\r\nmv ./mongodb-linux-x86_64-4.0.10.tgz /usr/local/mongodb\r\n```\r\n\r\n## 可执行二进制文件\r\n切换到mongodb目录下：\r\n```shell\r\ncd /usr/local/mongodb\r\nll -h\r\n```\r\n![mongodb目录下文件](/uploads/artimgs/120/9a285ff8fc36e1d560f64fd76b77c3f1.png \"mongodb目录下文件\")\r\n\r\nmongodb目录下是一些说明文本文件，我们不需要管它，重点是知道bin目录下的各可执行文件的作用：\r\n```shell\r\nll -h ./bin\r\n```\r\n![mongodb可执行文件说明](/uploads/artimgs/120/2a0dbe5b1617b03ac55733eb06e997bd.png \"mongodb可执行文件说明\")\r\n\r\n\r\n## 启动 MongoDB\r\n先创建数据文件目录和日志文件目录：\r\n```shell\r\nmkdir /usr/local/mongodb/{data,log}\r\n```\r\n\r\n启动MongoDB服务：\r\n```shell\r\n/usr/local/mongodb/bin/mongod --fork --port 27017 --dbpath /usr/local/mongodb/data --logpath /usr/local/mongodb/log/mongod.log\r\n```\r\n\r\n参数解释说明:\r\n- --fork    作为后台进程运行\r\n- --port    运行端口(默认27017)\r\n- --dbpath  数据存储目录\r\n- --logpath 日志存储文件\r\n其他参数使用`--help`查看，或者参考MongoDB文档。\r\n\r\nmongodb非常的占磁盘空间，刚启动后要占3-4G左右，如果你用虚拟机练习，可能空间不够，导致无法启动。可以用加上`--smallfiles`选项来启动，将会占用较小空间(400M左右)。\r\n\r\n查看mongodb：\r\n```shell\r\nps -aux | grep mongod\r\n```\r\n\r\n输出类似如下说明安装MongoDB成功，并且可以正常启动。\r\n```\r\n[root@localhost data]# ps -aux | grep mongod\r\nroot      3851  0.9  2.8 991600 53260 ?        Sl   15:29   0:00 /usr/local/mongodb/bin/mongod --fork --port 27017 --dbpath /usr/local/mongodb/data --logpath /usr/local/mongodb/log/mongod.log\r\nroot      3881  0.0  0.0 112724   988 pts/0    R+   15:31   0:00 grep --color=auto mongod\r\n```\r\n\r\n停止运行mongod需要指定数据存放目录：\r\n```shell\r\n/usr/local/mongodb/bin/mongod --dbpath /usr/local/mongodb/data --shutdown\r\n```\r\n\r\n\r\n## 使用 MongoDB 客户端（mongo Shell）\r\n执行mongo：\r\n```shell\r\n/usr/local/mongodb/bin/mongo --host localhost --port 27017\r\n```\r\n参考含义和之前相同，其他参数使用`--help`查看，或者参考MongoDB文档。mongo其实它是一个JavaScript shell，你可以使用js语法操作。\r\n\r\n\r\n## 参考文章\r\n1. [Linux 平台安装 MongoDB | 菜鸟教程](https://www.runoob.com/mongodb/mongodb-linux-install.html \"Linux 平台安装 MongoDB | 菜鸟教程\")\r\n2. MongoDB文档：https://docs.mongodb.com/manual\r\n\r\n', 'normal', 112, b'0', b'1'),
(121, 'MongoDB配置文件说明', 1562150513, 1562152860, 1036, '原文：[NoSQL之【MongoDB】学习（三）：配置文件说明](https://www.cnblogs.com/zhoujinyi/p/3130231.html \"NoSQL之【MongoDB】学习（三）：配置文件说明\")\r\n\r\n启动MongoDB有2种方式，一是直接指定配置参数，二是指定配置文件。这里先介绍配置文件，启动方式如下：\r\n```shell\r\nmongod --config /etc/mongodb.conf\r\n```\r\n配置如下：\r\n\r\n**verbose**：日志信息冗余。默认false。提高内部报告标准输出或记录到logpath配置的日志文件中。要启用verbose或启用verbosity 用vvvv参数，如：\r\n```\r\nverbose = true\r\nvvvv = true\r\nps：启动verbose冗长信息，它的级别有 vv~vvvvv，v越多级别越高，在日志文件中记录的信息越详细。\r\n```\r\n\r\n**port**：端口。默认27017，MongoDB的默认服务TCP端口，监听客户端连接。要是端口设置小于1024，比如1021，则需要root权限启动，不能用mongodb帐号启动，（普通帐号即使是27017也起不来）否则报错：[mongo --port=1021 连接]\r\n```\r\nERROR: listen(): bind() failed errno:13 Permission denied for socket: 127.0.0.1:1021\r\n```\r\n```\r\nport = 27017\r\n```\r\n\r\n**bind_ip**：绑定地址。默认127.0.0.1，只能通过本地连接。进程绑定和监听来自这个地址上的应用连接。要是需要给其他服务器连接，则需要注释掉这个或则把IP改成本机地址，如192.168.200.201[其他服务器用 mongo --host=192.168.200.201 连接] ，可以用一个逗号分隔的列表绑定多个IP地址。\r\n```\r\nbind_ip = 127.0.0.1\r\n```\r\n\r\n**maxConns**：最大连接数。默认值：取决于系统（即的ulimit和文件描述符）限制。MongoDB中不会限制其自身的连接。当设置大于系统的限制，则无效，以系统限制为准。这对于客户端创建很多“表”，允许连接超时而不关闭“表”的时候很有用。设置该值的高于连接池和总连接数的大小，以防止尖峰时候的连接。注意：不能设置该值大于20000。\r\n```\r\nmaxConns = 100\r\n```\r\n\r\n**objcheck**: 强制验证客户端请求。2.4的默认设置为objcheck成为true，在早期版本objcheck默认为false。因为它强制验证客户端请求，确保客户端绝不插入无效文件到数据库中。对于嵌套文档的对象，会有一点性能影响。设置noobjcheck 关闭。\r\n```\r\nobjcheck = true\r\n#noobjcheck = false\r\n```\r\n\r\n**noobjcheck**：同上，默认关闭false。\r\n```\r\n#noobjcheck = false\r\n```\r\n\r\n**logpath**：指定日志文件，该文件将保存所有的日志记录、诊断信息。除非另有指定，mongod将所有的日志信息输出到标准输出。如果没有指定logappend，重启则日志会进行覆盖操作。\r\n```\r\nlogpath=/var/log/mongodb/mongodb.log\r\n```\r\n\r\n**logappend**：写日志的模式：设置为true为追加。默认是覆盖。如果未指定此设置，启动时MongoDB的将覆盖现有的日志文件。\r\n```\r\nlogappend=true\r\n```\r\n\r\n**syslog**：日志输出都发送到主机的syslog系统，而不是标准输出到logpath指定日志文件。syslog和logpath不能一起用，会报错：\r\nCant use both a logpath and syslog\r\n```\r\nsyslog  = true\r\n```\r\n\r\n**pidfilepath**：进程ID，没有指定则启动时候就没有PID文件。默认缺省。\r\n```\r\npidfilepath = /var/run/mongo.pid\r\n```\r\n\r\n**keyFile**：指定存储身份验证信息的密钥文件的路径。默认缺省。详情见：\"\r\n```\r\nReplica Set Security\" and “Replica Set Administration.”\r\nkeyFile = /srv/mongodb/keyfile\r\n```\r\n\r\n**nounixsocket**：套接字文件，默认为false，有生成socket文件。当设置为true时，不会生成socket文件。\r\n```\r\nnounixsocket = false\r\n```\r\n\r\n**unixSocketPrefix**：套接字文件路径，默认/tmp\r\n```\r\nunixSocketPrefix = /tmp\r\n```\r\n\r\n**fork**：是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false。\r\n```\r\nfork = true\r\n```\r\n\r\n**auth**：用户认证，默认false。不需要认证。当设置为true时候，进入数据库需要auth验证，当数据库里没有用户，则不需要验证也可以操作。直到创建了第一个用户，之后操作都需要验证。\r\n```\r\nauth = true\r\n```\r\n比如：通过db.addUser(\'sa\',\'sa\')  在admin库下面创建一个超级用户，只能在在admin库下面先认证完毕了：ab.auth(\'sa\',\'sa\') ，才能去别的库操作，不能在其他库验证。这样连接数据库也需要指定库：\r\n```\r\nmongo -usa -psa admin     #sa 帐号连接admin\r\nmongo -uaa -paa test      #aa 帐号连接test\r\n```\r\n\r\n**noauth**：禁止用户认证，默认true。同上\r\n```\r\nnoauth = true\r\n```\r\n\r\n**cpu**：设置为true会强制mongodb每4s报告cpu利用率和io等待，把日志信息写到标准输出或日志文件。默认为false。\r\n```\r\ncpu = true\r\n```\r\n开启日志会出现：\r\n```\r\nMon Jun 10 10:21:42.241 [snapshotthread] cpu: elapsed:4000  writelock: 0%\r\n```\r\n\r\n**dbpath**：数据存放目录。默认： `/data/db/`\r\n```\r\ndbpath=/var/lib/mongodb\r\n```\r\n\r\n**diaglog**：创建一个非常详细的故障排除和各种错误的诊断日志记录。默认0。设置为1，为在dbpath目录里生成一个`diaglog.`开头的日志文件，他的值如下：\r\n```\r\nValue    Setting\r\n0    off. No logging.       #关闭。没有记录。\r\n1    Log write operations.  #写操作\r\n2    Log read operations.   #读操作\r\n3    Log both read and write operations. #读写操作\r\n7    Log write and some read operations. #写和一些读操作\r\n```\r\n设置不等于0，日志会每分钟flush 一次：\r\n```\r\nMon Jun 10 11:16:17.504 [DataFileSync] flushing diag log\r\nMon Jun 10 11:17:17.442 [DataFileSync] flushing diag log\r\n```\r\n产生的日志可以用mongosniff 来查看：要是mongosniff[类似于tcpdump的作为一个MongoDB的特定的TCP/ IP网络流量]出现报错和具体用法，请见这里，之前先执行：`apt-get install libpcap-dev`\r\n```\r\nroot@m3:/var/lib/mongodb# mongosniff --source DIAGLOG diaglog.51b542a9\r\n```\r\n注意：当重新设置成0，会停止写入文件，但mongod还是继续保持打开该文件，即使它不再写入数据文件。如果你想重命名，移动或删除诊断日志，你必须完全关闭mongod实例。\r\n```\r\ndiaglog = 3\r\n```\r\n\r\n**directoryperdb**：设置为true，修改数据目录存储模式，每个数据库的文件存储在DBPATH指定目录的不同的文件夹中。使用此选项，可以配置的MongoDB将数据存储在不同的磁盘设备上，以提高写入吞吐量或磁盘容量。默认为false。\r\n注意：要是在运行一段时间的数据库中，开启该参数，会导致原始的数据都会消失（注释参数则会回来）。因为数据目录都不同了，除非迁移现有的数据文件到directoryperdb产生的数据库目录中，如：\r\n```\r\nroot@m3:/var/lib/mongodb# mv test.* test/  \r\n```\r\n把test数据文件迁移到directoryperdb产生的数据库test目录中。 所以需要在规划好之后确定是否要开启。\r\n```\r\ndirectoryperdb = ture\r\n```\r\n原始数据结构：\r\n```\r\njournal\r\nmongod.lock\r\nlocal.0\r\nlocal.1\r\nlocal.ns\r\ntest.0\r\ntest.1\r\ntest.ns\r\n```\r\n\r\n开启 directoryperdb，并把数据文件迁移到相关的数据目录后的结构：\r\n```\r\njournal\r\nmongod.lock\r\nlocal/local.0\r\nlocal/local.1\r\nlocal/local.ns\r\ntest/test.0\r\ntest/test.1\r\ntest/test.ns\r\n```\r\n**journal**：日志，（redo log，更多的介绍请看这里和这里）\r\n默认值：（在64位系统）true。\r\n默认值：（32位系统）false。\r\n设置为true，启用操作日志，以确保写入持久性和数据的一致性，会在dbpath目录下创建journal目录。\r\n设置为false，以防止日志持久性的情况下，并不需要开销。为了减少磁盘上使用的日志的影响，您可以启用nojournal，并设置为true。\r\n注意：在64位系统上禁用日志必须使用带有nojournal的。\r\n```\r\n#journal=true\r\njournal=false\r\n```\r\n32位OS：\r\n```\r\nTue Jun 11 12:17:09.628 [initandlisten] ** NOTE: This is a 32 bit MongoDB binary.\r\nTue Jun 11 12:17:09.628 [initandlisten] **       32 bit builds are limited to less than 2GB of data (or less with --journal).\r\n```\r\n64位OS：\r\n```\r\nTue Jun 11 12:29:34 [initandlisten] journal dir=/var/lib/mongodb/journal\r\nTue Jun 11 12:29:34 [initandlisten] recover : no journal files present, no recovery needed\r\n```\r\n\r\n**nojournal**:禁止日志\r\n默认值：（在64位系统）false。\r\n默认值：（32位系统）true。\r\n设置nojournal为true关闭日志，64位，2.0版本后的mongodb默认是启用 journal日志。\r\n```\r\nnojournal=true\r\n```\r\n\r\n**journalCommitInterval**：刷写提交机制，默认是30ms或则100ms。较低的值，会更消耗磁盘的性能。\r\n此选项接受2和300毫秒之间的值：\r\n如果单块设备提供日志和数据文件，默认的日记提交时间间隔为100毫秒。\r\n如果不同的块设备提供的日志和数据文件，默认的日记提交的时间间隔为30毫秒。\r\n```\r\njournalCommitInterval=100\r\n```\r\n\r\n**ipv6**：是否支持ipv6，默认false。\r\n\r\n**jsonp**：是否允许JSONP访问通过一个HTTP接口，默认false。\r\n\r\n**nohttpinterface**：是否禁止http接口，即28017 端口开启的服务。默认false，支持。\r\n```\r\nnohttpinterface = false\r\n```\r\n\r\n**noprealloc**：预分配方式。\r\n默认false：使用预分配方式来保证写入性能的稳定，预分配在后台进行，并且每个预分配的文件都用0进行填充。这会让MongoDB始终保持额外的空间和空余的数据文件，从而避免了数据增长过快而带来的分配磁盘空间引起的阻塞。\r\n设置noprealloc = true来禁用预分配的数据文件，会缩短启动时间，但在正常操作过程中，可能会导致性能显著下降。\r\n```\r\nnoprealloc = false\r\n```\r\n\r\n**noscripting**：是否禁止脚本引擎。默认是false：不禁止。ture：禁止\r\n要是设置成true：运行一些脚本的时候会出现：\r\n```\r\nJavaScript execution failed: group command failed: { \"ok\" : 0, \"errmsg\" : \"server-side JavaScript execution is disabled\" }\r\n#noscripting = true     <====> noscripting = false\r\n```\r\n\r\n**notablescan**：是否禁止表扫描操作。默认false：不禁止，ture：禁止\r\n禁止要是执行表扫描会出现：\r\n```\r\nerror: { \"$err\" : \"table scans not allowed:test.emp\", \"code\" : 10111 }\r\n```\r\n可以动态修改设置：\r\n```\r\ndb.adminCommand({setParameter:1, notablescan:false})\r\n#notablescan = true  <====> notablescan = false\r\n```\r\n\r\n**nssize**: 命名空间的文件（即NS）的默认大小，默认16M，最大2G。\r\n所有新创建的默认大小命名空间的文件（即NS）。此选项不会影响现有的命名空间的文件的大小。默认值是16M字节，最大大小为2 GB。让小数据库不让浪费太多的磁盘空间，同时让大数据在磁盘上有连续的空间。\r\n```\r\n-rwxrwxrwx 1 mongodb zhoujy  16M  6月 11 14:44 test.0\r\n-rwxrwxrwx 1 mongodb zhoujy  32M  6月  1 21:36 test.1\r\n-rwxrwxrwx 1 mongodb zhoujy  16M  6月 11 14:44 test.ns\r\ndrwxr-xr-x 2 root    root   4.0K  6月 10 11:57 _tmp\r\nnssize  = 16\r\n```\r\n\r\n**profile**：数据库分析等级设置。记录一些操作性能到标准输出或则指定的logpath的日志文件中，默认0:关闭。\r\n```\r\n级别 设置\r\n0 关。无分析。\r\n1 开。仅包括慢操作。\r\n2 开。包括所有操作。\r\n```\r\n控制 Profiling  的开关和级别：2种\r\n第一种是直接在启动参数里直接进行设置或则启动MongoDB时加上–profile=级别，其信息保存在 生成的system.profile 中。\r\n```\r\nprofile = 2\r\n```\r\n第二种是在客户端用db.setProfilingLevel(级别)命令来实时配置，其信息保存在 生成的system.profile 中。\r\n```\r\n[initandlisten] creating profile collection: local.system.profile\r\n> db.setProfilingLevel(2)\r\n{ \"was\" : 0, \"slowms\" : 100, \"ok\" : 1 }\r\n> db.getProfilingStatus()\r\n{ \"was\" : 2, \"slowms\" : 100 }\r\n```\r\n默认情况下，mongod的禁用分析。数据库分析可以影响数据库的性能，因为分析器必须记录和处理所有的数据库操作。所以在需要的时候用动态修改就可以了。\r\n\r\nslowms：记录profile分析的慢查询的时间，默认是100毫秒。具体同上。\r\n```\r\nslowms  = 200\r\n> db.getProfilingStatus()\r\n{ \"was\" : 2, \"slowms\" : 200 }\r\n```\r\n\r\n**quota**：配额，默认false。是否开启配置每个数据库的最多文件数的限制。当为true则用quotaFiles来配置最多文件的数量。\r\n```\r\nquota = true\r\n```\r\n\r\n**quotaFiles**：配额数量。每个数据库的数据文件数量的限制。此选项需要quota为true。默认为8。\r\n```\r\nquotaFiles = 8\r\n```\r\n\r\n**rest**： 默认false，设置为true，使一个简单的 REST API。\r\n```\r\nrest = true\r\n```\r\n设置为true，开启后，在MongoDB默认会开启一个HTTP协议的端口提供REST的服务（nohttpinterface = false），这个端口是你Server端口加上1000，即28017，默认的HTTP端口是数据库状态页面，（开启后，web页面的Commands 行中的命令都可以点进去）。mongodb自带的REST，不支持 增、删、改，同时也不支持 权限认证。\r\n详细信息见这里和这里。\r\n\r\n**repair**：修复数据库操作，默认是false。\r\n设置为true时，启动后修复所有数据库，设置这个选项最好在命令行上，而不是在配置文件或控制脚本。如：\r\n命令行修复：\r\n```\r\n> db.repairDatabase(\'xxx\')\r\n{ \"ok\" : 1 }\r\n> db.repairDatabase()\r\n{ \"ok\" : 1 }\r\n```\r\n启动时修复：\r\n```\r\nrepair = true\r\nroot@m3:/var/log/mongodb# mongod --repair\r\n```\r\n启动时修复，需要关闭journal，否则报错:\r\n```\r\nCan\'t specify both --journal and --repair options.\r\n```\r\n并且启动时，用控制文件指定参数和配置文件里指定参数的方式进行修复之后，（修复信息见log），需要再禁用repair参数才能启用mongodb。\r\n注意：mongod修复时，需要重写所有的数据库文件。如果在同一个帐号下不能运行修复，则需要运行chown修改数据库文件的权限。\r\n\r\n**repairpath**：修复路径，默认是在dbpath路径下的_tmp 目录。\r\n```\r\ndrwxr-xr-x 2 root    root   4.0K  6月 11 20:23 _tmp\r\n```\r\n\r\n**smallfiles**：是否使用较小的默认文件。默认为false，不使用。\r\n设置为true，使用较小的默认数据文件大小。smallfiles减少数据文件的初始大小，并限制他们到512M，也减少了日志文件的大小，并限制他们到128M。\r\n如果数据库很大，各持有少量的数据，会导致mongodb创建很多文件，会影响性能。\r\n```\r\nsmallfiles = true\r\n```\r\n\r\n**syncdelay**：刷写数据到日志的频率，通过fsync操作数据。默认60秒。\r\n```\r\nsyncdelay = 60\r\n```\r\n默认就可以，不需要设置。不会对日志文件（journal files）有影响\r\n警告：如果设置为0，SYNCDELAY 不会同步到磁盘的内存映射文件。在生产系统上，不要设置这个值。\r\n\r\n**sysinfo**：系统信息，默认false。\r\n设置为true，mongod会诊断系统有关的页面大小，数量的物理页面，可用物理​​页面的数量输出到标准输出。\r\n```\r\nTue Jun 11 21:07:15.031 sysinfo:\r\nTue Jun 11 21:07:15.035   page size: 4096\r\nTue Jun 11 21:07:15.035   _SC_PHYS_PAGES: 256318\r\nTue Jun 11 21:07:15.035   _SC_AVPHYS_PAGES: 19895\r\n```\r\n当开启sysinfo参数的时候，只会打印上面的信息，不会启动mongodb的程序。所以要关闭该参数，才能开启mongodb。\r\n\r\n**upgrade**: 升级。默认为false。\r\n当设置为true，指定DBPATH，升级磁盘上的数据格式的文件到最新版本。会影响数据库操作，更新元数据。大部分情况下，不需要设置该值。\r\n\r\n**traceExceptions**：是否使用内部诊断。默认false。\r\n```\r\ntraceExceptions = false\r\n```\r\n\r\n**quiet**：安静模式。\r\n```\r\nquiet = true\r\n```\r\n\r\n**setParameter**：2.4的新参数，指定启动选项配置。想设置多个选项则用一个setParameter选项指定，可以setParameter的参数请见这里，详情请见这里\r\n声明setParameter设置在这个文件中，使用下面的格式：\r\n```\r\nsetParameter = <parameter>=<value>\r\n```\r\n如配置文件里设置syncdelay：\r\n```\r\nsetParameter = syncdelay= 55,notablescan = true,journalCommitInterval = 50,traceExceptions = true\r\n```\r\n\r\n\r\n## Replication Options  复制选项\r\n**replSet**：使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\r\n\r\n**oplogSize**：指定的复制操作日志（OPLOG）的最大大小。mongod创建一个OPLOG的大小基于最大可用空间量。对于64位系统，OPLOG通常是5％的可用磁盘空间。\r\n一旦mongod第一次创建OPLOG，改变oplogSize将不会影响OPLOG的大小。\r\n\r\n**fastsync**：默认为false。在副本集下，设置为true，从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步，否则的mongod将尝试执行初始同步。注意：如果数据不完全同步，mongod指定fastsync开启，secondary或slave与主永久不同步，这可能会导致显着的一致性问题。\r\n\r\n**replIndexPrefetch**：2.2版本出现的新参数，默认是all。可以设置的值有：all, none, and _id_only。只能在副本集（replSet）中使用。默认情况下，secondary副本集的成员将加载所有索引到内存中（从OPLOG之前的操作有关的）。您可以修改此行为，使secondary只会加载_id索引。指定_id_或none，防止mongod的任何索引加载到内存。\r\n\r\n\r\n## Master/Slave Replication：主从复制的相关设置\r\n**master**：默认为false，当设置为true，则配置当前实例作为主实例。\r\n```\r\nmaster = true\r\n```\r\n\r\n**slave**：默认为false，当设置为true，则配置当前实例作为从实例。\r\n```\r\nslave = true\r\n```\r\n\r\n**source**：默认为空，格式为：<host><:port>。用于从实例的复制：设置从的时候指定该选项会让从复制指定主的实例\r\n```\r\nsource = 127.0.0.1:30001\r\n```\r\n\r\n**only**：默认为空，用于从选项，指定一个数据库进行复制。\r\n```\r\nonly = abc          #只同步abc集合（库）\r\n```\r\n\r\n**slavedelay**：设置从库同步主库的延迟时间，用于从设置，默认为0。\r\n```\r\nslavedelay = 60     #延迟60s同步主数据\r\n```\r\n\r\n**autoresync**：默认为false，用于从设置。是否自动重新同步。设置为true，如果落后主超过10秒，会强制从自动重新同步。如果oplogSize太小，此设置可能有问题。如果OPLOG大小不足以存储主的变化状态和从的状态变化之间的差异，这种情况下强制重新同步是不必要的。当设置autoresync选项设置为false，10分钟内从不会进行大于1次的自动重新同步。\r\n```\r\nautoresync = false\r\n```\r\n\r\n\r\n## Sharded Cluster Options 分片集群设置\r\n\r\n后续更新...\r\n', 'normal', 92, b'0', b'0'),
(122, 'GitHub Git 备忘单 - GitHub Cheatsheets', 1562385320, 1562386779, 1037, 'Git Cheat sheets是一个git常用命令备忘表。\r\n原文地址：https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/\r\n\r\n\r\n## 安装Git\r\nGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。\r\n\r\n### GitHub Desktop\r\nhttps://desktop.github.com/\r\n\r\nGitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。\r\n\r\n### Git 全平台版\r\nhttp://git-scm.com\r\n\r\n## 配置工具\r\n对所有本地仓库的用户信息进行配置\r\n```\r\n$ git config --global user.name \"[name]\"\r\n```\r\n对你的commit操作设置关联的用户名\r\n```\r\n$ git config --global user.email \"[email address]\"\r\n```\r\n对你的commit操作设置关联的邮箱地址\r\n\r\n## 创建仓库\r\n创建一个新的仓库或者从一个现有的链接获取仓库\r\n```\r\n$ git init [project-name]\r\n```\r\n创建一个本地的仓库，并设置名字\r\n```\r\n$ git clone [url]\r\n```\r\n下载一个项目以及它所有的版本历史\r\n\r\n\r\n\r\n## 更改\r\n检查已有的编辑并执行commit操作\r\n```\r\n$ git status\r\n```\r\n列出所有新建或者更改的文件，这些文件需要被commit\r\n```\r\n$ git diff\r\n```\r\n展示那些没有暂存文件的差异\r\n```\r\n$ git add [file]\r\n```\r\n将文件进行快照处理用于版本控制\r\n```\r\n$ git diff --staged\r\n```\r\n展示暂存文件与最新版本之间的不同\r\n```\r\n$ git reset [file]\r\n```\r\n将文件移除暂存区，但是保留其内容\r\n```\r\n$ git commit -m\"[descriptive message]\"\r\n```\r\n将文件快照永久地记录在版本历史中\r\n\r\n\r\n## 批量更改\r\n命名一系列commit以及合并已完成的工作\r\n```\r\n$ git branch\r\n```\r\n列出当前仓库中所有的本地分支\r\n```\r\n$ git branch [branch-name]\r\n```\r\n建立一个新分支\r\n```\r\n$ git checkout [branch-name]\r\n```\r\n切换到一个特定的分支上并更新工作目录\r\n```\r\n$ git merge [branch-name]\r\n```\r\n合并特定分支的历史到当前分支\r\n```\r\n$ git branch -d [branch-name]\r\n```\r\n删除特定的分支\r\n\r\n\r\n## 重构文件\r\n重定位并移除版本文件\r\n```\r\n$ git rm [file]\r\n```\r\n从工作目录中删除文件并暂存此删除\r\n```\r\n$ git rm --cached [file]\r\n```\r\n从版本控制中移除文件，并在本地保存文件\r\n```\r\n$ git mv [file-original] [file-renamed]\r\n```\r\n改变文件名并准备commit\r\n\r\n\r\n## 停止追踪\r\n不包含临时文件和路径\r\n```\r\n*.log\r\nbuild/\r\ntemp-*\r\n```\r\n文本文件.gitignore可以防止一些特定的文件进入到版本控制中\r\n```\r\n$ git ls-files --others --ignored --exclude-standard\r\n```\r\n列出所有项目中忽略的文件\r\n\r\n\r\n## 保存临时更改\r\n暂存一些未完成的更改\r\n```\r\n$ git stash\r\n```\r\n临时存储所有修改的已跟踪文件\r\n```\r\n$ git stash pop\r\n```\r\n重新存储所有最近被stash的文件\r\n```\r\n$ git stash list\r\n```\r\n列出所有被stash的更改\r\n```\r\n$ git stash drop\r\n```\r\n放弃所有最近stash的更改\r\n\r\n\r\n## 查阅历史\r\n浏览并检查项目文件的发展\r\n```\r\n$ git log\r\n```\r\n列出当前分支的版本历史\r\n```\r\n$ git log --follow [file]\r\n```\r\n列出文件的版本历史，包括重命名\r\n```\r\n$ git diff [first-branch]...[second-branch]\r\n```\r\n展示两个不同分支之间的差异\r\n```\r\n$ git show [commit]\r\n```\r\n输出元数据以及特定commit的内容变化\r\n\r\n\r\n## 撤销commit\r\n擦除错误并更改历史\r\n```\r\n$ git reset [commit]\r\n```\r\n撤销所有[commit]后的的commit，在本地保存更改\r\n```\r\n$ git reset --hard [commit]\r\n```\r\n放弃所有更改并回到某个特定的commit\r\n\r\n\r\n## 同步更改\r\n注册一个远程的链接，交换仓库的版本历史\r\n```\r\n$ git fetch [remote]\r\n```\r\n下载远程仓库的所有历史\r\n```\r\n$ git merge [remote]/[branch]\r\n```\r\n合并远程分支到当前本地分支\r\n```\r\n$ git push [remote] [branch]\r\n```\r\n上传所有本地分支commit到GitHub上\r\n```\r\n$ git pull\r\n```\r\n下载书签历史并合并更改\r\n\r\n---\r\n\r\n另外还有一个Git Cheat sheets：https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet\r\nGit教程：https://www.liaoxuefeng.com/wiki/896043488029600\r\n', 'normal', 89, b'0', b'0');
INSERT INTO `lb_article` (`id`, `title`, `create_time`, `update_time`, `category_id`, `content`, `status`, `view_count`, `is_top`, `is_original`) VALUES
(123, 'MySQL多列索引和经典案例', 1562427062, 1562506639, 1035, '以前只知道索引可以加快查询速度，而具体为什么会加速快速，对于多列索引也不清楚，也没有用过多列索引，今天了解了一下。\r\n\r\n## 多列索引\r\n\r\n多列索引是指定多个列组合为一个索引，MySQL将会将多个列的值组合计算后构建索引表。使用多列索引要比使用多个单列索引要快得多。\r\n\r\n为什么这么说呢？因为当一个SQL语句中出现多个索引字段时候，它并不能每个索引都能得上，实际上它也**只能使用其中一个单列索引去查找**（MySQL会选择最精确的那个索引），为什么？我们可以把索引类比成一本书的目录，都是用来快速查找我们想要的内容的。我们小学学过使用新华字典，我们知道有两种查找的方法，一种是拼音法，一种是偏旁部首法，我们每次只能使用其中的一个，不能同时使用两种方法。多个单列索引也一样，每次只能使用其中一个，不能同时使用。\r\n\r\n而多列索引呢，当我们在一个SQL语句中合理使用了多列索引中的几个字段时候，它能够利用多列索引的几列或全部列，这就比多个单列索引只能使用一个索引要高效的多。\r\n\r\n并且如果建立的了太多的单列索引，增删改效率会下降，而使用多列索引，则不需要担心这个问题。\r\n\r\n### 多列索引使用原则：最左前缀原则\r\n\r\n多列索引使用原则是指SQL语句中使用了多列索引中的一个或多个字段时会采用哪些索引项的规则。多列索引的最左前缀原则：\r\n\r\n1. 如果有一个2列的索引(col1, col2)，则已经对(col1)、(col1, col2)上建立了索引；\r\n2. 如果有一个3列索引(col1, col2, col3)，则已经对(col1)、(col1, col2)、(col1, col2, col3)上建立了索引；\r\n\r\n具体使用一定要看看下节的案例。\r\n\r\n\r\n## 多列索引经典案例\r\n\r\n### 问题描述\r\n假设某个表有一个联合索引为（c1, c2, c3, c4），分析下列语句索引使用情况。\r\n\r\n```sql\r\nA: where c1=x and c2=x and c4>x and c3=x \r\nB: where c1=x and c2=x and c4=x order by c3\r\nC: where c1=x and c4=x group by c3,c2\r\nD: where c1=x and c5=x order by c2,c3\r\nE: where c1=x and c2=x and c5=x order by c2,c3\r\n```\r\n\r\n分析：首先根据最左原则，会有如下索引：(c1)，（c1, c2），（c1, c2, c3），（c1, c2, c3, c4）。然后一个一个选项的进行分析，建立下面的表，然我们可以使用`explain`语句查看MySQL的解释。\r\n```sql\r\ncreate table test (\r\n    c1 tinyint(1) not null default 0,\r\n    c2 tinyint(1) not null default 0,\r\n    c3 tinyint(1) not null default 0,\r\n    c4 tinyint(1) not null default 0,\r\n    c5 tinyint(1) not null default 0,\r\n    index c1234(c1,c2,c3,c4)\r\n);\r\n-- 插入两条数据\r\ninsert into test values (1,3,5,6,7),(2,3,9,8,3),(4,3,2,7,5);\r\ninsert into test values (2,4,5,8,7),(1,3,5,8,4),(3,4,2,9,6);\r\n```\r\n\r\n### A选项\r\n执行下面语句：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c2=2 and c4>3 and c3=3 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: range\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 4\r\n          ref: NULL\r\n         rows: 1\r\n        Extra: Using where\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n可以将`c4>3` 与`c3=3`调换，再执行explain：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c2=2 and c3=3 and c4>3 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: range\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 4\r\n          ref: NULL\r\n         rows: 1\r\n        Extra: Using where\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n可以发现两次的执行结果一样，这说你MySQL可以自动进行一些简单的语句优化，这里根据出现顺序，所以 c1,c2,c3,c4 都能用上。\r\n\r\n### B选项\r\n执行下面语句：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c2=2 and c4=3\r\norder by c3 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: ref\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 2\r\n          ref: const,const\r\n         rows: 1\r\n        Extra: Using where\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n只使用了c1,c2两个，使用c1,c2后，c3已经是有序的，不需要排序。\r\n\r\n### C选项\r\n执行下面语句：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c4=2\r\ngroup by c3,c2 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: ref\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 1\r\n          ref: const\r\n         rows: 2\r\n        Extra: Using where; Using temporary; Using filesort\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n只使用了c1一个，c2,c3不能使用，因为顺序是c3,c2。\r\n\r\n### D选项\r\n执行下面语句：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c5=2\r\ngroup by c2,c3 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: ref\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 1\r\n          ref: const\r\n         rows: 2\r\n        Extra: Using where\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n只使用了c1一个，c2和c3没使用，因为使用了c1后，c2,c3已经是有序的。\r\n\r\n### E选项\r\n执行下面语句：\r\n```sql\r\nexplain select *\r\nfrom test\r\nwhere c1=1 and c2=3 and c5=2\r\norder by c2,c3 \\G\r\n```\r\n\r\n执行结果：\r\n```\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: ref\r\npossible_keys: c1234\r\n          key: c1234\r\n      key_len: 2\r\n          ref: const,const\r\n         rows: 2\r\n        Extra: Using where\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n只使用了c1，c2两个，c3没使用，因为使用了c1,c2后，c2,c3已经是有序的。\r\n\r\n\r\n## 参考文章\r\n1. [索引的最左前缀原则 - 节奏型男-全栈 - 博客园](https://www.cnblogs.com/frankltf/p/10368509.html)\r\n2. [Mysql多列索引经典案例 - Yxh_blogs - 博客园](https://www.cnblogs.com/yxhblogs/p/8045106.html)\r\n\r\n', 'normal', 206, b'0', b'1'),
(124, 'MySQL优化（一）—— 表的优化', 1562493729, 1562505442, 1035, '## 定长与变长分离\r\n所谓定长与变长分离是指：将表中固定长度的字段和可变长度的字段分开，将他们放在不同的表中。\r\n\r\n固定长度类型：整型、浮点型、时间和日期型、enum、set、文本中char型\r\n可变长度类型：除char外的文本型、blob\r\n\r\n为什么要这么做呢？如果一个表中的字段都是固定长度的字段，那么每行记录的长度都是固定的(fixed)，这样如果想找到第N行的数据位置，直接使用`N*RowSize`即可，访问速度很快。\r\n\r\n所以建议将核心字段设置为固定长度， 而变长字段，适合单放一张表, 使用主键与核心表关联起来。\r\n\r\n\r\n## 常用和不常用分离\r\n所谓常用和不常用分离是指：将表中常用的字段和不常用的字段分开，将他们放在不同的表中。\r\n\r\n分离出不常用字段能够增加数据取出效率。比如在博客程序中，对于文章表可以将文章内容字段和其他不常用的字段分离出来，放在另一个表中。因为对于博客，文章列表中的文章数量更多，而且在列表不需要使用文章内容（就算使用也不需要使用全部内容）等比较详细的内容，单独存放它们可以增加查询效率。\r\n\r\n这个优化需要结合具体的业务，分析字段的查询场景或者进行统计，将查询频度低的字段拆出来。\r\n\r\n\r\n## 1对多中，对需要关联统计得出的信息，添加冗余字段\r\n这个优化可以拿博客程序来说明：博客中一般都有多个文章分类（或者叫栏目），如何统计每个分类下的文章数量呢？可以这样写SQL语句：\r\n```sql\r\nselect category.id, category.name, count(article.id) as count\r\nfrom category\r\ninner join article on category.id = article.cat_id\r\ngroup by article.cat_id\r\n```\r\n这个统计功能的SQL用到了两张表的连接。其实可以在文章分类表中直接加一个文章数量字段对改分类的文章进行计数。只需要每次增删文章的时候去更新这个字段就可以了，这样做之后只需要查询文章分类就可以实现统计功能，相比于原来的SQL语句，可以节省一定的时间。\r\n\r\n这是一种在计算机学科中经常使用的“空间换时间”的思想。\r\n\r\n\r\n## 列类型选择原则\r\n字段类型优先级：\r\n```\r\n整型,浮点型 > date,time > enum,char > varchar > blob,text\r\n```\r\n各种字段类型的特点:\r\n- 整型,浮点型: 定长存储，没有国家/地区之分，也没有字符集的差异，因此处理速度快。比如tinyint 1,2,3,4,5与char(1) a,b,c,d,e相比较：从空间上，都是占1个字节，但是使用 order by 排序时，前者快。原因: 后者需要考虑字符集与校对集(就是排序规则)。\r\n- date,time：定长存储，运算快，节省空间。 但需要考虑时区，写sql时也不方便，如 `where > \'2005-10-12\'`。\r\n- enum: 定长， 内部用tinyint存储，但使用字符串查询时，内部要经历字符串与整数值的转化。\r\n- char： 定长, 但需要考虑字符集和(排序)校对集。\r\n- varchar：不定长，并且要考虑字符集的转换与排序时的校对集，速度慢。\r\n- text,Blob：无法使用内存临时表(排序等操作只能在磁盘上进行)，速度较慢。\r\n\r\nPS: 关于date/time的选择，大师的明确意见是直接选用 `int unsgined not null`，只存储时间戳即可。详见：http://www.xaprb.com/blog/2014/01/30/timestamps-in-mysql/\r\n\r\n还有常见的存储性别， 以utf8为例，可以选择的类型有：\r\n1. char(1)： \'男\',\'女\'，3个字长字节\r\n2. enum(‘男’,’女’)： 定长1个字节，内部转成tinyint来存，多了一个转换过程\r\n3. tinyint：定义0表示无，1表示男，2表示女，定长1个字节\r\n\r\n根据上面字段类型优先级，选择tinyint最好。\r\n\r\n\r\n## 字段长度够用就行\r\n定义字段长度时候，不要过长，因为较大的字段不仅浪费内存，而且也会影响查询速度。\r\n\r\n以年龄为例， `tinyint unsigned not null`，可以存储0-255岁，对于人来说已经足够了，而用int范围过大，浪费了3个字节。\r\n\r\n如果varchar(10) ,varchar(300)存储的内容相同, 但在表联查时，varchar(300)要花更多的内存。\r\n\r\n\r\n## 尽量避免用NULL\r\n我们经常能看到这条，但为什么呢？\r\n1. NULL不利于索引，要用特殊的字节来标注。NULL在磁盘上占据的空间其实更大。(MySQL 5.7已对NULL存储做了改进，但查询仍是不便)\r\n2. 查询也不方便。判断时NULL时，不能直接用=NULL和!=NULL，需要使用IS NULL和IS NOT NULL。\r\n\r\n所以定义字段时尽量使用NOT NULL而不是NULL。\r\n', 'normal', 106, b'0', b'1'),
(125, 'MySQL优化（二）——索引优化', 1562506465, 1562511789, 1035, '索引对于加快查询是非常重要的，合理使用索引能够显著提高查询速度。\r\n\r\n## MySQL中索引的实现\r\nMySQL中索引的实现技术分两种：B-Tree索引和Hash索引。\r\n\r\n### B-Tree索引\r\nB-Tree索引使用B+树实现。B+树一种多路查找树（如下图），是通过二叉查找树，再由平衡二叉树，B树（又名B-树）演化而来的，B+树中的B不是代表二叉（binary），而是代表平衡（balance），因为B+树是从最早的平衡二叉树演化而来，但是B+树不是一个二叉树，是多叉树。\r\n\r\n![B+树](/uploads/artimgs/123/cdddf4c2dd471aa919ca26ca1d18f505.jpg \"B+树\")\r\n\r\n### Hash索引\r\nHash索引的查找速度理论上是O(1)，所以它比B-Tree索引快得多（B-Tree索引速度为O(logN)，N为索引值数量，和索引字段及记录行数有关）。但由于它更快，它的使用限制也比较多：\r\n\r\n- 哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行（即不能使用哈希索引来做覆盖索引扫描），不过，访问内存中的行的速度很快（因为memory引擎的数据都保存在内存里），所以大部分情况下这一点对性能的影响并不明显。\r\n- 哈希索引数据并不是按照索引列的值顺序存储的，所以也就**无法用于排序**\r\n- 哈希索引也**不支持部分索引列匹配查找**，因为哈希索引始终是使用索引的全部列值内容来计算哈希值的。如：数据列（a,b）上建立哈希索引，如果只查询数据列a，则无法使用该索引。\r\n- 哈希索引**只支持等值比较查询**，如：=, in, <=>(注意，<>和<=>是不同的操作)，不支持任何范围查询（必须给定具体的where条件值来计算hash值，所以不支持范围查询）。\r\n- 访问哈希索引的数据非常快，除非有很多哈希冲突，当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行。\r\n- 如果哈希冲突很多的话，一些索引维护操作的代价也很高，如：如果在某个选择性很低的列上建立哈希索引（即很多重复值的列），那么当从表中删除一行时，存储引擎需要遍历对应哈希值的链表中的每一行，找到并删除对应的引用，冲突越多，代价越大。\r\n\r\n所以在MySQL中，只有HEAP/MEMORY表引擎才显式支持Hash索引。我们一般用到的都是B-Tree索引。\r\n\r\n这里只对B+树和Hash表做简单介绍，详细内容可以查看数据结构教材或者文章末尾的参考文章。\r\n\r\n\r\n## 聚簇索引与非聚簇索引\r\n聚餐索引：将数据存储和索引节点放到一起，找到索引也就找到了数据。InnoDB引擎使用这种方式。\r\n非聚簇索引：将数据存储和索引分开存放，索引节点指向了数据的对应行。MyIASM引擎使用这种方式。\r\n\r\n注意: 对于InnoDB来说,\r\n1. 主键索引既存储索引值，又在叶子中存储行的数据\r\n2. 如果没有主键(Primary key), 则会Unique key做主键\r\n3. 如果没有Unique key，则系统生成一个内部的rowid做主键\r\n4. 在InnoDB中，主键的索引结构中，既存储了主键值，又存储了行数据，这种结构称为”聚簇索引”\r\n\r\n聚簇索引：\r\n优势: 根据主键查询条目比较少时，不用回行(数据就在主键节点下)\r\n劣势: 如果碰到不规则数据插入时，造成频繁的页分裂（想想平衡多叉树的插入）。\r\n\r\n聚簇索引与非聚簇索引的具体讲解请查看文章末尾的第4篇查考文章。\r\n\r\n索引优化策略：\r\n对于InnoDB而言，因为节点下有数据文件，因此节点的分裂将会比较慢。\r\n对于InnoDB的主键，尽量用整型，而且是递增的整型。\r\n如果是无规律的数据插入，将会产生的页的分裂，影响速度，所以应该使用MyISAM表。\r\n\r\n\r\n## 索引覆盖\r\n索引覆盖是指：如果查询的列恰好是索引的一部分，那么查询只需要在索引文件上进行，不需要回行到磁盘再找数据。这种查询速度非常快,称为”索引覆盖”。我们应该尽量利用索引覆盖加快速度。\r\n\r\n例题，现有一张表的部分结构如下：\r\n```sql\r\ncreate table A (\r\n   id varchar(64) primary key,\r\n   ver int not null,\r\n   ...\r\n   index key(id, ver),\r\n   ...\r\n) ...\r\n```\r\n问题：在(id,ver)上有联合索引，表中有10000条数据。\r\n1. 为什么 `select id from A order by id` 特别慢？\r\n2. 而 `select id from A order by id,ver` 非常快？\r\n\r\n表中还有几个很长的字段text(3000)。id, (id,ver) 都有索引, select id 应该都产生”索引覆盖”的效果，为什么前者慢，而后者快？\r\n\r\n思路：从innodb聚簇与myisam索引的不同、索引覆盖，这2个角度来考虑。\r\n分析：对于myisam，索引都是指向磁盘上的位置(索引不存储其他列的数据,统统指到磁盘去)。而对于innodb表, id是主键,主键的叶子有其数据, (id,ver)联合索引没有数据,只是再次指向主键)。因此:\r\n1. 表如果是myisam引擎，2个语句，速度不会有明显差异。\r\n2. innodb表因为聚簇索引，id索引要在磁盘上跨N多块，导致速度慢。\r\n3. 即使innodb引擎，如果没有那几个text长列，2个语句的速度也不会有明显差异。\r\n\r\n\r\n## 理想的索引\r\n如何建立理想的索引，可以参考如下原则：\r\n1. 选择**查询频繁高**的字段。查询频繁高索引越有效。\r\n2. 选择**存储长度小**的字段。存储长度直接影响索引文件的大小，影响增删改的速度，并间接影响查询速度(占用内存多)，所以越小越快。\r\n3. 选择**区分度高**的字段，或者说字段取值越唯一越好。\r\n4. 选择尽量能**覆盖常用查询字段**的多列字段。这能够利用前面所说的索引覆盖，不用回行取数据，从而加快速度。\r\n\r\n什么是区分度高呢？例如有100万用户，性别字段基本上男、女各为50万，那么就可以说性别字段的区分度比较低。也就是某个字段的一个取值对应的记录数越少（最好是一个值只对应一个字段，那么可以使用primary key或unique key），则这个字段区分度越高。\r\n\r\n那么对于比较长的列如何建立索引？针对列中的值，从左往右截取部分，来建索引。\r\n1. 截的越短, 重复度越高，区分度越小, 索引效果越不好。\r\n2. 截的越长, 重复度越低，区分度越高, 索引效果越好，但带来的影响也越大——增删改变慢，并间影响查询速度。\r\n\r\n所以, 我们要在 区分度 + 长度 两者上，取得一个平衡。惯用手法: 截取不同长度，并测试其区分度，SQL语句如下：\r\n```sql\r\nselect count(distinct left(col_name, N))/count(*) from tab_name;\r\n```\r\n我们可以使用上面的SQL语句计算区分度百分比，使N从1开始取值查看区分度和长度的变化，然后选取合适的N。对于一般的系统应用，区别度能达到0.1，索引的性能就可以接受。\r\n\r\n对于左前缀不易区分的列，如URL列前面基本都是`http://`和`https://`。这种我们可以将字段翻转一下存放然后建立索引，或者将字段散列为整数之后的字段作为索引（如使用crc32函数将url散列为整数，保证这个整数位一个字段，然后使用这个字段做索引）。\r\n\r\n\r\n## 索引与排序\r\n索引不但能够加快where语句，也能够加快order by排序语句。排序可能的情况:\r\n1. 对于覆盖索引，在InnoDB引擎中，沿着索引字段排序，也是自然有序的。不需要额外排序, 这种情况叫using index。\r\n2. 对于覆盖索引，对于MyISAM引擎，如果按某索引字段排序。如id，但取出的字段中，有未索引字段, myisam的做法，不是索引->回行。而是先取出所有行，再进行排序。（using filesort）\r\n3. 没有使用索引，先取出数据，形成临时表然后排序。(using filesort，使用文件排序，但文件可能在磁盘上，也可能在内存中)。\r\n\r\n我们的争取目标——取出来的数据本身就是有序的! 只利用索引来排序（using index）。\r\n\r\n\r\n## 重复索引与冗余索引\r\n重复索引是指：如已经有了索引为index(a,b,c)，还有index(a)，index(a,b)等为前者的前缀，则称index(a)，index(a,b)为重复索引，重复索引没有任何帮助，只会增大索引文件，拖慢更新速度，需要去掉。实际上可以认为index(a,b,c)中已经包含了index(a)，index(a,b)。\r\n\r\n冗余索引是指：2个索引所覆盖的列有重叠, 称为冗余索引。合理使用冗余索引可以优化查询，推荐使用，冗余索引比较常见。\r\n\r\n\r\n## 索引碎片\r\n在长期的数据更改过程中（增删改操作，查询操作不会）， 索引文件和数据文件都将产生空洞，形成难以利用的磁盘碎片。（类似OS内存管理里面的内存碎片）。我们可以通过一个nop操作(不产生对数据实质影响的操作), 来进行碎片整理。\r\n\r\ninnodb引擎 , 可以 `alter table xxx engine innodb`\r\n\r\n还可以使用 `ptimize table tab_name`\r\n\r\n注意: 修复表的数据及索引碎片，就会把所有的数据文件重新整理一遍，使之对齐。这个过程，如果表的行数比较多，会非常耗费资源和时间。所以，不能频繁的修复。\r\n\r\n如果表的增删改操作很频率，可以按周/月为周期来修复。如果不频繁，可以以更长的周期来做修复。\r\n\r\n\r\n## 参考文章\r\n1. [MySQL索引是怎么实现的？ - _仰望星空_脚踏实地 - CSDN博客](https://blog.csdn.net/zzti_erlie/article/details/82973742)\r\n2. [B树，B-树和B+树的区别 - 简书](https://www.jianshu.com/p/332caf8bed3a)\r\n3. [mysql btree与hash索引的适用场景和限制 - xiaoboluo768 - 博客园](https://www.cnblogs.com/xiaoboluo768/p/5164342.html)\r\n4. [聚簇索引与非聚簇索引（也叫二级索引） - 简书](https://www.jianshu.com/p/fa8192853184)\r\n', 'normal', 92, b'0', b'1'),
(126, 'MySQL优化（三）——SQL语句优化', 1562550348, 1562560722, 1035, '在MySQL优化中，最常做的事情就是SQL语句优化，因为这个才是影响性能的最主要因素。\r\n\r\n## explain语句\r\n对SQL语句进行优化少不了使用explain分析SQL语句。下面先来说说怎么使用explain语句。\r\n\r\n### explain语法\r\nexplain语法比较简单，只需要在你要分析的SQL语句前面加上explain即可，如：\r\n```sql\r\nexplain select id,name from tb_user；\r\n```\r\n\r\nexplain语句输出的每一行为对一个语句的分析，来看看每行有哪些输出：\r\n```\r\nmysql> explain select * from test \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: test\r\n         type: ALL\r\npossible_keys: NULL\r\n          key: NULL\r\n      key_len: NULL\r\n          ref: NULL\r\n         rows: 6\r\n        Extra:\r\n1 row in set (0.00 sec)\r\n```\r\n这里为了方便查看结果使用了`\\G`代替分号。从上面可以看出explain的每行分析结果有10列，下面逐一分析每列的作用。\r\n\r\n### id\r\n代表select语句的编号, 如果是连接查询，表之间是平等关系，select编号相同。如果某select中有子查询，则编号基于主查询递增。例如：\r\n```\r\nmysql> explain select * from (select c1 from test) as tmp \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: PRIMARY\r\n        table: <derived2>\r\n         type: ALL\r\npossible_keys: NULL\r\n          key: NULL\r\n      key_len: NULL\r\n          ref: NULL\r\n         rows: 6\r\n        Extra:\r\n*************************** 2. row ***************************\r\n           id: 2\r\n  select_type: DERIVED\r\n        table: test\r\n         type: index\r\npossible_keys: NULL\r\n          key: c1234\r\n      key_len: 4\r\n          ref: NULL\r\n         rows: 6\r\n        Extra: Using index\r\n2 rows in set (0.00 sec)\r\n```\r\n\r\n### select_type\r\nselect_type表示select语句的类型，取值有如下几种：\r\n- `simple`：简单语句，不含子查询\r\n- `primary`：含有子查询的语句\r\n- `subquery`：非from型子查询语句\r\n- `derived`：from型子查询语句\r\n- `union`：union的语句\r\n- `union result`：union的结果\r\n\r\n![select_type](/uploads/artimgs/126/7ba8f0dd33fd291ec18e2ec188271276.png \"select_type\")\r\n\r\n### table\r\ntable即该语句所查询的表，可能的取值有：\r\n- `实际的表名`\r\n- `表的别名`：如explain select * from t2 as tmp，则table为tmp\r\n- `derived`：from型子查询时\r\n- `NULL`：直接计算得结果，不用走表\r\n\r\n### type\r\ntype指查询的方式，非常重要，是分析数据查询过程的重要依据。可能的值如下：\r\n- `ALL`：意味着对全表逐行扫描，运气不好扫描到最后一行，性能最低。\r\n- `index`：比all性能稍好一点，通俗的说: ALL扫描所有的数据行（扫描整本书），index扫描所有的索引节点（扫描书的全部目录），其实可以理解为index_all。\r\n- `range`：查询时，能根据索引做范围的扫描（扫描书的部分目录），可理解为index_range。\r\n- `ref`：通过索引列，可以直接引用到某些数据行（定位到某些行的数据范围）。\r\n- `eq_ref`：通过索引列，直接引用某1行数据（定位到某行的数据位置），常见于连接查询中。\r\n- `const,system,null`：这3个分别指查询为常量级别, 甚至不需要查找时间。一般按照主键来查询时，易出现const,system，或者直接查询某个表达式，不经过表时, 出现NULL。\r\n\r\n以上取值代码的性能越来越高，所以我们的优化目标应该是将SQL语句优化到常量级别，最好则是不使用SQL查询。\r\n\r\n### possible_keys\r\npossible_keys指开始查询前估计可能使用的索引。\r\n\r\n### key\r\nkey指实际查询时所使用的索引。\r\n\r\n### key_len\r\nkey_len指实际查询时所使用的索引的长度。因为对于多列索引可能只会用到其中的部分列，用这个看出来用了哪些列。\r\n\r\n### ref\r\n在表的连接匹配时，哪些列或常量被用于查找索引列上的值。\r\n\r\n### rows\r\n估计查询结果的行数，MySQL根据表统计信息及索引选用情况，估算找到所需的记录所需要读取的行数。\r\n\r\n### Extra\r\n查询的额外信息，比较重要。取值为下面的一项或多项：\r\n- `useing index`：使用了索引覆盖，效率非常高。\r\n- `using where`：光靠索引定位不了，还使用了where辅助判断。\r\n- `using temporary`：使用了临时表，当group by与order by不同列时会出现。\r\n- `using filesort`：使用文件排序(文件可能在磁盘,也可能在内存)，当数据量大时性能较低，要避免这种情况。\r\n\r\n注：如果取出的列，含有text,blob或者更大的如mediumtext等，filesort将会发生在磁盘上。\r\n\r\n\r\n## in型子查询的陷阱\r\nMySQL针对in型子查询做了优化，将in改成了exists子查询的执行效果。\r\n\r\n执行过程不是我们直观想象的：先执行in子查询取出所有的数据，然后执行主查询判断每个数据是否在in取出的数据中。\r\n\r\n而实际上的执行过程是：先执行主查询取出数据，然后遍历每个数据，将每个数据使用exists查询，这会每次拿着数据去in子查询表中查询该数据是否存在。\r\n\r\n当in子查询表数据越多时, 查询速度越慢，我们可以使用连接查询代替in型子查询。如果in子查询表数据很少，使用in问题不大，甚至性能比连接查询要好。\r\n\r\n\r\n## limit及翻页优化\r\n我们可能会经常使用limit做翻页：`limit offset, N`。其实上limit有一个问题：当offset非常大时, 效率极低。\r\n\r\n原因是MySQL并不是跳过offset行，然后只取出后面的N行，而是会取出offset+N行，之后再丢掉前offset行。如果offset过大，那么取出的数据会非常大，很消耗资源。\r\n\r\n如何优化？\r\n1. 从业务上去解决，办法: 不允许翻过100页，以百度为例,一般翻页到70页左右。这种方法是限制offset不至于过大。\r\n2. 不用limit，用条件查询：\r\n```sql\r\n-- 原limit语句\r\nselect id,title,time from tb_article limit offset, N\r\n-- 使用下面代替\r\nselect id,title,time from tb_article where row_index>offset limit N\r\n```\r\n这种方法需要增加一个额外的字段记录行数(可以直接使用主键)，并且数据不进行物理删除(可以逻辑删除，什么是逻辑删除请自行百度)。\r\n3. 非要物理删除，还要用offset精确查询，还不限制用户分页，怎么办？优化思路是不查,少查,查索引,少取列。如果必须要查，则只查索引，不查数据，得到id，再用id去查具体条目信息，这样会使取出的数据不至于过大。SQL语句参考：\r\n```sql\r\nselect id,title,time\r\nfrom tb_article\r\ninner join (select id from tb_article limit offset, N) as tmp using id\r\n```\r\n\r\n\r\n## 其它子查询优化\r\n### from型子查询\r\nfrom子查询查到的临时表, 是没有索引的。所以from的返回内容要尽量少，如果需要排序，在子查询内就先排好序。\r\n\r\n### group by优化\r\n注意：分组用于统计，而不用于筛选重复数据。不重复的行，分组统计数据用, 而不要让查询产生N多重复数据，用group去重，效率会很低。\r\n\r\n比如：1->N 连接时，栏目---左连接--->商品表，将会产生重复行。\r\n\r\n比如: 分组用于统计平均分、最高分较适合，但用于筛选重复数据，则不适合。\r\n\r\n以及可以用索引来避免临时表和文件排序（using filesort）。\r\n\r\ngroup by 的列要有索引，可以避免临时表及文件排序。\r\norder by 的列要和group by 的一致，否则也会引起临时表。(原因是因为group by 和order by 都需要排序，所以如果2者的列不一致，那必须经过至少1次排序)。\r\n\r\n### order by优化\r\n通过索引排序是性能最好的，通常如果SQL语句不合理，就无法使用索引排序，以下几种情况是无法使用索引排序的。\r\n1. 查询使用了两种不同的排序方向，但是索引列都是正序排序的;\r\n2. 查询的where和order by中的列无法组合成索引的最左前缀;\r\n3. 查询在索引列的第一列上是范围条件;\r\n4. 查询条件上有多个等于条件。对排序来说，这也是一种范围查询。\r\n\r\n### union优化\r\nunion总是会产生临时表，对union的优化比较棘手。\r\n1. 注意union的子句条件要尽量具体，即--查询更少的行。\r\n2. 子句的结果在内存里并成结果集，需要去重复，去重复就得先排序。而加all之后,不需要去重, union尽量加all，可以在代码中去重（压根就不应该取出重复的行）。\r\n\r\n### count() 优化\r\n误区: myisam的count()非常快\r\n答: 是比较快，但仅限于查询表的”所有行”比较快, 因为Myisam对行数进行了存储。一旦带有where条件, 速度就不再快了，尤其是where条件的列上没有索引更慢了。\r\n\r\n假如，id<100 的商家都是我们内部测试的,我们想查查真实的商家有多少?\r\n```sql\r\nselect count(*) from lx_com where id>=100;  -- (1000多万行用了6.X秒)\r\n-- 小技巧:\r\nselect count(*) from lx_com; -- 极快\r\nselect count(*) from lx_com where id<100; -- 快（数据少）\r\nselect (select count(*) from lx_com) - (select count(*) from lx_com where id<100); -- 快\r\n```\r\n\r\n\r\n## 参考文章\r\n1. [mysql 语句优化 - 小秀的博客 - CSDN博客](https://blog.csdn.net/qq_41198398/article/details/83818511 \"mysql 语句优化 - 小秀的博客 - CSDN博客\")\r\n2. [MySQL Explain详解 - 杰克思勒(Jacksile) - 博客园](https://www.cnblogs.com/tufujie/p/9413852.html \"MySQL Explain详解 - 杰克思勒(Jacksile) - 博客园\")\r\n3. [MySQL常用SQL语句优化 - yayun - 博客园](https://www.cnblogs.com/gomysql/p/3632209.html \"MySQL常用SQL语句优化 - yayun - 博客园\")\r\n', 'normal', 230, b'0', b'1'),
(127, 'PHP扩展之PDO', 1562915234, 1563685341, 1000, '## PDO介绍\r\nPDO是 PHP Data Oject 的缩写，即PHP数据对象。提供了访问各种数据库的一致接口，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。\r\n\r\nPDO还提供了预处理功能来防止SQL注入，另外也可以使用事务功能。\r\n\r\n\r\n## 安装PDO扩展\r\nPHP在安装的时候，已经默认安装了PDO扩展，但要使用PDO操作具体的数据库，需要安装相应的数据库驱动扩展`pdo-dbname`。安装扩展的方法这里不做说明。\r\n\r\n要查看PDO支持哪些数据库驱动，点击这里：[PHP: PDO 驱动 - Manual](https://www.php.net/manual/zh/pdo.drivers.php \"PHP: PDO 驱动 - Manual\")\r\n\r\n\r\n## 使用PDO连接数据库\r\n下面使用PDO连接本地的MySQL数据库，先实例化一个PDO对象：\r\n```php\r\n$pdo = new PDO(\'mysql:host=localhost;port=3306;dbname=test;charset=utf8\', \'root\', \'123456\');\r\n```\r\n\r\n第一个参数为数据源名称，其中`mysql`为数据库名称（小写），`:`号后面的参数有：\r\n- `host`：数据库主机地址，本地可以填`localhost`或`127.0.0.1`，默认本机。\r\n- `port`：数据库服务端口号，默认端口3306。\r\n- `dbname`：要选择数据库名称，这里可以不写，之后可以用执行`use dbname`选择。但注意要有改数据库的操作权限。\r\n- `charset`：传输数据使用的字符集，默认`utf8。\r\n\r\n第二个参数为连接数据库的用户名，第三个参数为用户密码。\r\n\r\n其实还有第四个参数，用来设置连接参数，请参考PHP手册：https://www.php.net/manual/zh/pdo.setattribute.php\r\n\r\n如果连接出现错误，将抛出一个 `PDOException` 异常对象，你可以使用 `try-catch` 语句捕获它。\r\n\r\n## 执行SQL查询\r\n执行一条SQL查询很简单：\r\n```php\r\n$sql = \"select * from tb_user\";\r\n$statement = $pdo->query($sql);\r\n```\r\n`query`方法执行一条SQL语句，查询失败返回false，成功返回一个`PDOStatement`对象。\r\n\r\n`PDOStatement`是PDO语句类，用来获取查询语句结果、执行预处理语句。\r\n\r\n### 获取错误信息\r\n先看看执行失败时候如何获取错误信息，PDO类提供两个方法：\r\n```\r\n// 返回一个SQLSTATE，由5个字母或数字组成的在 ANSI SQL 标准中定义的标识符。\r\npublic PDO::errorCode ( void ) : mixed\r\n\r\n// 获取最后一个操作相关的错误信息（包含了errorCode，所以一般使用这个）\r\npublic PDO::errorInfo ( void ) : array\r\n```\r\n`errorInfo`方法返回的数组结构如下：\r\n\r\n| 元素  | 说明信息  |\r\n| ------------ | ------------ |\r\n|  0 | SQL 错误状态码  |\r\n|  1 |  驱动指定的错误码 |\r\n|  2 |  驱动指定的错误信息 |\r\n\r\n### 获取查询结果\r\n如果执行的是 select 语句，并且语句执行成功，则可以通过 `query()` 方法返回的`PDOStatement`对象获取查询的结果。PDOStatement类相关的方法有：\r\n\r\n```\r\n// 一般来说如果语句无返回数据使用`rowCount`获取SQL语句影响的行数即可，如insert、delete、update等语句。\r\npublic PDOStatement::rowCount() — 返回受上一个SQL语句影响的行数\r\n\r\n// 如果有返回数据使用下面的方法，如select语句。\r\npublic PDOStatement::columnCount() — 返回结果集中的列数\r\npublic PDOStatement::setFetchMode() — 为语句设置默认的获取模式。\r\npublic PDOStatement::bindParam() — 绑定一个参数到指定的变量名\r\npublic PDOStatement::fetch() — 从结果集中获取下一行\r\npublic PDOStatement::fetchAll() — 返回一个包含结果集中所有行的数组\r\npublic PDOStatement::fetchColumn() — 从结果集中的下一行返回单独的一列。\r\npublic PDOStatement::fetchObject() — 获取下一行并作为一个对象返回。\r\n```\r\n\r\n查看各个函数的具体用法点这里：[PHP: PDOStatement - Manual](https://www.php.net/manual/zh/class.pdostatement.php \"PHP: PDOStatement - Manual\")\r\n\r\n这里介绍一般获取 select 语句返回数据的用法：\r\n```php\r\n// 设置获取的数据为关联数组（推荐）\r\n$statement->setFetchMode(PDO::FETCH_ASSOC);\r\n\r\n// 一行一行的获取\r\nwhile ($row = $statement->fetch()) {\r\n    print_r($row);\r\n}\r\n\r\n// 一次全部取出\r\n$rows = $statement->fetchAll();\r\nprint_r($rows);\r\n```\r\n\r\n## 使用预处理防止SQL注入\r\nPDO一个强大的功能就是提供了预处理功能，通过先设置SQL语句格式，然后再绑定具体查询参数，可以有效的防止SQL注入攻击。\r\n\r\n要使用预处理，先调用PDO对象的`prepare()`方法来设置的SQL语句格式，该方法返回一个`PDOStatement`对象，接着使用PDOStatement对象的`execute()`方法绑定具体的参数并执行查询：\r\n```php\r\n$sql = \"select * from tb_user where id = :id and password = :password\";\r\n$statement = $pdo->prepare($sql); // 设置SQL语句格式\r\n// 准备查询参数\r\n$args = [\r\n    \':id\' => 1004,\r\n	\':password\' => \'123456\',\r\n];\r\n$res = $statement->execute($args); // 绑定参数并执行查询\r\n```\r\n\r\n上面使用了名称占位符`:id`和`:password`，还可以使用通用占位符`?`。如果使用了通用占位符，那么绑定的参数的时候不需要指定名称，按顺序传入即可，就像这样：\r\n```php\r\n$sql = \"select * from tb_user where id = ? and password = ?\";\r\n$statement = $pdo->prepare($sql);\r\n$args = [1004, \'123456\'];\r\n$res = $statement->execute($args);\r\n```\r\n\r\n还可以不一次性绑定所有参数，而是以一个一个的绑定参数值：\r\n```php\r\n// （1）通过序号绑定\r\n$sql = \"select * from tb_user where id = ? and password = ?\";\r\n$statement = $pdo->prepare($sql);\r\n$statement->bindValue(1, 1004, PDO::PARAM_INT);\r\n$statement->bindValue(2, \'123456\', PDO::PARAM_STR);\r\n$res = $statement->execute();\r\n\r\n// （2）通过名称占位符绑定\r\n$sql = \"select * from tb_user where id = :id and password = :password\";\r\n$statement = $pdo->prepare($sql); // 设置SQL语句格式\r\n$statement->bindValue(\':id\', 1004, PDO::PARAM_INT);\r\n$statement->bindValue(\':password\', \'123456\', PDO::PARAM_STR);\r\n$res = $statement->execute();\r\n```\r\n\r\n使用`bindValue()`方法可以一个个绑定参数，并且它的第三个参数可以指定参数类型，默认为`PDO::PARAM_STR`，要查看全部的类型可以点击这里：[PDO预定义常量](https://www.php.net/manual/zh/pdo.constants.php \"PDO预定义常量\")。\r\n\r\n和`bindValue()`方法类似的还有`bindParam()`方法，它们的参数相同，不同的是变量作为引用被绑定，并只在`execute()`被调用的时候才取其值。 \r\n\r\n`execute()`方法会返回一个`bool`值表示查询是否成功，如果返回`false`你可以使用下面两个方法获取错误信息：\r\n```\r\n// 返回一个 SQLSTATE，由5个字母或数字组成的在 ANSI SQL 标准中定义的标识符。\r\npublic PDOStatement::errorCode ( void ) : mixed\r\n\r\n// 获取最后一个操作相关的错误信息（包含了errorCode，所以一般使用这个）\r\npublic PDOStatement::errorInfo ( void ) : array\r\n```\r\n\r\n\r\n## 使用事务\r\nPDO提供了事务功能，相关的方法如下：\r\n```\r\n// 启动一个事务\r\npublic PDO::beginTransaction ( void ) : bool\r\n// 提交一个事务\r\npublic PDO::commit ( void ) : bool\r\n// 回滚一个事务\r\npublic PDO::rollBack ( void ) : bool\r\n```\r\n\r\n如果底层数据库驱动不支持事务，则`beginTransaction()`方法会抛出一个`PDOException`异常。\r\n\r\n使用例子：\r\n```php\r\ntry { \r\n	// 开始一个事务，关闭自动提交\r\n	$pdo->beginTransaction();\r\n	\r\n	// 开始SQL查询，可以使用预处理\r\n	$sth = $pdo->exec(\"UPDATE dessert SET name = \'hamburger\'\");\r\n	$sql = \'INSERT INTO fruit(name, colour, calories) VALUES (?, ?, ?)\';\r\n	$sth = $dbh->prepare($sql);\r\n	foreach ($fruits as $fruit) {\r\n		$sth->execute(array(\r\n			$fruit->name,\r\n			$fruit->colour,\r\n			$fruit->calories,\r\n		));\r\n	}\r\n	// 提交\r\n	$pdo->commit();\r\n} catch (Exception $e) { // 发生错误则回滚\r\n  $pdo->rollBack();\r\n  echo $e->getMessage();\r\n}\r\n\r\n// 此时数据库连接恢复到自动提交模式\r\n```\r\n\r\n\r\n## 参考文章\r\n1. PHP手册：[PHP: PDO - Manual](https://www.php.net/manual/zh/book.pdo.php \"PHP: PDO - Manual\")\r\n', 'normal', 97, b'0', b'1'),
(128, 'Windows下组建PHP环境（Nginx+PHP+MySQL）', 1563193500, 1563199762, 1000, '之前在Windows下使用PHP开发时都是使用的集成环境比如phpstudy、wxampp，但是身为一个PHPer怎么能不会自己搭建PHP环境呢。如果不会的话，那么就一起来学习下。\r\n\r\n## 安装 Nginx\r\n\r\n### 下载 Nginx 软件包\r\n下载地址：http://nginx.org/en/download.html\r\n\r\n自己选一个版本，目前最新稳定版为1.16，我下载这个。注意选择windows版本的（nginx/Windows-1.16.0）。\r\n\r\n![nginx下载](/uploads/artimgs/128/703d67a15f312d5108c902dace97b76b.png \"nginx下载\")\r\n\r\n我们下载的是一个免安装的压缩包，直接解压到合适的目录下即可，我这解压后目录为`D:\\LQ_WXMP\\Nginx\\nginx-1.16.0`（建立Nginx目录是为了可以存放多版本）。建议把PHP需要的软件都放一个目录下，我都放在`D:\\LQ_WXMP\\`。\r\n\r\n目录结构如下（和Linux下基本相类似），末尾带`\\`表示目录：\r\n```\r\nD:\\LQ_WXMP\\Nginx\\nginx-1.16.0\\\r\n    conf\\           配置目录\r\n    contrib\\        其他机构或组织贡献的代码\r\n    docs\\           各种说明文件\r\n    html\\           默认web根目录\r\n    logs\\           日志目录\r\n    temp\\           临时文件目录\r\n    nginx.exe       nginx执行程序（nginx只有一个可执行文件）\r\n```\r\n\r\n### 启动 Nginx\r\n启动Nignx的方法：双击nginx安装目录下的`nginx.exe`即可。\r\n\r\n注意不能使用快捷方式启动 nginx.exe，会提示找不到配置文件路径，如果你想**快速启动**，可以建立一个`nginx-start.bat`脚本文件放在桌面上，文件内容如下：\r\n```shell\r\necho Starting Nginx ...\r\nstart D:\\LQ_WXMP\\Nginx\\nginx-1.16.0\\nginx.exe\r\necho Starting OK!\r\n```\r\n\r\n还可以建立一个`nginx-stop.bat`用来停止nginx:\r\n```shell\r\necho Stopping PHP CGI/FastCGI ...\r\ntaskkill /F /IM nginx.exe > nul\r\n```\r\n\r\n### 测试\r\n启动Nginx，然后在浏览器打开 `http://localhost`，如果出现默认的欢迎页面则说明安装成功。\r\n\r\n\r\n## 安装 PHP\r\n### 下载 PHP 软件包\r\nwindows版本PHP下载地址：https://windows.php.net/download\r\n\r\n打开页面后选择一个想要的版本（推荐PHP7+），需要看清的是：编译器版本、64或32位、是否为线程安全版。比如我下载的是：\r\n```\r\nPHP 7.3 (7.3.7) VC15 x64 Non Thread Safe (2019-Jul-03 17:49:17)\r\n```\r\n意思是使用VC15编译器编译的、64位的、非线程安全版本的PHP，括号后面的是发布时间。\r\n\r\n![php7.3下载](/uploads/artimgs/128/28093bde5dfe9bd78aad11e71d9264d6.png \"php7.3下载\")\r\n\r\n关于TS（Thread Safe）和NTS（Non Thread Safe）版本的选择，可以看看这篇文章：[PHP TS 和 NTS 版本选择](https://www.cnblogs.com/zwesy/p/9379025.html \"PHP TS 和 NTS 版本选择\")，由于我们使用的是Nginx，对于Nginx我们使用NTS更好一些。\r\n\r\n我们下载zip包，这个也是免安装版的，下载后要解压到合适的目录，我解压后的目录是：`D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64`。（建立PHP目录是为了可以存放多版本）\r\n\r\n因为解压后文件比较多，这里只说明我们需要了解的文件或目录：\r\n```\r\nD:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\\r\n    ext\\          PHP扩展库目录\r\n	php.exe       PHP CLI（PHP命令行版）\r\n	php-cgi.exe   PHP CGI/FastCGI\r\n```\r\n\r\n建议将php安装目录加入系统环境变量`PATH`。\r\n\r\n### 配置 php.ini\r\n然后我们配置一下php，复制`php.ini-development`，重命名为`php.ini`，然后使用记事本或者Notepad++等文本编辑器打开。\r\n\r\n先修改扩展目录路径，搜索`extension_dir = \"ext\"`，找到下面两行：\r\n```\r\n; On windows:\r\n;extension_dir = \"ext\"\r\n```\r\n其中`;`为行注释符，我们将extension_dir修改为自己电脑上的PHP扩展库目录路径：\r\n```\r\n; On windows:\r\nextension_dir = \"D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\ext\"\r\n```\r\n\r\n接着去掉一些常用扩展前面的注释符`;`，比如可将下面的这些行（下面列出来的并不是在一起）前面的注释符去掉：\r\n```\r\n;extension=fileinfo\r\n;extension=gd2\r\n;extension=mysqli\r\n;extension=pdo_mysql\r\n;extension=sockets\r\n```\r\n\r\n### 测试\r\n要测试php是否安装及配置成功，我们可以使用命令行，我们打开cmd，使用cd切换要php安装目录，然后执行`php -v`。出现的内容类似如下：\r\n```\r\nPHP 7.3.7 (cli) (built: Jul  3 2019 14:34:15) ( NTS MSVC15 (Visual C++ 2017) x64 )\r\nCopyright (c) 1997-2018 The PHP Group\r\nZend Engine v3.3.7, Copyright (c) 1998-2018 Zend Technologies\r\n```\r\n\r\n再执行`php -m`，可以查看已经开启的扩展，没有报错信息则说明安装和配置PHP成功。\r\n\r\n\r\n## 在网页中使用 PHP\r\n### Nginx 配置PHP\r\n我们需要修改Nginx配置文件才能在网页中使用php，具体配置方法，参考我的另外一篇文章：[Nginx配置PHP运行环境](https://www.luoluolzb.cn/article/90 \"Nginx配置PHP运行环境\")\r\n\r\n配置好之后别忘了重新启动 Nignx。\r\n\r\n### 启动 PHP-CGI\r\n打开cmd，执行：\r\n```shell\r\nstart D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\php-cgi.exe -b 127.0.0.1:9000 -c D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\php.ini\r\n```\r\n将上面的目录修改为你的实际目录。执行后会打开一个php-cgi空窗口，如果我们关闭窗口了，就关闭了PHP-CGI程序。\r\n\r\n如果我们想要快速启动，可以在桌面上新建一个`php-start.bat`文件，文件内容和上面类似：\r\n```shell\r\necho Starting PHP CGI/FastCGI ...\r\nstart D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\php-cgi.exe -b 127.0.0.1:9000 -c D:\\LQ_WXMP\\PHP\\php-7.3.7-nts-Win32-VC15-x64\\php.ini\r\necho Starting OK!\r\n```\r\n\r\n### 测试\r\n新建一个php文件，内容如下：\r\n```php\r\n<?php\r\necho phpinfo();\r\n```\r\n\r\n我们保存为`phpinfo.php`，放在nginx配置的web根目录下，然后浏览器打开`http://localhost/phpinfo.php`。能够正常显示下面的页面则说明配置成功。\r\n\r\n![phpinfo](/uploads/artimgs/128/2946a4eddee434ec5f24c85b28a797ca.png \"phpinfo\")\r\n\r\n## 安装 MySQL\r\nMySQL不是PHP开发必须的，但也不可少的。\r\n\r\n对于windows下安装MySQL，网上教程比较多，我这里就不说了，我推荐一个：[Windows下安装MySQL详细教程 - m1racle - 博客园](https://www.cnblogs.com/zhangkanghui/p/9613844.html \"Windows下安装MySQL详细教程 - m1racle - 博客园\")\r\n', 'normal', 128, b'0', b'1'),
(129, 'JavaScript面向对象之原型链和继承原理', 1563334913, 1563345018, 1030, '刚接触JavaScript面向对象的同学，对于原型链和继承一定一头雾水。我接触js也有不少时间了，但这些问题到今天才弄清楚，不会的同学随我一起来学习吧。\r\n\r\n## 实例化对象\r\n我们知道**js中没有“类”，只有对象**。没有类那么怎样创建一个对象呢？有两种方法，一种直接通过`{}`创建，一种是通过构造函数创建。\r\n\r\n### 通过`{}`创建对象\r\n使用`{}`创建一个对象十分直观，就像这样：\r\n```javascript\r\nvar zhangsan = {\r\n    name: \'zhangsan\',\r\n    hello: function() {\r\n        console.log(`hi!I am ${this.name}`);\r\n    },\r\n};\r\nzhangsan.age = 20;\r\nzhangsan.hello();\r\n```\r\n`{}`中使用键值对方式直接书写属性和方法，也可以创建后再动态添加属性和方法。\r\n\r\n### 通过构造函数创建对象\r\n先写一个构造函数：\r\n```javascript\r\nfunction Person(name, age)\r\n{\r\n    this.name = name;\r\n    this.age = age;\r\n    this.hello = function() {\r\n        console.log(`hi!I am ${this.name}`);\r\n    };\r\n}\r\n```\r\n在`this`上添加属性即为新对象的属性，然后我们再通过new构造函数来创建对象：\r\n```javascript\r\nvar zhangsan = new Person(\'zhangsan\', 20);\r\nzhangsan.hello();\r\n```\r\n\r\n其中还有第三种创建对象的方法，就是使用`Object.create()`，用的不多，大家自己去了解一下。\r\n\r\n\r\n## 原型链\r\n对于原型链我们需要需要知道以下三点：\r\n\r\n1. `__proto__` 是指该对象的原型对象（父对象），沿着某对象的 `__proto__` 可以自下而上直到`null`组成一条对象链，这个就叫原型链。访问对象的属性或方法会沿着原型链自下而上查找。\r\n2. `prototype` 是函数（如Array）的独有属性，指向该函数所有实例对象的原型对象。\r\n由1，2两点可知：\r\n```javascript\r\n(new Array()).__proto__ === Array.prototype;  //（1）\r\n```\r\n3. `constructor` 为对象的属性， 指向new出该对象的构造函数。\r\n由2，3两点可知：\r\n```javascript\r\n(new Array()).constructor === Array;  //（2）\r\n```\r\n由（1）（2）式可推出：\r\n```javascript\r\n(new Array()).constructor.prototype === (new Array()).__proto__;  //（3）\r\n```\r\n\r\n可以结合下面这张图来理解：\r\n\r\n![Javascript原型链](/uploads/artimgs/129/7f3311195e8ad4c5e8224ffb4eef40e7.jpg \"Javascript原型链\")\r\n\r\n只要我们理解上面的三点，即`__proto__`、`prototype`、`constructor`的作用和三个式子，对于很多js面向对象的问题我们也都能弄懂了。\r\n\r\n\r\n## 对象继承原理\r\n不多说，直接上代码：\r\n```javascript\r\nfunction Father() {}\r\nFather.prototype.say = function() {\r\n    console.log(\'I am Father\');\r\n};\r\n\r\nfunction Son() {}\r\nSon.prototype.__proto__ = Father.prototype; // 修改原型指向\r\n\r\nvar son = new Son();\r\nson.say();\r\n```\r\n结合这张图看代码：\r\n\r\n![Javascript继承](/uploads/artimgs/129/5cd6c17238bb955a27bfce1d81f94d09.jpg \"Javascript继承\")\r\n\r\n### ES6对象继承\r\nES6提供了class和extends关键字实现对象继承，但其实原理仍然是上面的原型链机制。\r\n```javascript\r\nclass Father\r\n{\r\n    say() {\r\n        console.log(\'I am Father\');\r\n    }\r\n}\r\n\r\nclass Son extends Father {}\r\n\r\nvar son = new Son();\r\nson.say();\r\n```\r\n\r\n## 参考文章\r\n1. [帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）](https://blog.csdn.net/cc18868876837/article/details/81211729 \"帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）\")\r\n2. [原型继承 - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/1022910821149312/1023021997355072 \"原型继承 - 廖雪峰的官方网站\")\r\n3. [js创建对象的三种方式 - 改天打老虎 - 博客园](https://www.cnblogs.com/zyiii/p/8822550.html \"js创建对象的三种方式 - 改天打老虎 - 博客园\")\r\n', 'normal', 64, b'0', b'1'),
(130, 'composer的四种自动加载', 1563507772, 1563513694, 1000, 'composer中可以配置四种自动加载规则，你可能会熟知其中的一两种，但可能不知道有四种吧？不知道的一起来随我学习吧。\r\n\r\n## psr-4 自动加载\r\npsr-4是目前最新的、最受欢迎的、广泛在各种composer包、PHP框架中使用的自动加载方式。\r\n\r\n我这里不说明psr-4的加载规则了，因为官方文档比我说明的更规范、更清楚，如果不知道psr-4可以查看文章末尾的参考文章。\r\n\r\n这里只说明怎么在`composer.json`中配置psr-4自动加载规则：\r\n\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"psr-4\": {\r\n            \"Monolog\\\\\": \"src/\",\r\n            \"Vendor\\\\Namespace\\\\\": \"\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`autoload`对象里面即为所有自动加载规则，包含psr-4和下面要介绍的三种。\r\n\r\n`psr-4`对象里面为多个键值对，每个键值对配置一个psr-4加载规则：\r\n- 键： 基础命名空间名字，并且以`\\\\`结束（用两个反斜杠是为了转义），如果为空则表示全局命名空间（不要使用`\"\\\\\"`表示全局命名空间）。\r\n- 值： 该基础命名空间对应的基目录（基目录为相对路径，相对于项目根目录），并且以目录分割符`/`结束，如果为空或者`\"./\"`则表示当前项目根目录。\r\n\r\n如果一个基础命名空间对应多个基目录，那么可以将多个基目录放在一个数组里面：\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\r\n    }\r\n}\r\n```\r\n\r\n还可以将基础命名空间设置为空（不要使用`\"\\\\\"`表示全局命名空间），这样全局命名空间便对应于指定的目录：\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"psr-4\": { \"\": \"src/\" }\r\n    }\r\n}\r\n```\r\n\r\n修改了`autoload`字段后我们需要使用执行composer的`dump-autoload`命令使之生效（每次修改都要重新执行）：\r\n```shell\r\ncomposer dump-autoload\r\n```\r\n\r\n执行后我们可以在`vendor/composer/autoload_psr4.php`文件中查看所有生成的psr-4规则。\r\n\r\n\r\n## psr-0 自动加载\r\npsr-0是psr-4的前身，因为有缺陷而被psr-4代替了，现在已经被废弃了，不推荐使用。但是有些composer包（历史原因）还有用到，所以了解一下也是有必要的。\r\n\r\n具体的psr-0说明可以看文章末尾的参考文章。\r\n\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"psr-0\": {\r\n            \"Monolog\\\\\": \"src/\",\r\n            \"Vendor\\\\Namespace\\\\\": \"src/\",\r\n            \"Vendor_Namespace_\": \"src/\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`psr-0`的配置方法基本和psr-4相同，不同的是：每个psr-0规则的键值对的中，“值”不是指基础命名空间对应的基目录，而是指包含该基础命名空间的父目录！父目录这一点也是psr-0的缺陷，如果不明白为什么可以做做实验。\r\n\r\npsr-0 生成的规则我们可以在`vendor/composer/autoload_namespaces.php`文件中查看。\r\n\r\n## classmap 自动加载\r\nclassmap 自动加载在psr规范里面并没有，是composer自己加的一种加载规则。\r\n\r\n你可以指定一些要搜索的类文件目录或者具体类文件路径，执行composer的`dump-autoload`命令后，会自动扫描这些目录下的类文件和具体类文件，生成一个类名到类文件路径的映射表，这也是叫classmap的原因。\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\r\n    }\r\n}\r\n```\r\n`classmap`是一个数组（注意不是对象也不是一个字符串），每个元素指定一个类文件搜索目录或者直接指定一个类文件路径。\r\n\r\nclassmap 生成的规则我们可以在`vendor/composer/autoload_classmap.php`文件中查看。\r\n\r\n\r\n## files 自动加载\r\nfiles 自动加载在psr规范里面没有，也是composer自己加的。\r\n\r\nfiles 自动加载相对来说就比较简单了，你可以指定一些php文件，这些文件每次总是会被载入，而不管有没有用到里面的类。一般用来载入经常使用的函数库文件：\r\n\r\n```json\r\n{\r\n    \"autoload\": {\r\n        \"files\": [\"src/MyLibrary/functions.php\"]\r\n    }\r\n}\r\n```\r\n`files`是一个数组（注意不是对象也不是一个字符串），每个元素指定一个需要加载的php文件路径。\r\n\r\nfiles 生成的规则我们可以在`vendor/composer/autoload_files.php`文件中查看。\r\n\r\n\r\n## 参考文章\r\n1. [composer.json 架构 | Composer 中文文档 | Composer 中文网](https://docs.phpcomposer.com/04-schema.html#autoload \"composer.json 架构 | Composer 中文文档 | Composer 中文网\")\r\n2. [PSR-0 自动加载规范（已弃用） |《PHP PSR 标准规范》| PHP 技术论坛](https://learnku.com/docs/psr/psr-0-automatic-loading-specification/1603 \"PSR-0 自动加载规范（已弃用） |《PHP PSR 标准规范》| PHP 技术论坛\")\r\n3. [「PSR 规范」PSR-4 自动加载规范 | Laravel China 社区](https://learnku.com/laravel/t/2081/psr-specification-psr-4-automatic-loading-specification \"「PSR 规范」PSR-4 自动加载规范 | Laravel China 社区\")\r\n', 'normal', 56, b'0', b'1');

-- --------------------------------------------------------

--
-- 表的结构 `lb_article_extra`
--

CREATE TABLE `lb_article_extra` (
  `article_id` int(11) UNSIGNED NOT NULL DEFAULT '0' COMMENT '文章ID',
  `intro` varchar(500) DEFAULT NULL COMMENT '文章简介',
  `img_alt` varchar(64) DEFAULT '' COMMENT '图片alt',
  `img_url` varchar(255) DEFAULT '' COMMENT '图片URL',
  `img_title` varchar(255) DEFAULT NULL COMMENT '图片title'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='获取文章列表所需的额外信息';

--
-- 转存表中的数据 `lb_article_extra`
--

INSERT INTO `lb_article_extra` (`article_id`, `intro`, `img_alt`, `img_url`, `img_title`) VALUES
(12, ' 思路\r\n剔除markdown的标签，为了加快速度，可以先截取前若干字符再剔除。\r\n\r\n 代码\r\nMarkdown.php\r\n\r\nphp\r\n&lt;?php\r\n\r\nclass Markdown\r\n{\r\n	static public function getIntro($md, $intro_count)\r\n	{\r\n		$md = mb_substr($md, 0, $intro_count * 2);\r\n		//剔除TOCM]和[TOC\r\n		$md = preg_replace(\'/\\TOCM?\\/', '', '', NULL),
(21, ' 基本hmtl页面结构\r\n\r\n基本的html页面由顶部(html说明)、头部(head)、主体组成(body)\r\n模板：\r\nhtml\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=&quot;zhCN&quot;&gt;\r\n&lt;head&gt;\r\n	&lt;meta charset=&quot;UTF8&quot;&gt;\r\n	&lt;title&gt;网页标题&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n	网页内容\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n\r\n 标签：元素、属性、值\r\n\r\nhtml页面由标签组合、嵌套而成，标签则由元素、属性、值组成', '', '', NULL),
(22, ' 规划网站\r\n\r\n规划网站的方法：\r\n 选定网站类型\r\n 确定页面结构，画出网站结构草图\r\n 设计页面、图像、其他文件的命名规则 \r\n 默认页面\r\n\r\n服务器会根据文件名识别每个文件夹中的默认页面，会依次查找：&quot;index.html&quot;、&quot;index.htm&quot;、&quot;default.htm&quot;\r\n\r\n这意味着你在浏览器地址栏输入 &quot;www.luoluolzb.cn&quot; 和 &quot;www.luoluolzb.cn/index.html&quot; 的效果一样\r\n\r\n 关于html文件\r\n\r\nhtml为纯文本文件，使用记事', '', '', NULL),
(23, ' 基本HTML结构\r\nhtml\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=&quot;zhCN&quot;&gt;\r\n&lt;head&gt;\r\n	&lt;meta charset=&quot;utf8&quot; /&gt;\r\n	&lt;title&gt;标题&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n header标签(页眉)\r\n\r\n通常包含一些导航信息，可以有页面级的header也可以在其它的标签之下的header\r\n\r\n role属性\r\n\r\nrole属性可以增加访问性\r\n\r\n nav标签\r\n\r\nnav标', '', '', NULL),
(24, ' p标签（段落）\r\n用来添加段落\r\n\r\n small标签（细则旁注）\r\n用来包含免费声明、注解、署名等类型文本\r\n默认字体为稍小的字号\r\n\r\n stong标签（加强）\r\n标记重要要文本，显示效果为粗体\r\n\r\n em标签（强调）\r\n表示强调，显示效果为斜体\r\nem用于所有层次的强调，strong用于表示重要性\r\n另外显示效果上的，粗体可以用b标签，斜体用i标签，他们都没有语义\r\n\r\n figure标签（创建图）\r\n图可以是图表、图片、图形、视频、代码片段等\r\n使用figcaption标签为图添加标', '', '', NULL),
(25, ' img标签（图像）\r\n没有结束标签\r\n\r\nsrc属性指定图像的URL地址\r\n\r\nalt属性在图像加载未完成或者加载失败时显示文本\r\n\r\nwidth和height属性指定图像显示的尺寸，不需要带单位（单位为px），但下载速度并不会改变\r\n\r\n加快图片的加载速度：将图像尺寸变为两倍，但使用高压缩设置（就是选择低的图像质量）。这种策略可以使画质也不会太差\r\n\r\n 为网站添加图标\r\n\r\n方法一\r\n创建好图像命名为favicon.ico保存在网站的根目录下，ico文件可以在同一个文件夹包含不同尺寸的同名', '', '', NULL),
(26, ' 链接 (a标签)\r\n\r\n使用a标签创建链接, href属性指定链接地址，使用属性target=&quot;_blank&quot;使链接从新窗口打开。\r\n例子：\r\nhtml\r\n&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度首页&lt;/a&gt;\r\n', '', '', NULL),
(27, ' 样式表构成\r\n\r\n样式表由一些规则构成，每条规则由：选择器（selector）和声明块（declaration block）两部分组成, 如：\r\ncss\r\nbody&gt;ul{\r\n	padding: 0;\r\n	margin: 0;\r\n}\r\n\r\n\r\n选择器决定哪些标签将使用这些规则\r\n\r\n声明块由一些 属性值 对构成，他们就是具体的样式规则\r\n\r\n样式表文件中的注释\r\n\r\n使用 /* 开始注释, */结束注释\r\n\r\n 继承\r\n\r\n标签的包含关系构成了标签之间的继承关系，这些继承关系会影响到css样式', '', '', NULL),
(28, ' 使用样式表的三种方式\r\n\r\n1. 链接到外部样式表\r\n使用link标签：\r\nhtml\r\n&lt;link rel=&quot;stylesheet&quot; href=&quot;URL&quot; /&gt;\r\n\r\nURL是样式表的地址，可以使用绝对地址也可以使用相对地址\r\nlink标签写在head标签中，link标签没有结束标签\r\n如果多个样式表规则对同一个标签定义，按出现顺序使用最后一个样式表\r\n\r\n2. 创建嵌入样式表\r\n使用style标签将样式代码包含即可，style标签要求写在head标签中\r\n使用style标签和使用外部标签的规', '', '', NULL),
(29, ' 标签选择器\r\n\r\n直接指定标签名称进行选择\r\n\r\n 类选择器\r\n\r\n使用点&quot;.&quot;+和类名称进行选择\r\n\r\n id选择器\r\n\r\n使用井号&quot;&quot;+id名称进行选择\r\n\r\n 后代选择器\r\n\r\n使用空格选择后代标签\r\n\r\n后代选择器对于祖先的所有后代都起作用，不论是第几代\r\n\r\n 子选择器\r\n\r\n使用&quot;&gt;&quot;选择直接后代标签\r\n\r\n子选择器只对于祖先的直接后代（第一代）起作用\r\n\r\n 同胞选择器\r\n\r\n使用加号&quot;+&quot;选择有同一祖先的后一个标签（他们之间没有其他标签）\r\n\r\n 普通同胞选择器\r\n\r\n使用&quot;~', '', '', NULL),
(30, ' 设置字体系列\r\n\r\n属性：fontfamily\r\n\r\n值：fontname1, fontname2, ..., fontnamen\r\n\r\nn&gt;=1, fontname是字体名称，若浏览器无fontname1则使用fontname2，若无fontname2则使用fontname3，依次类推，若所有的都不存在使用默认字体。\r\n\r\n继承的\r\n\r\n 设置斜体\r\n\r\n属性：fontstyle\r\n\r\n值：italic(常用)、oblique、 normal(取消斜体)\r\n\r\n继承的\r\n\r\n 设置粗体\r\n\r', '', '', NULL),
(31, ' 盒模型\r\n\r\ncss处理元素时，认为每个元素在一个不可见的盒子中，这个盒子由内容区域、内边距(padding)、边框(border)、外边距(margin)组成\r\n\r\n默认情况下，css元素的 width=内容区域宽度, height同\r\n\r\n可以设置：boxsizing: borderbox; 从而使css元素的 width=内容区域宽度+内边距宽度+边框宽度, height同\r\n\r\n下面的两个盒子的各属性都相同，不同的是显示方式\r\n\r\n 默认盒子\r\n\r\n超文本标记语言，标准通用标记语言下的', '', '', NULL),
(32, ' 概述\r\n\r\n所谓响应式网站就是：可以根据用户浏览器窗口大小自动调节布局的网站。自动适应不同的终端设备。\r\n\r\n 创建可伸缩元素\r\n\r\n对元素使用 maxwidth: n\r\n\r\nn值可以是%(相对于父元素的百分比), em, px等，表示图像的最大宽度是n', '', '', NULL),
(33, '(本章跳过了)', '', '', NULL),
(34, ' 为元素创建圆角\r\n\r\n 创建四个相同的圆角：\r\n这步可选，输入：webkitborderradius: r; ，r是圆角半径。\r\n输入：borderradius: r; r和第一步值相同\r\n(将鼠标放在图形上可以查看属性，下面的都可以)\r\n\r\n 创建一个圆角：\r\n这步可选，输入：webkitborderxyradius: r; x和y为方位，可以取top、bottom、left、right\r\n输入：borderxyradius: r; r和第一步值相同\r\n重复使用上面属性即可创建多个圆角。\r\n', '', '', NULL),
(35, ' 创建列表\r\n使用ol标签创建有序列表、ul标签创建无序列表\r\n使用li标签创建列表项\r\n\r\n 选择标记\r\n使用liststyletype为列表设置左侧的标记\r\n值：disc(实心圆点) 、circle(空心圆圈)、square(方块)、decimal(数字)、upperalpha(大写字母)、loweralpha(小写字母)、upperroman(大写罗马数字)、lowerroman(小写罗马字母)\r\nnone(无标记)\r\n继承的\r\n\r\n 使用图像作为标记\r\n先对列表标签(ul、ol)使用使用', '', '', NULL),
(36, '表单的起源比js还要早，功能也已经很完善了，兼容性也很好。通过表单，网站管理员可以和用户进行交互。\r\n\r\n 创建表单\r\n\r\n使用form标签创建表单，并设置method和action属性\r\n\r\nmethod属性值post或get，post用于向服务器提交数据，get会向服务器提交并将返回的数据显示在浏览器地址栏\r\n\r\naction属性是表单提交后服务器上用于处理的脚本的url\r\n\r\n如：&lt;form method=&quot;post&quot; action=&quot;same.php&quot;&gt;...&lt;/form&gt; 这个表单使用', '', '', NULL),
(37, ' 添加视频\r\n格式：\r\n\r\n&lt;video src=&quot;videourl&quot;&gt;&lt;/video&gt;\r\n\r\n\r\nvideo属性\r\n src 指定视频文件的URL\r\n autoplay	设置视频自动播放\r\n controls	添加浏览器的默认控件\r\n muted	静音\r\n loop	循环播放\r\n poster	指定视频播放前的图像（海报），用URL指定图像文件\r\n width	视频窗口的宽度\r\n height	视频窗口的高度\r\n preload	预加载视频，值：\r\n none 不预加载\r\n metadata ', '', '', NULL),
(38, ' 创建表格\r\n\r\ntable标签：创建表格\r\n\r\ncaption标签：添加表格标题\r\n\r\ntr标签：包含表格一行元素\r\n\r\nth标签：添加表格项标题(被包含在tr中)\r\n\r\ntd标签：添加表格项(被包含在tr中)\r\n\r\n可以使用thead包含表头、tbody包含表格主体、tfoot包含表尾\r\n\r\n可以对th使用scope=&quot;col&quot;属性为一组列添加标题，使用scope=&quot;row&quot;属性为一组行添加标题\r\n\r\n 设置表格跨越多行或多列\r\n\r\n对th或td使用colspan=&quot;n&quot;跨越多列，n是列数\r', '', '', NULL),
(39, ' 加载JavaScript脚本\r\n\r\n加载JavaScript脚本的方式和css一样有三种方式：\r\n\r\n1. 加载外部脚本(推荐使用)：\r\n格式：\r\njavascript\r\n&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; \r\n\r\n加载外部脚本，其中script.js是js脚本的路径\r\n\r\n2. 添加嵌入脚本：\r\n格式：\r\njavascript\r\n&lt;script&gt;\r\n/*这里写脚本代码*/\r\n&lt;/script&gt;\r\n\r\n\r\n3. 添加内联脚本(少用)\r\njavascript\r\n&lt;', '', '', NULL),
(40, ' 验证代码\r\n\r\n验证器可以对html和css代码进行检查并显示错误。\r\n\r\n验证器：\r\n http://validator.w3.org/\r\n http://html5.validator.nu/\r\n\r\n 测试页面\r\n\r\n 对代码进行验证\r\n 检查页面的显示效果：如图像是否显示、URL链接是否正确、是否支持响应式等。\r\n 检查资源文件是否存在，对其的url引用是否正确。\r\n 在不同的浏览器中查看效果\r\n\r\n 调试技巧\r\n\r\n 使用开发者工具进行临时修改\r\n 对盒子添加边框显示，查看盒子的情况。', '', '', NULL),
(41, '\r\n 获得域名\r\n\r\n域名：指向服务器的IP地址，便于用户记忆和沟通。一个域名只能对应一个IP，而一个IP可以对应多个域名。\r\n\r\n域名注册：在域名注册商购买一个域名用来作为网站的名字。\r\n\r\n万网：域名注册、查询\n\r\n 获得主机\r\n\r\n虚拟主机：指在网络服务器上分出一定的磁盘空间，用户可以租用此部分空间，以供用户放置站点及应用组件，提供必要的数据存放和传输功能。\r\n\r\n购买万网云虚拟主机 \n购买百度云虚拟主机\n\r\n域名解析：把域名指向网站服务器空间IP，让人们通过注册的域名可以方便地访问到网站', '', '', NULL),
(42, '正则表达式(regular expression)用来匹配和处理文本的规则字符串。\r\n它主要有两个功能：匹配和替换文本。\r\n\r\nJs正则表达式在线测试：\r\nhttp://www.luoluolzb.cn/product/regexp\r\n\r\n 匹配单个字符\r\n 符号        功能   \r\n ::    :  \r\n \\      对元字符进行转义，使之匹配原字符   \r\n .      匹配任意一个字符   \r\n ]     定义字符集，匹配结果可以是方括号中的任意字符。如[az]、[AZ]、', '', '', NULL),
(43, 'PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。\r\n\r\nPHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许', '', '', NULL),
(44, ' 逻辑值\r\n\r\nPHP中假值有：NULL、0、&quot;0&quot;、空串、FALSE， 其他所有值为真\r\nNULL类型表示变量没有值， 可以使用isset($var)判断\r\n\r\n 数组\r\n\r\n索引数组：使用数字作为键\r\n关联数组：使用字符串作为键\r\n两种类型可以混合使用，元素的顺序和创建顺序相同\r\n\r\n创建方法：\r\n1. 直接创建并添加第一个元素：$arr = \'element0\';\r\n2. 直接创建并添加第一个元素：$arr0 = \'element0\';\r\n3. array()函数创建并添加元素：$arr ', '', '', NULL),
(45, ' 文件包含\r\n\r\n四种方法：\r\n\r\n 格式   说明  \r\n :   \r\n  include(filename)  报错后继续运行  \r\n  include_onece(filename)  同上，但确保文件只包含一次  \r\n require(fileanme)    报错后停止运行 \r\n require_once(filename)  同上，但确保文件只包含一次 \r\n\r\n将通用的模块单独放在一文件，以后可以多次包含。\r\n\r\n文件路径可以使用绝对路径和相对路径。\r\n\r\n 函数\r\n\r\n定义格式：\r', '', '', NULL),
(46, ' 数据库结构\r\n\r\n一个数据库由若干张表组成，表由若干列组成。\r\n表的每一行称为一个记录。\r\n\r\n 数据库元素命令\r\n\r\n命名规则：\r\n 只能包含数字、字母、下划线\r\n 不能使用数据库关键字\r\n 作用域内唯一\r\n 长度小于64位\r\n 区分小大写\r\n\r\n这些规则可以用来命令数据库名、表名、列名。\r\n\r\n 列类型\r\n\r\n数据库数据类型一般有三种：文本、数字、日期和时间\r\n\r\n 文本类型\r\n\r\n 类型  大小  描述 \r\n      \r\n CHARlength  length字节  定长字段，长度：0', '', '', NULL),
(47, '资料：http://www.runoob.com/sql/sqltutorial.html\r\n\r\nSQL命令不区分大小写，一般用大写，以区分数据库标识符\r\n\r\n 引号\r\n\r\n文本值、日期和时间值需要引号括起来。\r\n\r\n可以在引号中使用转义字符。\r\n\r\n反引号\\name\\用来安全引号可能与MySQL关键字重复的标识符。\r\n\r\n USE语句\r\n\r\n用于切换当前数据库: \r\nsql\r\nUSE database_nanme;\r\n\r\n\r\n CREATE语句\r\n创建数据库：\r\nsql\r\nCREATE DAT', '', '', NULL),
(48, ' 数据库设计流程\r\n\r\n1. 定义应用程序作用，设计原始表\r\n2. 指定主键\r\n3. 第一范式(1NF)\r\n4. 第二范式(2NF)\r\n5. 第三范式(3NF)\r\n6. 审查设计\r\n\r\n 指定主键\r\n\r\n主键满足的规则：\r\n\r\n 有值(非NULL)\r\n 不变值(永不改变)\r\n 在表中唯一(唯一性)\r\n 没有满足以上规则的列则创建一个\r\n\r\n主键使用整数可以提高数据库性能\r\n\r\n外键：表A中主键在表B中的代表\r\n\r\n 第一范式(1NF)\r\n\r\n对表的横向约束，规则：\r\n 每一列只有一个值，不满足则', '', '', NULL),
(49, ' 联结\r\n\r\n联结是将两个表或者多个表看为一个大表来使用SQL查询。\r\n\r\n分类：\r\n\r\n 内联结: 在表中存在至少一个匹配时返回记录\r\n 外联结：返回两个表都匹配的记录和不匹配的记录。有三种类型：\r\n 1. 左联结：以左表为主，返回左表的所有记录，右表中不匹配的记录返回NULL\r\n 2. 右联结：与左联结相反，以右表为主，返回右表的所有记录，左表中不匹配的记录返回NULL\r\n 3. 全联结：MySQL不支持。但可以使用左联结、右联结和UNION来实现。\r\n\r\n语法：\r\n\r\nsql\r\nSELEC', '', '', NULL),
(50, ' 错误类型\r\n\r\nHTML错误、PHP错误、SQL错误和MySQL错误\r\n\r\n基本问题：\r\n\r\nPHP和MySQL版本问题：查看PHP和MySQL版本特性\r\n\r\nweb服务器或版本问题：查看web服务器特性\r\n\r\nweb浏览器或版本问题：使用不同的web浏览器运行页面\r\n\r\n 调试HTML\r\n\r\n方法：\r\n1. 检查源代码\r\n2. 使用验证工具(validator.w3.org)\r\n3. 使用浏览器调试\r\n4. 使用Firefox插件\r\n5. 更换浏览器进行测试\r\n\r\n display_erro', '', '', NULL),
(51, ' 连接MySQL\r\n\r\n连接MySQL：\r\n\r\nphp\r\n$dbc = mysqli_connect(hostname, username, password);\r\n\r\n\r\n切换数据库：\r\n\r\nphp\r\nmysqli_select_db($dbc, db_name);\r\n\r\n或者一步完成：\r\n\r\nphp\r\n$dbc = mysqli_connect(hostname, username, password, db_name);\r\n\r\n连接错误信息：mysqli_connet_error()\r\n\r', '', '', NULL),
(52, ' 给脚本发送数据\r\n\r\n有两种方法：\r\n\r\n通过表单给脚本发生数据\r\n通过URI给脚本发生数据: \r\n\r\nhttp://example.com?name1=value1&amp;name2=value2&amp;...\r\n\r\n查询数据保存在$_GET数组中\r\n手动指定URI时，需要进行URI编码：\r\nphp\r\n$url = \'page.php\'?name\' . urlencode(string);\r\n\r\n\r\n 给查询结果分页\r\n\r\n分页效果的页面是相同的，不同的是数据。分页使用LIMIT实现，只要保证每页的LI', '', '', NULL),
(53, ' 发送电子邮件\r\n\r\n语法: \r\nphp\r\nmail(address, theme, content , header)\r\n\r\n参数解释：\r\n address: 邮件地址，多个之间用逗号隔开\r\n theme: 邮件主题\r\n content: 邮件内容\r\n header: 设置发件人(&quot;From:&quot; + name)、回复(Replyto)、抄送(Cc)、密件抄送(Bcc)、\r\n\r\nphp手册api参考\n\r\n注：此功能需要在服务器上安装邮件服务器软件。\r\n\r\n 文件上传\r\n\r\n文件上传的php.in', '', '', NULL),
(54, ' 设置cookie\r\n\r\ncookie是服务器保存在用户的计算机上少量数据，cookie通过http头部传递。\r\n\r\n设置一个cookie：\r\nphp\r\nsetcookie(name, value);\r\n\r\n\r\n注意：cookie发送必须在输出其它信息之前\r\n\r\n 设置cookie的更多信息\r\n\r\nphp\r\nsetcookie(name, value, expiration, path, host, secure, httponly);\r\n\r\n\r\n参数解释：\r\n\r\n expiration: 设置', '', '', NULL),
(55, ' 使用类型验证数据\r\n\r\nPHP对于每一种类型都有特定的类型验证函数：\r\nis_bool(), is_array(), is_numeric(), isfloat(), is_int(), is_null(), is_resource(), is_scalar(), is_string(), is_nan()\r\n\r\n强制类型转换：$var = (type)$var\r\n\r\n 验证上传文件类型\r\n\r\n方法：\r\n\r\nphp\r\n$fileinfo = finfo_open(FILEINFO_MIME_T', '', '', NULL),
(56, ' 基本概念\r\n\r\n正则表达式匹配串(模式)必须用分隔符作为开头和结尾，比如一个正斜杠(/)。\r\n\r\n分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。\r\n\r\nPHP中的模式串最好使用单引号，以防止被PHP转义\r\n\r\nPCRE函数库实现了与 perl5 在语法和语义上略有差异的正则表达式模式匹配功能\r\n\r\n正则表达式不适合用于经常性的匹配，因为它的效率不够高。\r\n\r\n 元字符\r\n\r\n元字符是被赋予了特殊含义的字符，有两种不同的元字符：一种是可以在模式中方括号外任何地', '', '', NULL),
(57, ' 介绍\r\njQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。\r\n\r\njQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活', '', '', NULL),
(58, ' 基础概念\r\n\r\n类：一种数据模板，可构造数据对象\r\n\r\n属性：类中的变量称为该类的属性\r\n\r\n方法：类中的函数称为该类的方法\r\n\r\n 复杂概念\r\n\r\n继承、访问控制、方法重载、作用域、抽象\r\n\r\n 面对过程与面向对象\r\n\r\n面向过程：更快的学习和使用，特别是小项目，缺点是代码难以维护和扩展\r\n\r\n面向对象：更容易维护，缺点是更难掌握，出错时不容易解决\r\n\r\n两种编程风格各有优缺点，我们要同时利用这两种风格的优势，而不是对其中一种有偏见不去用它。\r\n\r\n 实例化对象\r\n\r\n使用new关键字并调用', '', '', NULL),
(59, ' 分页效果\r\n\r\n使用SQL的LIMIT子语可以实现', '', '', NULL),
(60, ' 模块\r\n\r\n将网站中常用的模块单独做成一个文件，之后在需要的页面用使用文件包含即可多次复用。\r\n\r\n常见的模块有：数据库配置文件、网站配置文件、顶部管理块、底部信息块、导航菜单块\r\n\r\n 数据库配置文件\r\n\r\n数据库配置模块文件中存放连接数据库所需的信息和连接后的句柄。\r\n\r\nphp\r\ndefine(\'DB_HOST\', \'localhost\');     //数据库主机\r\ndefine(\'DB_USER\', \'root\');          //数据用户名\r\ndefine(\'DB_PASS', '', '', NULL),
(61, '略', '', '', NULL),
(62, '目前很多框架和系统基本都加入了Hook功能，如：tp，levavel，wordpres等 。因此也在我的PHP框架加入了Hook模块。\r\n\r\nPHP\n\r\n 什么是Hook\r\n百度百科中的解释：\r\n&gt; Hook是Windows中提供的一种用以替换DOS下“中断”的系统机制，中文译为“挂钩”或“钩子”。在对特定的系统事件进行hook后，一旦发生已hook事件，对该事件进行hook的程序就会收到系统的通知，这时程序就能在第一时间对该事件做出响应。\r\n\r\n虽然这段话说的是windows编程下的，但在PH', 'PHP', 'https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=187afb979e82d158af8f51e3e16372bd/2f738bd4b31c870168f8cf9f257f9e2f0708ff79.jpg', 'PHP'),
(63, 'window下的phpstudy软件集成了php开发所需要的所有环境，对于php开发者来说，十分的方便。\r\n但是默认情况下我们是使用localhost访问我们的设计的网站，那么怎么在本机上配置一个域名，方便我们访问呢。\r\napache\n\r\n其实很简单，这里假设要配置的域名为test.com，分三个步骤：\r\n（注意：这里是Apache服务器的配置方法）\r\n\r\n 修改系统hosts配置文件\r\n文件位置： C:\\Windows\\System32\\drivers\\etc\\hosts\r\n文件内容：\r\n\r\n', 'apache', 'https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=eccc4646793e6709be0042f903c69fb8/d1160924ab18972b9f4dbaabe0cd7b899e510a5f.jpg', 'apache'),
(65, 'wxPython\n\r\n最近开始学Python，学到了GUI部分，于是重拾了在C++学过一部分的wxWidgets，wxPython对wxWidgets进行了封装，提供了Python版本的接口。\r\n\r\n这里就不介绍wxPython了，分享一些学习资料给大家。\r\n\r\n 相关网站\r\n\r\n官方网站：https://wxpython.org/\r\n\r\n官方文档：https://docs.wxpython.org/index.html \r\n\r\n英文教程： http://zetcode.com/wxpython', 'wxPython', 'https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=b8ba7e2ae1f81a4c323fe49bb6430b3c/4034970a304e251f214328a6ad86c9177f3e533c.jpg', 'wxPython'),
(67, '返回顶部的功能相信很多人都不陌生，那么是到底它的原理是什么呢？是怎么实现的呢？\r\n答案就在下面的代码中：\r\n\r\n jquerybacktop.js\r\njavascript\r\n/**\r\n * jQuery插件：返回顶部\r\n * @author luoluolzb\r\n * @time   2018/5/26\r\n */\r\n(function(){\r\n    var jq = jQuery.noConflict();\r\n    var distance = window.screen.availHeig', 'jQuery', 'https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=c9ae9db23101213fdb3e468e358e5db4/9f510fb30f2442a79d8d54ced943ad4bd01302dd.jpg', 'jQuery'),
(68, '今天给大家分享一个实用的jQuery插件。\r\n这个插件可以将footer自动固定在页面底部，这在我们的页面不足一屏时非常有用。\r\n\r\n jqueryfixfooter.js\r\njavascript\r\n/**\r\n * jQuery插件：使footer自动固定在底部(页面不足全屏时)\r\n * @author luoluolzb\r\n * @time   2018/5/26\r\n */\r\n(function(){\r\n    //给head添加一个style(固定样式)\r\n    $(document.he', 'jQuery', 'https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=c9ae9db23101213fdb3e468e358e5db4/9f510fb30f2442a79d8d54ced943ad4bd01302dd.jpg', 'jQuery'),
(69, '因为个人原因，Java语法自己学了好几次，但每次由于各种原因，之后没有经常使用Java，语法又忘掉了，所以这次在这里总结一下Java知识点，以便以后进行复习。\r\n\r\nJava\n\r\n Java环境搭建\r\n 所需安装包\r\n开发JAVA所需要的安装包有：JDK、JRE、Eclipse\r\nJDK： 全称是 Java Devolpment Kit，即Java开发套件，包含了JRE和Java工具。\r\nJRE： 全称是 Java Runtime Environment，即Java运行环境，包含JVM（Java', 'Java', 'https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=f5c6e8806959252da3171a020c9a032c/0df431adcbef76096709930527dda3cc7cd99e2d.jpg', 'Java'),
(70, ' Java 修饰符\r\n\r\n 访问控制修饰符\r\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\r\n\r\n1. default (默认值）\r\n在同一包内可见，不使用任何修饰符。使用对象有：类、接口、变量、方法。\r\n2. private\r\n在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\r\n3. public\r\n对所有类可见。使用对象：类、接口、变量、方法\r\n4. protected \r\n对同一包内的类和所有子类可见。使用对', 'Java', 'https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=f5c6e8806959252da3171a020c9a032c/0df431adcbef76096709930527dda3cc7cd99e2d.jpg', 'Java'),
(71, ' 什么是单例模式\r\n有时我们只需要某个类只有一个对象，不希望有更多对象。比如数据连接对象只需要一个，\r\n这种设计方法叫单例模式。\r\n\r\n 单例模式特点\r\n1. 单例类只有一个实例。\r\n2. 单例类必须自己创建唯一实例。\r\n3. 单例类必须能对外提供这个实例。\r\n\r\n 单例模式与静态类\r\n了解了单例模式后，你一定会想到静态类。它和静态类很像，为何不干脆使用静态类？\r\n实际上，它们是有一些区别的：\r\n1. 单例类可以继承和被继承，方法可以被重载，而静态方法不可以。\r\n2. 静态方法中产生的对象会在执', '', '', NULL),
(72, ' 泛型\r\nJava泛型类似C++里面的模板，表示的是一种通用类型，这种技术可以减少因为类型导致的代码重复。\r\nJava系统类库中的有些容器类也是使用泛型进行定义的，如List、Map。\r\n\r\n 泛型方法\r\n对方法可以使用泛型返回值和泛型参数，泛型方法的调用同普通方法，系统会根据传入参数自动填入泛型参数。\r\n\r\n泛型参数格式: &lt;T1, T2, ...&gt;，位置放在方法的返回值之前。\r\n\r\n\r\n例子：\r\njava\r\npublic class Test {\r\n	//泛型方法printArray\r\n	p', '异常类关系图', 'http://incdn1.b0.upaiyun.com/2017/09/994bd262fec543853cd99fe680e857cc.png', '异常类关系图'),
(73, '\r\n 什么是线程\r\n线程(Thread)相对于进程(Process)更轻，有时被称为轻量进程(Lightweight Process，LWP），是程序执行流的最小单元。线程切换起来更快速，因此现在使用进程作为资源分配的基本单位，将线程作为CPU调度的基本单位。\r\n\r\n线程实体 = 程序(Code) + 数据(Data) + 线程控制块(TCB)\r\n\r\n线程在的生命周期中有几个状态：创建、就绪、运行、阻塞、终止。\r\n\r\n 创建线程\r\n在单个程序中同时运行多个线程完成不同的工作，称为多线程。在Jav', '', '', NULL),
(74, ' 安装\r\n下载 vue.js 或者 vue.min.js 文件，在需要的html文档中使用。下面是 vue.js 的hello world例子。\r\n\r\nhtml\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n	&lt;meta charset=&quot;utf8&quot; /&gt;\r\n	&lt;title&gt;vue.js Hello World&lt;/title&gt;\r\n	&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n	&lt;div id=&quot;app&quot;&gt;\r\n		', 'VueJs', 'https://cn.vuejs.org/images/logo.png', 'VueJs'),
(76, '点进来的同学一定都用过jQuery，它提供了很多实用、简单、便捷的方法。jQuery虽然好用，但有时候需要定制自己所需要的功能时候，应该去怎么扩展jQuery呢，今天作者就带大家一起总结一下jQuery插件编写方法。\r\n\r\n扩展jQuery有两种不同的方式：\r\n1. 扩展jQuery对象的方法，使用 $.fn.extend\r\n2. 扩展jQuery本身的方法，使用 $.extend\r\n\r\njQuery Pugin\n\r\n 扩展jQuery对象的方法\r\njQuery对象的方法就是使用选择器选中元素后', 'jQuery Pugin', 'https://jquery-plugins.net/image/jquery-plugins-logo.svg', 'jQuery Pugin'),
(77, '有时候我们需要阻止表单，比如用户输入的信息没有验证通过时。\r\njQuery阻止表单有两个方法：\r\n\r\n 监听form的submit事件\r\n用jQuery监听表单元素的submit事件，在事件处理函数中返回false即可。\r\n例子：\r\nhtml\r\n	&lt;form&gt;\r\n		&lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;\r\n		&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;\r\n		&lt;button&gt;submit&lt;/button&gt;\r\n	&lt;/form&gt;\r', '', '', NULL),
(79, '学习Linux的前提是你需要一个Linux系统，那么怎么获取一个Linux系统呢？有几个方法：\r\n1. 在你的电脑上直接安装Linux系统\r\n2. 在云服务器提供商处购买Linux服务器\r\n3. 在现有的系统（如Windows）上安装Linux虚拟机\r\n\r\n今天我们就来学习一下怎么在Windows上安装Linux虚拟机，这里我们使用VirtualBox软件，当然VMware也可以安装Linux虚拟机，操作是类似的。\r\n\r\n我们分为几步进行：\r\n1. 准备VirtualBox安装包和Linux系统', 'VirtualBox首页', '/uploads/artimgs/79/825f9ee60c95391b754f768434cc0aba.jpg', 'VirtualBox首页'),
(85, '昨晚将网站迁移到了新服务器上，使用了最新的PHP7.2，安装好后发现登陆页面的验证码无法显示。开始时怀疑是GD库没有安装好，所以重新安装了PHP，但是重新安装了后还是没有解决。折腾了一晚上还是没找到问题。\r\n\r\n今天终于找到了问题所在，原因是在使用Xftp上传了代码后，我直接使用了xftp的“记事本编辑”服务器上面的配置文件，而记事本默认保存utf8文件带有BOM头，所以在加载文件的时候，将BOM头输出了，导致图片不能正常显示。\r\n\r\n重新上传了一下代码，问题解决了。\r\n\r\n我在之前的一个项目中', '', '', NULL),
(86, '由于VirtualBox自带的Linux虚拟机的界面不够友好，字符界面无法上下移动，字体也不好看，也不能复制粘贴内容等。因此我尝试找到使用xshell连接虚拟机的办法，这里记录一下。\r\n\r\n 免费使用xshell和xftp\r\n先来说说怎么免费使用xshell和xftp，之前不知道方法，导致每次使用一段时间后就不能用了。\r\n\r\n要免费使用xshell和xftp我们需要选择免费授权，先打开官网授权网页：https://www.netsarang.com/zh/xshelldownload/\n\r\n填好', '打开端口转发', '/uploads/artimgs/86/433381174303277440bad494fae71b14.jpg', '打开端口转发'),
(87, 'nginx\n作为一个PHPer，不能只会使用集成开发环境，比如windows下的phpstudy、wxampp，Linux下的LNMP、LAMP、OneinStack等。还得具备单独安装每个软件的能力，今天来学习一下怎么在Linux安装Nginx。安装步骤：\r\n1. 安装编译工具及库文件\r\n2. 安装 Nginx\r\n3. Nginx 测试\r\n\r\n 安装编译工具及库文件\r\n安装Nginx需要一些工具和库，可以使用yum安装：\r\nshell\r\nyum y install make zlib zlib', 'nginx', 'https://www.runoob.com/wp-content/uploads/2015/01/nginx.jpg', 'nginx'),
(88, ' Nginx 进程模型\r\nNginx进程分为两种：主进程（master process）和工人进程（worker process）。\r\n\r\nmaster进程只有一个，负责是读取解析配置和管理worker进程。worker进程一般有多个，它负责处理http请求，一个worker进程可以同时处理多个http请求。\r\n\r\nworker进程数量 和 一个worker进程能保持处理的http连接数量可以在配置文件里面设置。将worker进程数量设置为可用的cpu核数将是一个好办法。\r\n\r\nNginx 进程', 'Nginx 进程模型图', '/uploads/artimgs/88/40eaa1142158316877cfb1bd5cb4d066.png', 'Nginx 进程模型图'),
(89, '要学习Nginx，了解配置文件是必须的。\r\n\r\n 配置文件结构\r\nNginx配置文件由指令组成。指令分为简单指令和块指令。简单的指令由名称和参数组成，以空格分隔，以分号结尾(;)。块指令具有与简单指令相同的结构，但它以一组由大括号包围的附加指令结束，而不是分号({和})。如果块指令可以在大括号中包含其他指令，则称为上下文(例如：events, http, server，location等)。\r\n\r\n配置文件中放置在任何上下文之外的指令称为主上下文。表示单行注释。配置结构示意如下：\r\n\r\n\r\n 全', '', '', NULL),
(90, 'nginx和php都安装好了，那么怎么让nginx处理请求时转给php去处理呢，今天来学学如何nginx配置php。\r\n\r\n 配置 PHP\r\n\r\n\r\n     配置PHP\r\n    location ~ \\.php/?.*$ {\r\n         设置phpcgi\r\n        fastcgi_pass 127.0.0.1:9000;\r\n         Linux用下行代替上行可以提升性能\r\n         fastcgi_pass  unix:/tmp/phpcgi.sock;\r\n ', '', '', NULL),
(91, 'phplogo\n\r\nLinux系统下安装php是通过源码编译安装的，今天就来学习一下。\r\n\r\n 下载 PHP 源码并解压\r\n进入官网：https://www.php.net/downloads.php\n\r\n 下载源码\r\nshell\r\ncd /usr/local/src\r\n\r\nwget https://www.php.net/distributions/php7.2.19.tar.gz\r\n\r\n\r\n 解压源码：\r\nshell\r\ntar zxvf php7.2.19.tar.gz\r\n\r\n\r\n 配置编译', 'php-logo', '/uploads/artimgs/91/50e9cecc453db4c1c6b369bef04dc52f.png', 'php-logo'),
(92, '安装php时执行 ./configure help 的文档翻译，了解一下有助于更好的安装PHP。\r\n\r\n下面是 php7.3.6 的编译选项的翻译，在编译PHP时候可以参考一下：\r\n\r\n\r\nconfigure\' 这个包配置适应多种系统。\r\n\r\n用法: ./configure 选项]... [VAR=VALUE...\r\n\r\n指定环境变量 (例如, CC, CFLAGS...), 他们指定为 VAR=VALUE.  见下文描述的一些有用的变量。\r\n\r\n在括号中指定选项的默认值。\r\n\r\n配置:\r\n  ', '', '', NULL),
(94, ' 设置开机启动\r\n打开：\r\nshell\r\nvim /etc/systemd/system/phpfpm.service\r\n\r\n\r\n写入下面内容：\r\n\r\nUnit\r\nDescription=The PHP FastCGI Process Manager\r\nAfter=syslog.target network.target\r\n\r\nService\r\nType=simple\r\nPIDFile=/run/phpfpm.pid\r\nExecStart=/usr/local/php/sbin/phpfpm n', '', '', NULL),
(95, ' 配置 Nginx 开机启动\r\n编辑文件：\r\nshell\r\nvim /etc/systemd/system/nginx.service\r\n\r\n\r\n文件内容：\r\n\r\nUnit\r\nDescription=Nginx  high performance web server\r\nAfter=network.target \r\n   \r\nService \r\nType=forking \r\nExecStart=/usr/local/nginx/sbin/nginx\r\nExecReload=/usr/local/', '', '', NULL),
(96, '开启 opcache能有效的提升PHP执行速度，建议在生产环境中开启。\r\n 开启 opcache的方法\r\n 修改 php.ini\r\n在 php.ini 找到 opcache 段，修改下面的几行，去掉前面的注释符;\r\n\r\nopcache\r\n\r\n; opcache 开关\r\nopcache.enable=1\r\n\r\n; phpcli 模式 opcache 开关\r\nopcache.enable_cli=0\r\n\r\n; opcache 共享内存大小，单位为M\r\nopcache.memory_consumpti', '', '', NULL),
(97, '&gt; 因为一般来说，软件的漏洞都与版本有关，隐藏版本号是为了防止恶意用户利用软件漏洞进行攻击。\r\n\r\n 隐藏 Nginx 版本号\r\n修改 Nginx 配置文件 nginx.conf，找到http块，在里面添加一行：\r\n\r\nserver_tokens off;\r\n\r\n\r\n重启 Nginx 后生效。\r\n\r\n这里只是隐藏了Nginx 版本号，还可以更进一步，隐藏 Nginx 服务器标志。具体做法可以查看文章末尾的参考文章。\r\n\r\n 隐藏 PHP 版本号\r\n修改 PHP 配置文件 php.ini，找到：\r', '', '', NULL),
(99, '学习PHP时遇到一些慨念，开始的时候有些分不清，这几天又好好查了一下资料，这里总结一下。\r\n\r\n CLI\r\nCLI 为 Command Line Interface 的缩写，即命令行接口。CLI是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）。\r\n\r\n比如你在windows下使用的cmd，在Linux下使用的shell，就是操作系统提供的CLI。\r\n\r\n CGI\r\nCGI 为 Common', 'CGI运行模式.', '/uploads/artimgs/99/7561a7df2bfacee65b6575b99006b2fd.jpg', 'CGI运行模式.'),
(102, 'MySQL是PHP中开发比不可少的，学习Linux下安装MySQL也是必须的，今天在这里总结一下。注意这里是5.5版本的，5.6及以上安装有一些区别。\r\n\r\n 下载MySQL安装包\r\n打开官网：https://dev.mysql.com/downloads/mysql/\n\r\nmysql5.5下载\n\r\n点击“Download”，进入下载页，点击“No thanks, just start my download.”下载，然后复制下载链接，使用wget下载：\r\nshell\r\ncd /usr/loca', 'mysql5.5下载', '/uploads/artimgs/102/5f8014fb765fdf60d0e2d6488b239b30.jpg', 'mysql5.5下载'),
(103, '在Linux下，Nginx使用sock文件连接PHPFPM比普通转发方式（转发到9000端口）要更快、更高效，这里记录一下配置方法。\r\n\r\n 修改PHPFPM配置文件\r\n打开PHPFPM配置文件，一般是 /usr/local/php/etc/phpfpm.conf 或者 /usr/local/php/etc/phpfpm.d/www.conf，如果不知道文件位置可以使用下面的命令：\r\nshell\r\nps aux  grep phpfpm\r\n\r\n\r\n文件位置如下：\r\n查看phpfpm配置文件位置\n', '查看php-fpm配置文件位置', '/uploads/artimgs/103/d569d48ba638a90577f0b33c2591f7be.png', '查看php-fpm配置文件位置'),
(104, 'rewrite指令在Nginx配置文件里面是用于重写的，有点像PHP框架里面的路由配置。\r\n\r\n下面内容从官方文档翻译：\r\n\r\n&gt; \r\n语法  :	rewrite regex replacement flag;\r\n默认值:	无\r\n所处环境:	server, location, if\r\n\r\n如果指定的正则表达式（regex）与请求URI匹配，则URI将更改为替换字符串（replacement）中指定的URI。rewrite重写指令是按照它们在配置文件中的出现顺序执行的。可以使用标志终止对指令的进一', '', '', NULL),
(105, '什么是代理？\r\n&gt; 代理（英语：Proxy），也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。 \r\n\r\n 正向代理和反向代理的概念\r\n\r\n盗了两张图，第二张比较形象：\r\n\r\n正向代理和反向代理\n\r\n正向代理和反向代理\n\r\n 正向代理\r\n你（client）需要访问某台服务器（server），但是你没有访问渠道，只能通', '正向代理和反向代理', '/uploads/artimgs/105/42b2f9372ed0e17bb4c72784084ce1b6.jpg', '正向代理和反向代理'),
(106, ' 什么是负载均衡\r\n&gt; 负载均衡是高可用网络基础架构的的一个关键组成部分，有了负载均衡，我们通常可以将我们的应用服务器部署多台，然后通过负载均衡将用户的请求分发到不同的服务器用来提高网站、应用、数据库或其他服务的性能以及可靠性。\r\n\r\n简单来说就是将客户的请求均衡的分配给多台服务器处理。\r\n\r\n\r\n Nginx负载均衡相关指令\r\nNginx实现负载均衡需要了解两个指令：upstream 和 proxy_pass 。\r\n\r\n upstream指令\r\n指令语法：\r\n&gt;Syntax:	upstream', '', '', NULL),
(107, ' HTTPS介绍\r\nHTTPS（HyperText Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。可以理解为 HTTPS = HTTP + SSL/TLS，即在HTTP协议基础上加入了加密层，保障了数据传输的安全。\r\n\r\n这里只要简单了解，更详细的内容可以查看文章末尾的第一篇参考文章。\r\n\r\n 如何让你的网站支持HTTPS\r\n要支持HTTPS你需要做两件事，获得一个SSL证书，然后在你的web服务器', '', '', NULL),
(109, '今天开始学习NoSQL——Memcached。工欲善其事必先利其器，首先需要学会如何安装。这里总结一下步骤。\r\n\r\n Memcached介绍\r\n官网介绍：\r\n&gt;What is Memcached?\r\nFree &amp; open source, highperformance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web appl', '', '', NULL),
(110, 'Windows上PHP集成的软件开发环境如wampp、phpstudy，对于一般的扩展都有，memcache扩展需要自己安装，这里总结一下。\r\n\r\n\r\n windows下如何安装扩展？\r\nwindows安装扩展是比较容易的，不需要自己去编译，一般的步骤为：\r\n1. 下载你要安装的php扩展库的dll文件，并放在php安装目录下的ext目录\r\n2. 修改php.ini配置文件，加上 extension=xxx.dll\r\n\r\n然后你可以在phpinfo()或者使用php m查看是否已经加载。\r\n\r\n', '', '', NULL),
(111, '我们在使用memcached的增删改查的时候，应该知道里面有一个flags参数，可能有很多人不知道这个参数和作用。\r\n\r\n我们知道memcached是保存的是keyvalue，而flags仅仅用来给你存的这个数据打一个标签（整数）。memcached本身并不会对它进行任何处理的。\r\n\r\n由于memcached的数据类型比较单一，只能保存字符串，像对象、数组都是需要序列化之后才能保存的（序列化和还原工作由各个语言的提供的接口完成）。而序列号之后，都是字符串了，并不能知道实际上保存的是是什么，这个时', '', '', NULL),
(112, '原文：什么是phpize及其用法  weixin_38674371的博客  CSDN博客\n\r\n应用场景：\r\n在使用php的过程中，我们常常需要去添加一些PHP扩展库。但是重新对php进行编译是比较蛮烦的，所以这时候我们可以使用phpize对php进行添加扩展。并且phpize编译的扩展库可以随时启用或停用，比较灵活。\r\n\r\n使用方法：\r\nextention为要挂载的扩展包\r\n\r\nwget extension_name.tar.gz 下载相应的扩展包并解压。\r\n\r\ncd extension_nam', '', '', NULL),
(113, '在PHP中，memcache扩展和memcached扩展是两个不同的扩展，注意区分一下：php的memcache和memcached扩展区别\n\r\n 使用pecl安装\r\n\r\n安装 libmemcached：\r\nshell\r\nyum y install libmemcacheddevel\r\n\r\n\r\npecl编译安装：\r\nshell\r\npecl install memcached\r\n\r\n\r\n修改 php.ini 文件，添加：\r\n\r\nmemcached\r\nextension=memcached.so\r\n', '', '', NULL),
(114, ' 安装步骤\r\n去Redis官网：Redis官网下载页\n\r\n下载源码：\r\nshell\r\ncd /usr/local/src\r\nwget http://download.redis.io/releases/redis5.0.5.tar.gz\r\n\r\n\r\n解压源码：\r\nshell\r\ntar zxvf redis5.0.5.tar.gz\r\n\r\n\r\n编译并安装：\r\nshell\r\ncd redis5.0.5\r\nmake &amp;&amp; make PREFIX=/usr/local/redis install\r\n\r\nPR', '启动 redis-server', '/uploads/artimgs/114/af6b6bbcd8124bdd3e30b4efc8827670.png', '启动 redis-server'),
(116, 'Windows下安装Redis主要是为了在本地进行测试，项目实际部署一般还是Linux系统。\r\n\r\nRedis官方不支持Windows。但是，微软开发并维护了针对Windows的版本。\r\n\r\n 下载\r\n\r\n微软的Redis：Releases · microsoftarchive/redis\n\r\n打开页面后选择你需要的版本，然后点击“Assets”:\r\n\r\nRedis下载\n\r\n选择第一个或者第二个文件下载都可以，建议第一个。\r\n\r\n下载好之后执行即可安装，配置选项根据需要修改，如果不知道也可以全部', 'Redis下载', '/uploads/artimgs/116/54de770c2b17632eeb381f86efac81a3.png', 'Redis下载'),
(117, ' 安装步骤\r\n去PECL载dll文件：PECL :: Package :: redis\n\r\n下载好之后将压缩包里面的php_redis.dll放到php安装目录下的ext目录。\r\n\r\n修改php.ini文件，加上：\r\n\r\nRedis\r\nextension=php_redis.dll\r\n\r\n\r\n需要重启 phpfpm/phpcgi。\r\n\r\n 查看redis扩展\r\n\r\n然后可以在php m和phpinfo()里面查看是否加载了redis扩展。\r\n\r\ncmd下执行php m：\r\n\r\nphpm redi', 'php-m redis', '/uploads/artimgs/117/a9c7170d18c9c3a737d8295fb103a2ee.png', 'php-m redis'),
(118, '未完待续。。\r\n', '', '', ''),
(120, 'Linux下安装MongoDB相对于Redis、Memcached要简单很多，因为它不需要我们自己去编译，我们只需要下载软件包解压就可以了。\r\n\r\n 下载软件包\r\nMongoDB官网：https://www.mongodb.com\r\nMongoDB文档：https://docs.mongodb.com/manual\r\n软件包下载页面：https://www.mongodb.com/downloadcenter/community\r\n\r\n根据自己的操作系统选择合适的版本：\r\n\r\nMongoDB下载', 'MongoDB下载', '/uploads/artimgs/120/390343b1e2dd576195e970a607ef6bfc.png', 'MongoDB下载'),
(121, '原文：NoSQL之【MongoDB】学习（三）：配置文件说明\n\r\n启动MongoDB有2种方式，一是直接指定配置参数，二是指定配置文件。这里先介绍配置文件，启动方式如下：\r\nshell\r\nmongod config /etc/mongodb.conf\r\n\r\n配置如下：\r\n\r\n**verbose**：日志信息冗余。默认false。提高内部报告标准输出或记录到logpath配置的日志文件中。要启用verbose或启用verbosity 用vvvv参数，如：\r\n\r\nverbose = true\r\nvv', '', '', ''),
(122, 'Git Cheat sheets是一个git常用命令备忘表。\r\n原文地址：https://github.github.com/trainingkit/downloads/zh_CN/githubgitcheatsheet/\r\n\r\n\r\n 安装Git\r\nGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。\r\n\r\n GitHub Desktop\r\nhttps://desktop.github.com/\r\n\r\nGitHu', '', '', ''),
(123, '以前只知道索引可以加快查询速度，而具体为什么会加速快速，对于多列索引也不清楚，也没有用过多列索引，今天了解了一下。\r\n\r\n 多列索引\r\n\r\n多列索引是指定多个列组合为一个索引，MySQL将会将多个列的值组合计算后构建索引表。使用多列索引要比使用多个单列索引要快得多。\r\n\r\n为什么这么说呢？因为当一个SQL语句中出现多个索引字段时候，它并不能每个索引都能得上，实际上它也**只能使用其中一个单列索引去查找**（MySQL会选择最精确的那个索引），为什么？我们可以把索引类比成一本书的目录，都是用来快速', 'B+树', '/uploads/artimgs/123/cdddf4c2dd471aa919ca26ca1d18f505.jpg', 'B+树'),
(124, ' 定长与变长分离\r\n所谓定长与变长分离是指：将表中固定长度的字段和可变长度的字段分开，将他们放在不同的表中。\r\n\r\n固定长度类型：整型、浮点型、时间和日期型、enum、set、文本中char型\r\n可变长度类型：除char外的文本型、blob\r\n\r\n为什么要这么做呢？如果一个表中的字段都是固定长度的字段，那么每行记录的长度都是固定的(fixed)，这样如果想找到第N行的数据位置，直接使用N*RowSize即可，访问速度很快。\r\n\r\n所以建议将核心字段设置为固定长度， 而变长字段，适合单放一张表, ', '', '', ''),
(125, '索引对于加快查询是非常重要的，合理使用索引能够显著提高查询速度。\r\n\r\n MySQL中索引的实现\r\nMySQL中索引的实现技术分两种：BTree索引和Hash索引。\r\n\r\n BTree索引\r\nBTree索引使用B+树实现。B+树一种多路查找树（如下图），是通过二叉查找树，再由平衡二叉树，B树（又名B树）演化而来的，B+树中的B不是代表二叉（binary），而是代表平衡（balance），因为B+树是从最早的平衡二叉树演化而来，但是B+树不是一个二叉树，是多叉树。\r\n\r\nB+树\n\r\n Hash索引', 'B+树', '/uploads/artimgs/123/cdddf4c2dd471aa919ca26ca1d18f505.jpg', 'B+树'),
(126, '在MySQL优化中，最常做的事情就是SQL语句优化，因为这个才是影响性能的最主要因素。\r\n\r\n explain语句\r\n对SQL语句进行优化少不了使用explain分析SQL语句。下面先来说说怎么使用explain语句。\r\n\r\n explain语法\r\nexplain语法比较简单，只需要在你要分析的SQL语句前面加上explain即可，如：\r\nsql\r\nexplain select id,name from tb_user；\r\n\r\n\r\nexplain语句输出的每一行为对一个语句的分析，来看看每行有哪', 'select_type', '/uploads/artimgs/126/7ba8f0dd33fd291ec18e2ec188271276.png', 'select_type'),
(127, ' PDO介绍\r\nPDO是 PHP Data Oject 的缩写，即PHP数据对象。提供了访问各种数据库的一致接口，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。\r\n\r\nPDO还提供了预处理功能来防止SQL注入，另外也可以使用事务功能。\r\n\r\n\r\n 安装PDO扩展\r\nPHP在安装的时候，已经默认安装了PDO扩展，但要使用PDO操作具体的数据库，需要安装相应的数据库驱动扩展pdodbname。安装扩展的方法这里不做说明。\r\n\r\n要查看PDO支持哪些数据库驱动，点击这里：PHP: P', '', '', ''),
(128, '之前在Windows下使用PHP开发时都是使用的集成环境比如phpstudy、wxampp，但是身为一个PHPer怎么能不会自己搭建PHP环境呢。如果不会的话，那么就一起来学习下。\r\n\r\n 安装 Nginx\r\n\r\n 下载 Nginx 软件包\r\n下载地址：http://nginx.org/en/download.html\r\n\r\n自己选一个版本，目前最新稳定版为1.16，我下载这个。注意选择windows版本的（nginx/Windows1.16.0）。\r\n\r\nnginx下载\n\r\n我们下载的是一个免', 'nginx下载', '/uploads/artimgs/128/703d67a15f312d5108c902dace97b76b.png', 'nginx下载'),
(129, '刚接触JavaScript面向对象的同学，对于原型链和继承一定一头雾水。我接触js也有不少时间了，但这些问题到今天才弄清楚，不会的同学随我一起来学习吧。\r\n\r\n 实例化对象\r\n我们知道**js中没有“类”，只有对象**。没有类那么怎样创建一个对象呢？有两种方法，一种直接通过{}创建，一种是通过构造函数创建。\r\n\r\n 通过{}创建对象\r\n使用{}创建一个对象十分直观，就像这样：\r\njavascript\r\nvar zhangsan = {\r\n    name: \'zhangsan\',\r\n    he', 'Javascript原型链', '/uploads/artimgs/129/7f3311195e8ad4c5e8224ffb4eef40e7.jpg', 'Javascript原型链'),
(130, 'composer中可以配置四种自动加载规则，你可能会熟知其中的一两种，但可能不知道有四种吧？不知道的一起来随我学习吧。\r\n\r\n psr4 自动加载\r\npsr4是目前最新的、最受欢迎的、广泛在各种composer包、PHP框架中使用的自动加载方式。\r\n\r\n我这里不说明psr4的加载规则了，因为官方文档比我说明的更规范、更清楚，如果不知道psr4可以查看文章末尾的参考文章。\r\n\r\n这里只说明怎么在composer.json中配置psr4自动加载规则：\r\n\r\njson\r\n{\r\n    &quot;autoloa', '', '', '');

-- --------------------------------------------------------

--
-- 表的结构 `lb_category`
--

CREATE TABLE `lb_category` (
  `id` int(11) UNSIGNED NOT NULL COMMENT '分类ID',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '分类名称',
  `is_show` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否前台显示此分类',
  `show_order` int(11) UNSIGNED NOT NULL COMMENT '分类的显示排序值',
  `create_time` int(10) UNSIGNED NOT NULL COMMENT '分类创建时间',
  `update_time` int(11) UNSIGNED NOT NULL COMMENT '分类最后修改时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `lb_category`
--

INSERT INTO `lb_category` (`id`, `name`, `is_show`, `show_order`, `create_time`, `update_time`) VALUES
(0, '草稿箱', b'0', 0, 0, 0),
(1000, 'PHP', b'1', 2, 1519569173, 0),
(1018, '《HTML5与CSS3基础教程》笔记', b'1', 13, 1519895815, 0),
(1019, '《PHP与MySQL动态网站开发》笔记', b'1', 14, 1519903608, 0),
(1023, 'Python', b'1', 9, 1524239587, 0),
(1030, 'HTML/CSS/JS', b'1', 12, 1527328556, 0),
(1031, 'Java', b'1', 3, 1532764532, 0),
(1032, 'Linux', b'1', 5, 1559212740, 0),
(1034, 'Nginx', b'1', 6, 1559212772, 0),
(1035, 'MySQL', b'1', 7, 1560423108, 0),
(1036, 'NoSQL', b'1', 8, 1560774726, 0),
(1037, '开发工具', b'1', 11, 1562384774, 0);

-- --------------------------------------------------------

--
-- 表的结构 `lb_image`
--

CREATE TABLE `lb_image` (
  `id` int(11) UNSIGNED NOT NULL COMMENT '图片ID',
  `file_name` varchar(255) NOT NULL DEFAULT '' COMMENT '图片文件名',
  `article_id` int(11) UNSIGNED NOT NULL COMMENT '图片所在的文章ID',
  `up_time` int(10) UNSIGNED NOT NULL COMMENT '图片上传时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `lb_image`
--

INSERT INTO `lb_image` (`id`, `file_name`, `article_id`, `up_time`) VALUES
(9, 'a33e5f416f9949378374bb0c2d02c62c.jpg', 79, 1559228884),
(10, 'fa51d74ceb131f68782988761c382125.jpg', 79, 1559229044),
(11, '7ed7be2c246258f05ad92e943873a66f.jpg', 79, 1559229406),
(12, 'e317b8c9d6067346993caeece72063bb.jpg', 79, 1559229630),
(13, '23a09ba279ec484d6aa0c7962d7fd1ec.jpg', 79, 1559229941),
(14, '4219e47ffce7771e4df9799ea43c7324.jpg', 79, 1559230054),
(15, '2c2c7a77ba6738020df25395fa91e3c1.jpg', 79, 1559230256),
(16, '221dcc49609bff7e1d1ad5bfd84c2214.jpg', 79, 1559231250),
(17, '4e9beaa4608d39966708b75311afe084.jpg', 79, 1559232252),
(18, '825f9ee60c95391b754f768434cc0aba.jpg', 79, 1559232364),
(19, 'd7e1043d58cc93dd12b66a75387a526d.jpg', 79, 1559232483),
(20, '433381174303277440bad494fae71b14.jpg', 86, 1559394217),
(21, 'fcd24637549aa4618ccd3c09a77b79e9.jpg', 86, 1559394483),
(22, 'a9be615bdb5eecbb7a512bdb425be542.png', 87, 1559973896),
(23, '7af0db3e901b6555b27361987a63f635.png', 87, 1559973997),
(24, '40eaa1142158316877cfb1bd5cb4d066.png', 88, 1559977637),
(25, '50e9cecc453db4c1c6b369bef04dc52f.png', 91, 1560092382),
(26, '7561a7df2bfacee65b6575b99006b2fd.jpg', 99, 1560344930),
(27, '3ec41783a822304ccccdc7e26bf3e284.jpg', 99, 1560345779),
(28, 'b07c90cb0944ddcf95961a49bca058b4.jpg', 102, 1560423501),
(29, '26ba6d7d134ff2137be7194f6ef001f8.png', 102, 1560433045),
(30, '5f8014fb765fdf60d0e2d6488b239b30.jpg', 102, 1560502521),
(31, 'd569d48ba638a90577f0b33c2591f7be.png', 103, 1560509633),
(32, '42b2f9372ed0e17bb4c72784084ce1b6.jpg', 105, 1560669237),
(33, 'fdfde2d9b6c3c129032f6d96b0cbe19d.png', 105, 1560669252),
(34, 'af6b6bbcd8124bdd3e30b4efc8827670.png', 114, 1561002622),
(35, '945a79ef9eafabed20cce1aced6c219c.png', 114, 1561002689),
(36, '54de770c2b17632eeb381f86efac81a3.png', 116, 1561025454),
(37, 'ac2f1e481098387ff73614e426993aa0.png', 117, 1561028693),
(38, 'a9c7170d18c9c3a737d8295fb103a2ee.png', 117, 1561028768),
(39, '390343b1e2dd576195e970a607ef6bfc.png', 120, 1562137080),
(40, '9a285ff8fc36e1d560f64fd76b77c3f1.png', 120, 1562137699),
(41, '2a0dbe5b1617b03ac55733eb06e997bd.png', 120, 1562138227),
(42, 'cdddf4c2dd471aa919ca26ca1d18f505.jpg', 123, 1562482886),
(43, '7ba8f0dd33fd291ec18e2ec188271276.png', 126, 1562551066),
(44, '2946a4eddee434ec5f24c85b28a797ca.png', 128, 1563197324),
(45, '703d67a15f312d5108c902dace97b76b.png', 128, 1563197897),
(46, '28093bde5dfe9bd78aad11e71d9264d6.png', 128, 1563199121),
(47, '9edd691b62563838045c56143e2ce960.png', 129, 1563340612),
(48, '3a5553c4982967cdb5367b1f315fa4bc.jpg', 129, 1563342115),
(49, '7f3311195e8ad4c5e8224ffb4eef40e7.jpg', 129, 1563343371),
(50, '2612bbd3e824ec6e11e700d2598815cd.jpg', 129, 1563343773),
(51, '5cd6c17238bb955a27bfce1d81f94d09.jpg', 129, 1563344978);

-- --------------------------------------------------------

--
-- 表的结构 `lb_link`
--

CREATE TABLE `lb_link` (
  `id` int(11) UNSIGNED NOT NULL COMMENT '链接ID',
  `link` varchar(255) NOT NULL DEFAULT '' COMMENT '链接地址',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '链接名称',
  `create_time` int(11) UNSIGNED DEFAULT NULL COMMENT '链接创建时间',
  `update_time` int(11) UNSIGNED NOT NULL COMMENT '链接最后修改时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='友情链接表';

--
-- 转存表中的数据 `lb_link`
--

INSERT INTO `lb_link` (`id`, `link`, `name`, `create_time`, `update_time`) VALUES
(1000, 'http://i.yzjlb.net', '影子博客', 1527316874, 1560741060),
(1002, 'http://www.kxdmwc.com', '快写代码官网', 1527318850, 0),
(1003, 'https://www.yangqq.com', '杨青个人博客', 1527318780, 1561384067),
(1004, 'http://www.ihuiji.cn', '灰机blog', 1527319510, 0),
(1006, 'http://www.loveteemo.com', '青春博客', 1527320211, 0),
(1017, 'http://www.huahuayufeng.com', '花花与风', 1545064588, 0),
(1018, 'http://www.blogxuan.com', '小柯博客', 1545064653, 1561388394),
(1019, 'https://www.mochoublog.com', '莫愁个人博客', 1551440545, 1561388391),
(1020, 'https://baijunyao.com', '白俊遥博客', 1559575186, 1559575186);

-- --------------------------------------------------------

--
-- 表的结构 `lb_option`
--

CREATE TABLE `lb_option` (
  `id` int(11) UNSIGNED NOT NULL COMMENT '选项ID',
  `name` varchar(64) DEFAULT NULL COMMENT '选项名称',
  `value` varchar(128) DEFAULT '' COMMENT '选项值',
  `autoload` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否自动加载到视图',
  `update_time` int(11) UNSIGNED NOT NULL COMMENT '最后修改时间'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `lb_option`
--

INSERT INTO `lb_option` (`id`, `name`, `value`, `autoload`, `update_time`) VALUES
(0, 'site_icp', '鄂ICP备16019552号-1', b'1', 0),
(1, 'site_title', '洛洛の空间', b'1', 0),
(2, 'site_subtitle', '个人博客，学习过程记录，技术知识分享', b'1', 0),
(4, 'intro_count', '250', b'1', 1559649826),
(5, 'rss_count', '15', b'0', 1559649826),
(6, 'info_qq', '643552878', b'1', 0),
(7, 'info_email', 'luoluolzb@163.com', b'1', 0),
(8, 'info_sign', '每天进步一点点，每日成长一步步。', b'1', 0),
(9, 'info_github', 'luoluolzb', b'1', 0),
(10, 'info_csdn', 'luoluozlb', b'1', 0),
(11, 'list_size', '15', b'0', 1559649826),
(12, 'head_img', 'head.jpg', b'1', 1561381549);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `lb_article`
--
ALTER TABLE `lb_article`
  ADD PRIMARY KEY (`id`),
  ADD KEY `time_index` (`create_time`),
  ADD KEY `top_index` (`is_top`),
  ADD KEY `fkb_cid` (`category_id`);

--
-- Indexes for table `lb_article_extra`
--
ALTER TABLE `lb_article_extra`
  ADD PRIMARY KEY (`article_id`);

--
-- Indexes for table `lb_category`
--
ALTER TABLE `lb_category`
  ADD PRIMARY KEY (`id`),
  ADD KEY `order_index` (`show_order`) USING BTREE;

--
-- Indexes for table `lb_image`
--
ALTER TABLE `lb_image`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk` (`article_id`);

--
-- Indexes for table `lb_link`
--
ALTER TABLE `lb_link`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `lb_option`
--
ALTER TABLE `lb_option`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name_unique` (`name`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `lb_article`
--
ALTER TABLE `lb_article`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '文章ID，主键，自增', AUTO_INCREMENT=131;

--
-- 使用表AUTO_INCREMENT `lb_category`
--
ALTER TABLE `lb_category`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '分类ID', AUTO_INCREMENT=1038;

--
-- 使用表AUTO_INCREMENT `lb_image`
--
ALTER TABLE `lb_image`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '图片ID', AUTO_INCREMENT=52;

--
-- 使用表AUTO_INCREMENT `lb_link`
--
ALTER TABLE `lb_link`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '链接ID', AUTO_INCREMENT=1021;

--
-- 限制导出的表
--

--
-- 限制表 `lb_image`
--
ALTER TABLE `lb_image`
  ADD CONSTRAINT `fk` FOREIGN KEY (`article_id`) REFERENCES `lb_article` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
